(self.webpackChunkgreen=self.webpackChunkgreen||[]).push([[600,5562],{"./libs/chlorophyll/scss/components/slide-toggle/slide-toggle.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Template:()=>Template,default:()=>MDXContent});__webpack_require__("./node_modules/react/index.js");var jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js"),lib=__webpack_require__("./node_modules/@storybook/addon-docs/node_modules/@mdx-js/react/lib/index.js"),dist=__webpack_require__("./node_modules/@storybook/addon-docs/node_modules/@storybook/blocks/dist/index.mjs");const toggle=e=>{const st=e.currentTarget,checked="true"===st.getAttribute("aria-checked");st.setAttribute("aria-checked",!checked)};var slide_toggle_stories=__webpack_require__("./libs/chlorophyll/scss/components/slide-toggle/slide-toggle.stories.js");const Template=({label,checked})=>`\n<div>\n  <span id="slide-toggle-label-1">${label}</span>\n  <button role="switch" aria-checked="${checked}" aria-labelledby="slide-toggle-label-1"></button>\n</div>\n`;function _createMdxContent(props){const _components={code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,lib.R)(),...props.components};return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(dist.W8,{of:slide_toggle_stories}),"\n",(0,jsx_runtime.jsx)(_components.h1,{id:"slide-toggle",children:"Slide Toggle"}),"\n",(0,jsx_runtime.jsx)(_components.p,{children:"The slide toggle is a representation of a physical switch that allows users to turn things on or off."}),"\n",(0,jsx_runtime.jsx)(_components.p,{children:"A slide toggle should be used for binary user choices that have an immidiate effect, such as turning a setting or\npreference on or off. Slide toggles should not be used in forms where the user needs to click an additional submit\nbutton for the values to take effect."}),"\n",(0,jsx_runtime.jsx)(dist.Hl,{of:slide_toggle_stories.SlideToggle}),"\n",(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsxs)("div",{class:"mb-5",children:[(0,jsx_runtime.jsx)("span",{id:"slide-toggle-label-1",children:"Toggle me"}),(0,jsx_runtime.jsx)("button",{role:"switch","aria-checked":"false",onClick:toggle,"aria-labelledby":"slide-toggle-label-1"})]}),(0,jsx_runtime.jsxs)("div",{class:"mb-5",children:[(0,jsx_runtime.jsx)("button",{class:"ms-0",role:"switch","aria-checked":"false",onClick:toggle,"aria-labelledby":"slide-toggle-label-1"}),(0,jsx_runtime.jsx)("span",{id:"slide-toggle-label-1",children:"Label could also go on this side"}),(0,jsx_runtime.jsx)("br",{}),(0,jsx_runtime.jsx)("small",{children:(0,jsx_runtime.jsxs)("em",{children:["^ Here we add ",(0,jsx_runtime.jsx)(_components.code,{children:'class="ms-0"'})," to get rid of left hand margin."]})})]}),(0,jsx_runtime.jsx)("div",{children:(0,jsx_runtime.jsxs)(_components.p,{children:["A toggle can also be placed inline",(0,jsx_runtime.jsx)("button",{role:"switch","aria-checked":"false",onClick:toggle,"aria-label":"Inline toggle"}),"like this."]})})]}),"\n",(0,jsx_runtime.jsx)(_components.p,{children:"A slide toggle can also be used in a form group like this:"}),"\n",(0,jsx_runtime.jsxs)("div",{class:"form-group",children:[(0,jsx_runtime.jsx)("span",{id:"cookies-label-1",children:"Enable cookies"}),(0,jsx_runtime.jsx)("span",{class:"form-info",children:"Some info or help"}),(0,jsx_runtime.jsx)("button",{class:"ms-0",role:"switch","aria-checked":"false",onClick:toggle,"aria-labelledby":"cookies-label-1"})]}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"accessibility",children:"Accessibility"}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["The slide toggle in Chlorophyll is represented by a button element with ",(0,jsx_runtime.jsx)(_components.code,{children:'role="switch"'})," and an ",(0,jsx_runtime.jsx)(_components.code,{children:"aria-checked"}),' state.\nThis will prompt most screen readers to announce it as a switch and its state as "on" or "off", which should give visually\nimpaired users a good idea of what kind of control they are interacting with.']}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:['Another common way of representing a slide toggle is to use a styled checkbox. This has the benefit of not requiring any\nJavaScript to make it interactive, but is somewhat detrimental to Accessibility since the screen reader will simply\nannonce it as a checkbox and announce its state as "checked" or "not checked". This may confuse the user, as checkboxes\nare typically part of a form that needs to be submitted, whereas a slide toggle is typically used for a setting that has\nimmidiate effect. Checkboxes can also use ',(0,jsx_runtime.jsx)(_components.code,{children:'role="switch"'})," to denote them as switches rather than checkboxes, but browser\nand screen reader support here is not great. Many will still announce it as a regular checkbox."]}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"labelling",children:"Labelling"}),"\n",(0,jsx_runtime.jsx)(_components.p,{children:"If there is a short descriptive text next to the slide toggle, be sure to connect it as a label to the button:"}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-html",children:'<span id="cookies-label-1">Enable cookies</span>\n<button\n  role="switch"\n  aria-checked="false"\n  onClick="{toggle}"\n  aria-labelledby="cookies-label-1"\n></button>\n'})}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["Sometimes, it may be visually obvious what the toggle does even though there is no text snippet in its immidiate vicinity.\nIn this case, add a short descriptive label using the ",(0,jsx_runtime.jsx)(_components.code,{children:"aria-label"})," attribute:"]}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-html",children:'<button\n  role="switch"\n  aria-checked="false"\n  onClick="{toggle}"\n  aria-label="Enable cookies"\n></button>\n'})}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:[(0,jsx_runtime.jsx)(_components.strong,{children:"Do not"}),' change the label with the state of the slide toggle, as this would be confusing to screen reader users.\nIf you have an additional label that reads "off" and changes to "on", or similar, regard this as a visual only complement\nand do not try to announce this text to a screen reader. The ',(0,jsx_runtime.jsx)(_components.code,{children:"aria-checked"})," attribute already takes care of this for you."]})]})}function MDXContent(props={}){const{wrapper:MDXLayout}={...(0,lib.R)(),...props.components};return MDXLayout?(0,jsx_runtime.jsx)(MDXLayout,{...props,children:(0,jsx_runtime.jsx)(_createMdxContent,{...props})}):_createMdxContent(props)}},"./node_modules/@storybook/addon-docs/node_modules/@mdx-js/react/lib/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{R:()=>useMDXComponents,x:()=>MDXProvider});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");const emptyComponents={},MDXContext=react__WEBPACK_IMPORTED_MODULE_0__.createContext(emptyComponents);function useMDXComponents(components){const contextComponents=react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext);return react__WEBPACK_IMPORTED_MODULE_0__.useMemo((function(){return"function"==typeof components?components(contextComponents):{...contextComponents,...components}}),[contextComponents,components])}function MDXProvider(properties){let allComponents;return allComponents=properties.disableParentContext?"function"==typeof properties.components?properties.components(emptyComponents):properties.components||emptyComponents:useMDXComponents(properties.components),react__WEBPACK_IMPORTED_MODULE_0__.createElement(MDXContext.Provider,{value:allComponents},properties.children)}},"./node_modules/@storybook/core/dist/components sync recursive":module=>{function webpackEmptyContext(req){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}webpackEmptyContext.keys=()=>[],webpackEmptyContext.resolve=webpackEmptyContext,webpackEmptyContext.id="./node_modules/@storybook/core/dist/components sync recursive",module.exports=webpackEmptyContext},"./node_modules/@storybook/core/dist/theming sync recursive":module=>{function webpackEmptyContext(req){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}webpackEmptyContext.keys=()=>[],webpackEmptyContext.resolve=webpackEmptyContext,webpackEmptyContext.id="./node_modules/@storybook/core/dist/theming sync recursive",module.exports=webpackEmptyContext},"./libs/chlorophyll/scss/components/slide-toggle/slide-toggle.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{SlideToggle:()=>SlideToggle,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});const __WEBPACK_DEFAULT_EXPORT__={title:"Components/Slide Toggle",parameters:{componentIds:["component-slidetoggle"]},argTypes:{label:{control:"text"},checked:{control:"boolean"}}},SlideToggle={render:(({label,checked})=>`\n<div>\n  <span id="slide-toggle-label-1">${label}</span>\n  <button role="switch" aria-checked="${checked}" aria-labelledby="slide-toggle-label-1"></button>\n</div>\n`).bind({}),name:"Slide Toggle",args:{label:"Toggle me",checked:!1}},__namedExportsOrder=["SlideToggle"];SlideToggle.parameters={...SlideToggle.parameters,docs:{...SlideToggle.parameters?.docs,source:{originalSource:"{\n  render: Template.bind({}),\n  name: 'Slide Toggle',\n  args: {\n    label: 'Toggle me',\n    checked: false\n  }\n}",...SlideToggle.parameters?.docs?.source}}}},"./node_modules/memoizerific sync recursive":module=>{function webpackEmptyContext(req){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}webpackEmptyContext.keys=()=>[],webpackEmptyContext.resolve=webpackEmptyContext,webpackEmptyContext.id="./node_modules/memoizerific sync recursive",module.exports=webpackEmptyContext}}]);