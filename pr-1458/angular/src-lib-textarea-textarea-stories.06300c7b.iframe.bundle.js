(self.webpackChunkgreen=self.webpackChunkgreen||[]).push([[4111],{"./libs/angular/src/lib/shared/base-control-value-accessor/base-control-value-accessor.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{q:()=>BaseControlValueAccessorComponent});var tslib__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/tslib/tslib.es6.mjs"),_angular_core__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),_angular_forms__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@angular/forms/fesm2022/forms.mjs"),rxjs__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/Subject.js"),rxjs_operators__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/takeUntil.js"),_ngneat_transloco__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/@ngneat/transloco/fesm2022/ngneat-transloco.mjs");let BaseControlValueAccessorComponent=class BaseControlValueAccessorComponent{set locked(value){this._locked=value,this.cdr.detectChanges()}get locked(){return this._locked}set required(value){this._required=value}get required(){if(void 0!==this._required)return this._required;if(this.ngControl?.control?.validator){const validator=this.ngControl?.control?.validator({});return Object.keys(validator??{}).some((key=>key.startsWith("required")))}}set invalid(value){this._invalid=value}get invalid(){return!0===this._invalid||!1===this._invalid?this._invalid:!!this.ngControl?.control?.invalid&&this.ngControl?.control?.touched}set valid(value){this._valid=value}get valid(){return!0===this._valid||!1===this._valid?this._valid:!!this.ngControl?.control?.valid&&this.ngControl?.control?.touched}set disabled(value){this._disabled=value}get disabled(){return!0===this._disabled||!1===this._disabled?this._disabled:!!this.ngControl?.control?.disabled}constructor(ngControl,translocoScope,cdr){this.ngControl=ngControl,this.translocoScope=translocoScope,this.cdr=cdr,this.id=window.ngv?.nextId(),this.autofocus=!1,this._locked=void 0,this._required=void 0,this._invalid=void 0,this._valid=void 0,this.focused=!1,this._disabled=void 0,this.ngvFocus=new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter,this.ngvBlur=new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter,this._state=null,this.onChange=_=>{},this.onTouched=()=>{},this.onValidatorChange=()=>null,this._onDestroy$=new rxjs__WEBPACK_IMPORTED_MODULE_1__.B,this.ngControl&&(this.ngControl.valueAccessor=this),this.translocoScope&&(this.scope=this.translocoScope.toString())}ngOnInit(){this.ngControl&&this.ngControl.control&&this.ngControl.control.setValidators(_angular_forms__WEBPACK_IMPORTED_MODULE_2__.k0.compose([this.ngControl.control.validator,this.validate])),this.reset?.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.Q)(this._onDestroy$)).subscribe({next:()=>{this.state=this.defaultValue,this.onChange(this.state),this.cdr.detectChanges()}})}ngAfterViewInit(){this.defaultValue=this.defaultValue??this.ngControl?.value}ngOnDestroy(){this._onDestroy$.next(!0),this._onDestroy$.complete()}detectChanges(){this.cdr.detectChanges()}onFocus(event){event.stopPropagation?event.stopPropagation():event.cancelBubble=!0,this.focused=!0,this.ngvFocus.emit(event)}onBlur(event){event.stopPropagation?event.stopPropagation():event.cancelBubble=!0,this.onTouched(),this.focused=!1,this.ngvBlur.emit(event)}setFocus(){this.inputRef&&this.inputRef.nativeElement.focus()}get state(){return this._state}set state(value){void 0===value&&(value=null),this._state=value}writeValue(value){this.state=value}registerOnChange(fn){this.onChange=fn}registerOnTouched(fn){this.onTouched=fn}setDisabledState(isDisabled){this.disabled=isDisabled,this.displayDisabledAsLocked&&(this.locked=isDisabled)}validate(_control){return null}registerOnValidatorChange(fn){this.onValidatorChange=fn}get firstError(){const errors=this.ngControl.errors;if(!errors)return null;const code=Object.keys(errors)[0];return{code,params:errors[code]}}static#_=this.ctorParameters=()=>[{type:_angular_forms__WEBPACK_IMPORTED_MODULE_2__.vO,decorators:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_0__.Self},{type:_angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional}]},{type:void 0,decorators:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional},{type:_angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,args:[_ngneat_transloco__WEBPACK_IMPORTED_MODULE_4__.Lt]}]},{type:_angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef}];static#_2=this.propDecorators={labelContentTpl:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_0__.ContentChild,args:["labelTpl",{read:_angular_core__WEBPACK_IMPORTED_MODULE_0__.TemplateRef}]}],inputRef:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewChild,args:["input",{read:_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef}]}],id:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,args:["attr.id"]},{type:_angular_core__WEBPACK_IMPORTED_MODULE_0__.Input}],name:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_0__.Input}],label:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_0__.Input}],role:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_0__.Input}],value:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_0__.Input}],error:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_0__.Input}],description:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_0__.Input}],autofocus:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_0__.Input}],defaultValue:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_0__.Input}],reset:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_0__.Input}],optional:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_0__.Input}],locked:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_0__.Input}],displayDisabledAsLocked:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_0__.Input}],required:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_0__.Input}],invalid:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_0__.Input}],valid:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_0__.Input}],focused:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_0__.Input}],disabled:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_0__.Input}],ngvFocus:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_0__.Output}],ngvBlur:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_0__.Output}]}};BaseControlValueAccessorComponent=(0,tslib__WEBPACK_IMPORTED_MODULE_5__.Cg)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable)(),(0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive)(),(0,tslib__WEBPACK_IMPORTED_MODULE_5__.Sn)("design:paramtypes",[_angular_forms__WEBPACK_IMPORTED_MODULE_2__.vO,Object,_angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef])],BaseControlValueAccessorComponent)},"./node_modules/rxjs/dist/esm5/internal/operators/catchError.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{W:()=>catchError});var _observable_innerFrom__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/observable/innerFrom.js"),_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/OperatorSubscriber.js"),_util_lift__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/util/lift.js");function catchError(selector){return(0,_util_lift__WEBPACK_IMPORTED_MODULE_0__.N)((function(source,subscriber){var handledResult,innerSub=null,syncUnsub=!1;innerSub=source.subscribe((0,_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_1__._)(subscriber,void 0,void 0,(function(err){handledResult=(0,_observable_innerFrom__WEBPACK_IMPORTED_MODULE_2__.Tg)(selector(err,catchError(selector)(source))),innerSub?(innerSub.unsubscribe(),innerSub=null,handledResult.subscribe(subscriber)):syncUnsub=!0}))),syncUnsub&&(innerSub.unsubscribe(),innerSub=null,handledResult.subscribe(subscriber))}))}},"./libs/angular/src/lib/textarea/textarea.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Primary:()=>Primary,WithDisplayDisabledAsLocked:()=>WithDisplayDisabledAsLocked,WithErrorAndCountdown:()=>WithErrorAndCountdown,WithFixedRows:()=>WithFixedRows,WithFixedRowsAndTextPrefilled:()=>WithFixedRowsAndTextPrefilled,WithLockedInput:()=>WithLockedInput,__namedExportsOrder:()=>__namedExportsOrder,default:()=>textarea_stories});var common=__webpack_require__("./node_modules/@angular/common/fesm2022/common.mjs"),fesm2022_forms=__webpack_require__("./node_modules/@angular/forms/fesm2022/forms.mjs"),dist=__webpack_require__("./node_modules/@storybook/angular/dist/index.mjs"),tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.mjs"),core=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs");let CharacterCountdownDirective=class CharacterCountdownDirective{set maxlength(value){value&&!Number.isNaN(value)?(this._maxlength=value,this.updateContext(),this.isViewCreated||(this.viewContainerRef.createEmbeddedView(this.templateRef,this.context),this.isViewCreated=!0)):this.isViewCreated&&(this.viewContainerRef.clear(),this.isViewCreated=!1)}set currentLength(value){this._currentLength=value??0,this.updateContext()}constructor(viewContainerRef,templateRef){this.viewContainerRef=viewContainerRef,this.templateRef=templateRef,this._maxlength=Number.MAX_SAFE_INTEGER,this._currentLength=0,this.isViewCreated=!1,this.context={charactersLeft:0},this.calculateCharactersLeft=(max,current)=>max-current}updateContext(){this.context.charactersLeft=this.calculateCharactersLeft(this._maxlength,this._currentLength)}static#_=this.ctorParameters=()=>[{type:core.ViewContainerRef},{type:core.TemplateRef}];static#_2=this.propDecorators={maxlength:[{type:core.Input,args:["ngvCharacterCountdown"]}],currentLength:[{type:core.Input,args:["ngvCharacterCountdownCurrentLength"]}]}};CharacterCountdownDirective=(0,tslib_es6.Cg)([(0,core.Directive)({selector:"[ngvCharacterCountdown]"}),(0,tslib_es6.Sn)("design:paramtypes",[core.ViewContainerRef,core.TemplateRef])],CharacterCountdownDirective);var textarea_componentngResource=__webpack_require__("./libs/angular/src/lib/textarea/textarea.component.scss?ngResource"),textarea_componentngResource_default=__webpack_require__.n(textarea_componentngResource),ngneat_transloco=__webpack_require__("./node_modules/@ngneat/transloco/fesm2022/ngneat-transloco.mjs"),base_control_value_accessor_component=__webpack_require__("./libs/angular/src/lib/shared/base-control-value-accessor/base-control-value-accessor.component.ts");let TextareaComponent=class TextareaComponent extends base_control_value_accessor_component.q{set minLength(length){this._minlength=length,this.cdr.detectChanges()}set minlength(length){this._minlength=length,this.cdr.detectChanges()}set maxLength(length){this._maxlength=length,this.cdr.detectChanges()}set maxlength(length){this._maxlength=length,this.cdr.detectChanges()}get hasMaxLength(){return!!this.maxlength&&this.maxlength!==Number.MAX_SAFE_INTEGER}get maxlength(){return this._maxlength}get minlength(){return this._minlength}constructor(ngControl,translocoScope,cdr){super(ngControl,translocoScope,cdr),this.ngControl=ngControl,this.translocoScope=translocoScope,this.cdr=cdr,this.thook="textarea",this.readonly=!1,this._maxlength=Number.MAX_SAFE_INTEGER,this._minlength=0}onInput(event){event.stopPropagation(),this.disabled||(this.state=event.target.value,this.onChange(this.state))}static#_=this.ctorParameters=()=>[{type:fesm2022_forms.vO,decorators:[{type:core.Self},{type:core.Optional}]},{type:void 0,decorators:[{type:core.Optional},{type:core.Inject,args:[ngneat_transloco.Lt]}]},{type:core.ChangeDetectorRef}];static#_2=this.propDecorators={thook:[{type:core.HostBinding,args:["attr.data-thook"]},{type:core.Input}],placeholder:[{type:core.Input}],readonly:[{type:core.Input}],minLength:[{type:core.Input}],minlength:[{type:core.Input}],maxLength:[{type:core.Input}],maxlength:[{type:core.Input}],rows:[{type:core.Input}]}};TextareaComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"ngv-textarea",template:'\x3c!-- LABEL --\x3e\n<label [id]="id + \'-label\'"\n  class="sdv-field-label hide-if-empty"\n  [attr.for]="id + \'-textarea\'"\n  *transloco="let t; read: scope">\n  <ng-template *ngTemplateOutlet="labelContentTpl || basicLabelContentTpl"></ng-template>\n  <ng-template #basicLabelContentTpl>\n    \x3c!-- to trigger css:empty if no label was added --\x3e\n    <ng-container *ngIf="label">\n      {{ label }}\n      <span *ngIf="optional === true || required !== true && optional !== false"\n        class="sdv-field-label--optional">\n        ({{ t(\'label.optional\') }})\n      </span>\n    </ng-container>\n  </ng-template>\n</label>\n\n\x3c!-- DESCRIPTION --\x3e\n<div class="sdv-field-label--small description">{{description}}</div>\n\n\x3c!-- LOCKED INPUT --\x3e\n<ng-container *ngIf="locked">\n  <div [id]="id + \'-textarea\'"\n    class="ngv-field--locked"\n    [attr.name]="name"\n    [attr.value]="state"\n    [attr.role]="role">\n    <span *ngIf="!state"\n      class="unset-state">-</span>\n    <ng-container *ngIf="state">\n      {{ state }}\n    </ng-container>\n  </div>\n</ng-container>\n\n\x3c!-- INPUT FIELD --\x3e\n<ng-container *ngIf="!locked">\n  <textarea #input\n    [id]="id + \'-textarea\'"\n    class="sdv-field"\n    [ngClass]="{ \'no-resize\': !!rows }"\n    [class.ngv-field--error]="invalid"\n    [attr.name]="name"\n    [attr.required]="required"\n    [disabled]="disabled"\n    [autofocus]="autofocus"\n    [readOnly]="readonly"\n    [attr.maxlength]="maxlength"\n    [attr.minlength]="minlength"\n    [attr.role]="role"\n    [attr.rows]="rows"\n    [attr.placeholder]="placeholder"\n    [attr.aria-label]="description"\n    [value]="state"\n    (input)="onInput($event)"\n    (focus)="onFocus($event)"\n    (blur)="onBlur($event)">\n</textarea>\n\n  \x3c!-- ERRORS --\x3e\n  <div class="error-wrapper"\n    *transloco="let t; read: scope">\n    <label class="sdv-field-notice sdv-field-notice--error"\n      [attr.for]="id + \'-textarea\'"\n      *ngIf="invalid && (error || ngControl?.invalid)">\n      <span *ngIf="error; else errorsRef">{{error}}</span>\n      <ng-template #errorsRef>\n        <span *ngIf="firstError as error">\n          {{ t(\'error.field\' + error?.code, error?.params) }}\n        </span>\n      </ng-template>\n    </label>\n\n    <ng-container *ngIf="hasMaxLength">\n      <label\n        *ngvCharacterCountdown="maxlength; currentLength: (inputRef?.nativeElement?.value ?? \'\').length; charactersLeft as charactersLeft"\n        class="sdv-field-notice"\n        style="text-align: right">\n        {{ charactersLeft }} {{ t(\'label.maxlength\')}}\n      </label>\n    </ng-container>\n  </div>\n\n  \x3c!-- CHILDREN --\x3e\n  <ng-content></ng-content>\n\n</ng-container>',styles:[textarea_componentngResource_default()]}),(0,tslib_es6.Sn)("design:paramtypes",[fesm2022_forms.vO,Object,core.ChangeDetectorRef])],TextareaComponent);const textarea_stories={title:"V-Angular/Textarea",component:TextareaComponent,decorators:[(0,dist.moduleMetadata)({declarations:[CharacterCountdownDirective],imports:[common.CommonModule,fesm2022_forms.YN,fesm2022_forms.X1]})]};let formControlValue;const Template=args=>{const formControl=new fesm2022_forms.hs(formControlValue,[fesm2022_forms.k0.maxLength(140)]);formControl.valueChanges.subscribe((val=>formControlValue=val));return{template:'\n    <div style="width: 15rem">\n      <ngv-textarea\n        [formControl]="formControl"\n        [label]="label"\n        [invalid]="invalid"\n        [placeholder]="placeholder"\n        [maxlength]="maxlength"\n        [rows]="rows"\n        [locked]="locked"\n        [displayDisabledAsLocked]="displayDisabledAsLocked">\n      </ngv-textarea>\n      <div style="margin-top: 1rem">\n        <button type="button" class="sdv-button" (click)="disableFn()">Toggle disable control</button>\n      </div>\n    </div>\n    ',props:{...args,formControl,disableFn:()=>{if(formControl.disabled)return formControl.enable();formControl.disable()}}}},Primary=Template.bind({});Primary.args={id:"123",label:"This is a field label",placeholder:"This is a placeholder",maxlength:140,invalid:!1};const WithErrorAndCountdown=Template.bind({});WithErrorAndCountdown.args={...Primary.args,invalid:!0,error:"this is a test error"};const WithFixedRows=Template.bind({});WithFixedRows.args={...Primary.args,rows:3};const WithFixedRowsAndTextPrefilled=Template.bind({});WithFixedRowsAndTextPrefilled.args={...Primary.args,rows:3,state:"Hello Hello Hello Hello Hello Hello Hello Hello Hello Hello Hello Hello Hello Hello Hello Hello Hello Hello Hello"};const WithLockedInput=Template.bind({});WithLockedInput.args={...Primary.args,locked:!0,description:void 0};const WithDisplayDisabledAsLocked=Template.bind({});WithDisplayDisabledAsLocked.args={...Primary.args,invalid:void 0,required:void 0,optional:void 0,valid:void 0,locked:!1,description:void 0,displayDisabledAsLocked:!0},Primary.parameters={...Primary.parameters,docs:{...Primary.parameters?.docs,source:{originalSource:'(args: TextareaComponent & any) => {\n  const formControl = new UntypedFormControl(formControlValue, [Validators.maxLength(140)]);\n  formControl.valueChanges.subscribe(val => formControlValue = val);\n  const toggleDisableField = () => {\n    if (!!formControl.disabled) return formControl.enable();\n    formControl.disable();\n  };\n  return {\n    template: /*html*/`\n    <div style="width: 15rem">\n      <ngv-textarea\n        [formControl]="formControl"\n        [label]="label"\n        [invalid]="invalid"\n        [placeholder]="placeholder"\n        [maxlength]="maxlength"\n        [rows]="rows"\n        [locked]="locked"\n        [displayDisabledAsLocked]="displayDisabledAsLocked">\n      </ngv-textarea>\n      <div style="margin-top: 1rem">\n        <button type="button" class="sdv-button" (click)="disableFn()">Toggle disable control</button>\n      </div>\n    </div>\n    `,\n    props: {\n      ...args,\n      formControl: formControl,\n      disableFn: toggleDisableField\n    }\n  };\n}',...Primary.parameters?.docs?.source}}},WithErrorAndCountdown.parameters={...WithErrorAndCountdown.parameters,docs:{...WithErrorAndCountdown.parameters?.docs,source:{originalSource:'(args: TextareaComponent & any) => {\n  const formControl = new UntypedFormControl(formControlValue, [Validators.maxLength(140)]);\n  formControl.valueChanges.subscribe(val => formControlValue = val);\n  const toggleDisableField = () => {\n    if (!!formControl.disabled) return formControl.enable();\n    formControl.disable();\n  };\n  return {\n    template: /*html*/`\n    <div style="width: 15rem">\n      <ngv-textarea\n        [formControl]="formControl"\n        [label]="label"\n        [invalid]="invalid"\n        [placeholder]="placeholder"\n        [maxlength]="maxlength"\n        [rows]="rows"\n        [locked]="locked"\n        [displayDisabledAsLocked]="displayDisabledAsLocked">\n      </ngv-textarea>\n      <div style="margin-top: 1rem">\n        <button type="button" class="sdv-button" (click)="disableFn()">Toggle disable control</button>\n      </div>\n    </div>\n    `,\n    props: {\n      ...args,\n      formControl: formControl,\n      disableFn: toggleDisableField\n    }\n  };\n}',...WithErrorAndCountdown.parameters?.docs?.source}}},WithFixedRows.parameters={...WithFixedRows.parameters,docs:{...WithFixedRows.parameters?.docs,source:{originalSource:'(args: TextareaComponent & any) => {\n  const formControl = new UntypedFormControl(formControlValue, [Validators.maxLength(140)]);\n  formControl.valueChanges.subscribe(val => formControlValue = val);\n  const toggleDisableField = () => {\n    if (!!formControl.disabled) return formControl.enable();\n    formControl.disable();\n  };\n  return {\n    template: /*html*/`\n    <div style="width: 15rem">\n      <ngv-textarea\n        [formControl]="formControl"\n        [label]="label"\n        [invalid]="invalid"\n        [placeholder]="placeholder"\n        [maxlength]="maxlength"\n        [rows]="rows"\n        [locked]="locked"\n        [displayDisabledAsLocked]="displayDisabledAsLocked">\n      </ngv-textarea>\n      <div style="margin-top: 1rem">\n        <button type="button" class="sdv-button" (click)="disableFn()">Toggle disable control</button>\n      </div>\n    </div>\n    `,\n    props: {\n      ...args,\n      formControl: formControl,\n      disableFn: toggleDisableField\n    }\n  };\n}',...WithFixedRows.parameters?.docs?.source}}},WithFixedRowsAndTextPrefilled.parameters={...WithFixedRowsAndTextPrefilled.parameters,docs:{...WithFixedRowsAndTextPrefilled.parameters?.docs,source:{originalSource:'(args: TextareaComponent & any) => {\n  const formControl = new UntypedFormControl(formControlValue, [Validators.maxLength(140)]);\n  formControl.valueChanges.subscribe(val => formControlValue = val);\n  const toggleDisableField = () => {\n    if (!!formControl.disabled) return formControl.enable();\n    formControl.disable();\n  };\n  return {\n    template: /*html*/`\n    <div style="width: 15rem">\n      <ngv-textarea\n        [formControl]="formControl"\n        [label]="label"\n        [invalid]="invalid"\n        [placeholder]="placeholder"\n        [maxlength]="maxlength"\n        [rows]="rows"\n        [locked]="locked"\n        [displayDisabledAsLocked]="displayDisabledAsLocked">\n      </ngv-textarea>\n      <div style="margin-top: 1rem">\n        <button type="button" class="sdv-button" (click)="disableFn()">Toggle disable control</button>\n      </div>\n    </div>\n    `,\n    props: {\n      ...args,\n      formControl: formControl,\n      disableFn: toggleDisableField\n    }\n  };\n}',...WithFixedRowsAndTextPrefilled.parameters?.docs?.source}}},WithLockedInput.parameters={...WithLockedInput.parameters,docs:{...WithLockedInput.parameters?.docs,source:{originalSource:'(args: TextareaComponent & any) => {\n  const formControl = new UntypedFormControl(formControlValue, [Validators.maxLength(140)]);\n  formControl.valueChanges.subscribe(val => formControlValue = val);\n  const toggleDisableField = () => {\n    if (!!formControl.disabled) return formControl.enable();\n    formControl.disable();\n  };\n  return {\n    template: /*html*/`\n    <div style="width: 15rem">\n      <ngv-textarea\n        [formControl]="formControl"\n        [label]="label"\n        [invalid]="invalid"\n        [placeholder]="placeholder"\n        [maxlength]="maxlength"\n        [rows]="rows"\n        [locked]="locked"\n        [displayDisabledAsLocked]="displayDisabledAsLocked">\n      </ngv-textarea>\n      <div style="margin-top: 1rem">\n        <button type="button" class="sdv-button" (click)="disableFn()">Toggle disable control</button>\n      </div>\n    </div>\n    `,\n    props: {\n      ...args,\n      formControl: formControl,\n      disableFn: toggleDisableField\n    }\n  };\n}',...WithLockedInput.parameters?.docs?.source}}},WithDisplayDisabledAsLocked.parameters={...WithDisplayDisabledAsLocked.parameters,docs:{...WithDisplayDisabledAsLocked.parameters?.docs,source:{originalSource:'(args: TextareaComponent & any) => {\n  const formControl = new UntypedFormControl(formControlValue, [Validators.maxLength(140)]);\n  formControl.valueChanges.subscribe(val => formControlValue = val);\n  const toggleDisableField = () => {\n    if (!!formControl.disabled) return formControl.enable();\n    formControl.disable();\n  };\n  return {\n    template: /*html*/`\n    <div style="width: 15rem">\n      <ngv-textarea\n        [formControl]="formControl"\n        [label]="label"\n        [invalid]="invalid"\n        [placeholder]="placeholder"\n        [maxlength]="maxlength"\n        [rows]="rows"\n        [locked]="locked"\n        [displayDisabledAsLocked]="displayDisabledAsLocked">\n      </ngv-textarea>\n      <div style="margin-top: 1rem">\n        <button type="button" class="sdv-button" (click)="disableFn()">Toggle disable control</button>\n      </div>\n    </div>\n    `,\n    props: {\n      ...args,\n      formControl: formControl,\n      disableFn: toggleDisableField\n    }\n  };\n}',...WithDisplayDisabledAsLocked.parameters?.docs?.source}}};const __namedExportsOrder=["Primary","WithErrorAndCountdown","WithFixedRows","WithFixedRowsAndTextPrefilled","WithLockedInput","WithDisplayDisabledAsLocked"]},"./libs/angular/src/lib/textarea/textarea.component.scss?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,"/**\n * Calculate the luminance for a color.\n * See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n */\n/**\n * Calculate the contrast ratio between two colors.\n * See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n */\n/* stylelint-disable max-nesting-depth */\n/* stylelint-enable max-nesting-depth */\n/* stylelint-disable */\n/* stylelint-enable */\n/* stylelint-disable */\n/**\n* @deprecated\n* Use `add-focus` instead\n*/\n/** add background color, color and border-color to element when it has focus-visible i.e. tab focus */\n:host {\n  .hide-if-empty: empty;\n  .hide-if-empty-display: none;\n}\n:host textarea {\n  padding-left: 1rem;\n  padding-right: 1rem;\n  padding-bottom: 0.75rem;\n  padding-top: 0.75rem;\n  border-radius: var(--sg-border-radius);\n  border: solid var(--sg-border-width) var(--sg-border-color);\n  --border-color: var(--sg-border-color);\n  align-items: center;\n  background-color: var(--sg-form-control-bg);\n  color: var(--text-primary-color);\n  display: flex;\n  justify-content: center;\n  resize: vertical;\n}\n:host textarea:focus:not(:focus-visible) {\n  box-shadow: none;\n  outline: 0;\n}\n:host textarea:focus, :host textarea:focus-visible {\n  outline-color: var(--gds-sys-color-focus-outline);\n  outline-style: solid;\n  outline-width: 0.125rem;\n  outline-offset: 0.125rem;\n}\n@media screen and (-ms-high-contrast: active) {\n  :host textarea {\n    border: 2px solid currentcolor;\n  }\n}\n:host textarea:hover {\n  background-color: var(--gds-ref-pallet-base100);\n}\n:host textarea:disabled, :host textarea.disabled, :host textarea[aria-disabled=true] {\n  background: var(--sg-form-control-bg-disabled) !important;\n  color: var(--text-disabled-color) !important;\n  border-color: var(--border-disabled-color) !important;\n  cursor: not-allowed;\n}\n:host textarea:disabled::placeholder, :host textarea.disabled::placeholder, :host textarea[aria-disabled=true]::placeholder {\n  color: var(--text-disabled-color);\n}\n:host .unset-state {\n  padding-left: 0.5rem;\n}\n:host .sdv-field-label--optional {\n  font-weight: 400;\n}\n:host textarea {\n  width: 100%;\n  max-width: 100%;\n}\n:host .no-resize {\n  resize: none;\n  /* Width */\n}\n:host .no-resize::-webkit-scrollbar {\n  -webkit-appearance: none;\n}\n:host .no-resize::-webkit-scrollbar-thumb {\n  border-radius: 0.5rem;\n}",""]),module.exports=___CSS_LOADER_EXPORT___.toString()}}]);