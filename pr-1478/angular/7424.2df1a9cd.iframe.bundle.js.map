{"version":3,"file":"7424.2df1a9cd.iframe.bundle.js","mappings":";AA+bA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAKA;;AAEA;AAIA;AAEA","sources":["webpack://green/./dist/libs/core/src/chunks/chunk.LW2KPC3E.js"],"sourcesContent":["import {\n  GdsFormControlElement\n} from \"./chunk.MZSK66DN.js\";\nimport {\n  constrainSlots\n} from \"./chunk.KBYQYDL3.js\";\nimport {\n  TransitionalStyles\n} from \"./chunk.G5LXK5DO.js\";\nimport {\n  tokens\n} from \"./chunk.FKJYZJG2.js\";\nimport {\n  gdsCustomElement,\n  html\n} from \"./chunk.VOYMQ322.js\";\nimport {\n  __decorateClass,\n  __privateAdd,\n  __privateGet,\n  __privateSet\n} from \"./chunk.5VURDMKE.js\";\n\n// libs/core/src/components/button/button.ts\nimport { nothing as nothing2, unsafeCSS } from \"lit\";\nimport { html as staticHtml, literal } from \"lit/static-html.js\";\nimport { property, query } from \"lit/decorators.js\";\nimport { when } from \"lit/directives/when.js\";\nimport { ifDefined } from \"lit/directives/if-defined.js\";\nimport { classMap } from \"lit/directives/class-map.js\";\n\n// libs/core/src/utils/directives/forward-attributes.ts\nimport { Directive, PartType, directive } from \"lit/directive.js\";\nimport { nothing } from \"lit/html.js\";\nvar ForwardAttributesDirective = class extends Directive {\n  constructor(partInfo) {\n    super(partInfo);\n    if (partInfo.type !== PartType.ELEMENT) {\n      throw new Error(\n        \"The `forwardAttributes` directive must be used in element bindings\"\n      );\n    }\n  }\n  render(_filter) {\n    return nothing;\n  }\n  update(part, [filter]) {\n    var _a;\n    const element = part.element;\n    const host = (_a = part.options) == null ? void 0 : _a.host;\n    Array.from(host.attributes).forEach((attr) => {\n      if (filter(attr)) {\n        element.setAttribute(attr.name.replace(\"gds-\", \"\"), attr.value);\n      }\n    });\n  }\n};\nvar forwardAttributes = directive(ForwardAttributesDirective);\n\n// libs/core/src/components/button/button.style.css?inline\nvar button_style_default = `@layer tokens, a11y, core, ranks, sizes, variants, disabled;\n\n@layer tokens {\n  :host {\n    --_gap: var(--gds-space-m);\n\n    --_transition: var(--gds-sys-transition);\n\n    --_padding-inline: var(--gds-space-l);\n    --_padding-block: var(--gds-space-m);\n\n    --_border-radius: var(--gds-space-max);\n    --_border-width: 1px;\n    --_border-style: solid;\n\n    --_color-bg: var(--gds-sys-color-content-content);\n    --_color-text: var(--gds-sys-color-content-content-inverse);\n    --_color-border: var(--gds-sys-color-stroke-stroke);\n\n    --_color-outline-alpha: 60%;\n    --_color-outline: var(--_color-border);\n\n    /* These state layer variables can be variant to the correct state layer token in\n    * the rank and variant specific styles. It will be blended with \\`--_color-bg\\`\n    * for the \\`background-color\\` rule. */\n    --_state-layer-hover: var(--gds-sys-color-state-layers-state-black);\n    --_state-layer-active: var(--gds-sys-color-state-layers-state-black-shade);\n\n    --gds-sys-transition-properties: color;\n\n    contain: layout;\n    display: inline-block;\n    isolation: isolate;\n    max-width: 100%;\n  }\n}\n\n@layer a11y {\n  @media (prefers-color-scheme: dark) {\n    /* TODO */\n  }\n  @media (prefers-reduced-motion: reduce) {\n    :host {\n      --_transition: none;\n    }\n  }\n}\n\n@layer core {\n  .button {\n    --gds-sys-transition-properties: color !important;\n\n    align-items: center;\n    background-color: var(--_color-bg);\n    block-size: 100%;\n    border-color: var(--_color-border);\n    border-radius: var(--_border-radius);\n    border-style: var(--_border-style);\n    border-width: var(--_border-width);\n    box-sizing: border-box;\n    color: var(--_color-text);\n    color-scheme: dark light;\n    cursor: pointer;\n    display: inline-flex;\n    font-family: inherit;\n    font-size: 1rem;\n    font-weight: 400;\n    gap: var(--_gap);\n    height: var(--_size);\n    inline-size: 100%;\n    justify-content: space-between;\n    justify-items: center;\n    line-height: 1.25;\n    outline-color: transparent;\n    outline-offset: 2px;\n    outline-style: solid;\n    outline-width: 2px;\n    padding-block: var(--_padding-block);\n    padding-inline: var(--_padding-inline);\n    position: relative;\n    text-decoration: none;\n    transition: var(--_transition);\n    transition-property: color, border-color;\n\n    &:focus {\n      outline-color: color-mix(\n        in srgb,\n        var(--_color-outline),\n        transparent var(--_color-outline-alpha)\n      );\n\n      &:not(:focus-visible) {\n        outline-color: transparent;\n      }\n    }\n\n    &:hover {\n      background-color: color-mix(\n        in srgb,\n        var(--_color-bg),\n        var(--_state-layer-hover)\n      );\n      border-color: color-mix(\n        in srgb,\n        var(--_color-border),\n        var(--_state-layer-hover)\n      );\n    }\n\n    &:active {\n      background-color: color-mix(\n        in srgb,\n        var(--_color-bg),\n        var(--_state-layer-active)\n      );\n      border-color: color-mix(\n        in srgb,\n        var(--_color-border),\n        var(--_state-layer-active)\n      );\n    }\n  }\n\n  .button slot:not([name]) {\n    display: inline-block;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n  }\n\n  .button.icon slot {\n    display: contents;\n  }\n}\n\n@layer ranks {\n  :host([rank*='secondary']) .button {\n    --_color-bg: var(--gds-sys-color-content-content-inverse);\n    --_color-text: var(--gds-sys-color-content-content);\n    --_color-border: var(--gds-sys-color-stroke-stroke);\n\n    &:active {\n      --_state-layer-active: var(--gds-sys-color-state-layers-state-black-dim1);\n    }\n  }\n\n  :host([rank*='tertiary']) .button {\n    --_color-bg: transparent;\n    --_color-text: var(--gds-sys-color-content-content);\n    --_color-border: transparent;\n\n    &:hover {\n      --_color-border: var(--gds-sys-color-stroke-stroke);\n    }\n\n    &:active {\n      --_state-layer-active: var(--gds-sys-color-state-layers-state-black-dim1);\n      --_color-border: var(--gds-sys-color-stroke-stroke);\n    }\n  }\n\n  .button.circle {\n    display: flex;\n    align-items: center;\n    height: var(--_size);\n    width: var(--_size);\n    aspect-ratio: 1/1;\n    justify-content: center;\n    align-items: center;\n    padding: 0;\n  }\n}\n\n@layer sizes {\n  :host([size='small']) .button {\n    --_padding-inline: var(--gds-space-l);\n    --_padding-block: var(--gds-space-s);\n    --_size: 2rem;\n    font-size: 0.875rem;\n  }\n\n  :host([size='medium']) .button {\n    --_padding-inline: var(--gds-space-l);\n    --_padding-block: var(--gds-space-m);\n    --_size: 2.5rem;\n  }\n\n  :host([size='large']) .button {\n    --_padding-inline: var(--gds-space-xl);\n    --_padding-block: var(--gds-space-m);\n    --_size: 3rem;\n  }\n}\n\n@layer variants {\n  :host([rank='primary'][variant='positive']) .button {\n    --_bg: var(--gds-sys-color-container-container-positive);\n    --_color-bg: var(--_bg);\n    --_color-border: var(--_bg);\n\n    &:hover {\n      --_state-layer-hover: var(--gds-sys-color-state-layers-state-black-dim1);\n    }\n\n    &:active {\n      --_state-layer-active: var(--gds-sys-color-state-layers-state-black-dim2);\n    }\n\n    &:focus {\n      --_color-outline: var(--_bg);\n    }\n  }\n\n  :host([rank='secondary'][variant='positive']) .button {\n    --_color-bg: var(--gds-sys-color-content-content-inverse);\n    --_color-text: var(--gds-sys-color-content-content-positive);\n    --_color-border: var(--gds-sys-color-stroke-stroke-positive);\n\n    &:hover {\n      --_state-layer-hover: var(--gds-sys-color-state-layers-state-positive);\n    }\n\n    &:active {\n      --_state-layer-active: var(\n        --gds-sys-color-state-layers-state-positive-dim\n      );\n    }\n  }\n\n  :host([rank='tertiary'][variant='positive']) .button {\n    --_color-bg: transparent;\n    --_color-text: var(--gds-sys-color-content-content-positive);\n    --_color-border: transparent;\n\n    &:hover {\n      --_state-layer-hover: var(--gds-sys-color-state-layers-state-positive);\n      --_color-border: var(--gds-sys-color-stroke-stroke-positive);\n    }\n\n    &:active {\n      --_state-layer-active: var(\n        --gds-sys-color-state-layers-state-positive-dim\n      );\n      --_color-border: var(--gds-sys-color-stroke-stroke-positive);\n    }\n  }\n\n  :host([rank='primary'][variant='negative']) .button {\n    --_bg: var(--gds-sys-color-container-container-negative);\n    --_color-bg: var(--_bg);\n    --_color-text: var(--gds-sys-color-status-negative-on-negative);\n    --_color-border: var(--_bg);\n\n    &:hover {\n      --_state-layer-hover: var(--gds-sys-color-state-layers-state-black-dim1);\n    }\n\n    &:active {\n      --_state-layer-active: var(--gds-sys-color-state-layers-state-black-dim2);\n    }\n\n    &:focus {\n      --_color-outline: var(--_bg);\n    }\n  }\n\n  :host([rank='secondary'][variant='negative']) .button {\n    --_color-bg: var(--gds-sys-color-content-content-inverse);\n    --_color-text: var(--gds-sys-color-content-content-negative);\n    --_color-border: var(--gds-sys-color-stroke-stroke-negative);\n\n    &:hover {\n      --_state-layer-hover: var(--gds-sys-color-state-layers-state-negative);\n    }\n\n    &:active {\n      --_state-layer-active: var(\n        --gds-sys-color-state-layers-state-negative-dim\n      );\n    }\n  }\n\n  :host([rank='tertiary'][variant='negative']) .button {\n    --_color-bg: transparent;\n    --_color-text: var(--gds-sys-color-content-content-negative);\n    --_color-border: transparent;\n\n    &:hover {\n      --_state-layer-hover: var(--gds-sys-color-state-layers-state-negative);\n      --_color-border: var(--gds-sys-color-stroke-stroke-negative);\n    }\n\n    &:active {\n      --_state-layer-active: var(\n        --gds-sys-color-state-layers-state-negative-dim\n      );\n      --_color-border: var(--gds-sys-color-stroke-stroke-negative);\n    }\n  }\n}\n\n@layer disabled {\n  .button:disabled {\n    --_color-bg: var(--gds-sys-color-container-container-disabled);\n    border-color: var(--_color-bg);\n    color: var(--gds-sys-color-content-content-disabled);\n    pointer-events: none;\n  }\n}\n`;\n\n// libs/core/src/utils/helpers/strip-white-space.ts\nvar templateCache = /* @__PURE__ */ new WeakMap();\nfunction stripWhitespace(extendedTag) {\n  return (strings, ...values) => {\n    let modstrings = templateCache.get(strings);\n    if (!modstrings) {\n      modstrings = strings.map((s) => s.replace(/\\n[\\s]+</gm, \"<\"));\n      modstrings.raw = strings.raw;\n      templateCache.set(strings, modstrings);\n    }\n    return extendedTag(modstrings, ...values);\n  };\n}\n\n// libs/core/src/components/button/button.ts\nvar html2 = stripWhitespace(html);\nvar _isIconButton, _isLink, isLink_get, _defaultRel, defaultRel_get, _mainSlotChange, _handleClick;\nvar GdsButton = class extends GdsFormControlElement {\n  constructor() {\n    super();\n    __privateAdd(this, _isLink);\n    __privateAdd(this, _defaultRel);\n    this.disabled = false;\n    this.rank = \"primary\";\n    this.variant = \"neutral\";\n    this.size = \"medium\";\n    this.label = \"\";\n    this.href = \"\";\n    __privateAdd(this, _isIconButton, false);\n    // Check if the button is an icon button.\n    __privateAdd(this, _mainSlotChange, () => {\n      var _a, _b;\n      const assignedNodes = (_b = (_a = this._mainSlot) == null ? void 0 : _a.assignedNodes()) != null ? _b : [];\n      __privateSet(this, _isIconButton, assignedNodes.length === 1 && assignedNodes.some(\n        (node) => node.nodeName.toLowerCase().startsWith(\"gds-icon\")\n      ));\n      this.requestUpdate();\n    });\n    __privateAdd(this, _handleClick, (e) => {\n      this.dispatchEvent(\n        new CustomEvent(\"gds-click\", {\n          bubbles: true,\n          composed: true,\n          detail: e\n        })\n      );\n      if (this.form && !__privateGet(this, _isLink, isLink_get)) {\n        if (this.type === \"submit\") {\n          this.form.requestSubmit();\n        } else if (this.type === \"reset\") {\n          this.form.reset();\n        }\n      }\n    });\n    constrainSlots(this);\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    this.setAttribute(\"role\", \"none\");\n    TransitionalStyles.instance.apply(this, \"gds-button\");\n  }\n  render() {\n    const buttonClasses = {\n      button: true,\n      circle: __privateGet(this, _isIconButton),\n      icon: __privateGet(this, _isIconButton),\n      small: this.size === \"small\",\n      large: this.size === \"large\",\n      positive: this.variant === \"positive\",\n      negative: this.variant === \"negative\",\n      primary: this.rank === \"primary\",\n      secondary: this.rank === \"secondary\",\n      tertiary: this.rank === \"tertiary\"\n    };\n    const tag = __privateGet(this, _isLink, isLink_get) ? literal`a` : literal`button`;\n    return staticHtml`\n      <${tag}\n        class=${classMap(buttonClasses)}\n        type=\"${ifDefined(__privateGet(this, _isLink, isLink_get) ? void 0 : this.type)}\"\n        ?disabled=\"${this.disabled}\"\n        aria-label=${this.label || nothing2}\n        href=${ifDefined(__privateGet(this, _isLink, isLink_get) ? this.href : void 0)}\n        target=${ifDefined(__privateGet(this, _isLink, isLink_get) ? this.target : void 0)}\n        rel=${ifDefined(__privateGet(this, _isLink, isLink_get) ? this.rel || __privateGet(this, _defaultRel, defaultRel_get) : void 0)}\n        download=${ifDefined(__privateGet(this, _isLink, isLink_get) ? this.download : void 0)}\n        part=\"_button\"\n        @click=\"${__privateGet(this, _handleClick)}\"\n        ${forwardAttributes(\n      (attr) => attr.name.startsWith(\"gds-aria\") || attr.name === \"gds-role\"\n    )}\n      >\n        <slot name=\"lead\"></slot>\n        <slot @slotchange=${__privateGet(this, _mainSlotChange)}></slot>\n        <slot name=\"trail\"></slot>\n        ${when(\n      !this._isUsingTransitionalStyles,\n      () => html2`<gds-ripple></gds-ripple>`\n    )}\n      </${tag}>\n    `;\n  }\n};\n_isIconButton = new WeakMap();\n_isLink = new WeakSet();\nisLink_get = function() {\n  return this.href.length > 0;\n};\n_defaultRel = new WeakSet();\ndefaultRel_get = function() {\n  return this.target === \"_blank\" ? \"noreferrer noopener\" : void 0;\n};\n_mainSlotChange = new WeakMap();\n_handleClick = new WeakMap();\nGdsButton.styles = [tokens, unsafeCSS(button_style_default)];\n/**\n * @internal\n */\nGdsButton.shadowRootOptions = {\n  mode: \"open\",\n  delegatesFocus: true\n};\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], GdsButton.prototype, \"disabled\", 2);\n__decorateClass([\n  property({ reflect: true })\n], GdsButton.prototype, \"type\", 2);\n__decorateClass([\n  property({ reflect: true })\n], GdsButton.prototype, \"rank\", 2);\n__decorateClass([\n  property({ reflect: true })\n], GdsButton.prototype, \"variant\", 2);\n__decorateClass([\n  property({ reflect: true })\n], GdsButton.prototype, \"size\", 2);\n__decorateClass([\n  property()\n], GdsButton.prototype, \"label\", 2);\n__decorateClass([\n  property()\n], GdsButton.prototype, \"href\", 2);\n__decorateClass([\n  property()\n], GdsButton.prototype, \"target\", 2);\n__decorateClass([\n  property()\n], GdsButton.prototype, \"rel\", 2);\n__decorateClass([\n  property()\n], GdsButton.prototype, \"download\", 2);\n__decorateClass([\n  query(\"slot:not([name])\")\n], GdsButton.prototype, \"_mainSlot\", 2);\nGdsButton = __decorateClass([\n  gdsCustomElement(\"gds-button\")\n], GdsButton);\n\nexport {\n  GdsButton\n};\n"],"names":[],"sourceRoot":""}