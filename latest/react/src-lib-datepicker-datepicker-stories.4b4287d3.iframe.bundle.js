"use strict";(self.webpackChunkgreen=self.webpackChunkgreen||[]).push([[7755],{"./libs/react/src/lib/datepicker/datepicker.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,Validation:()=>Validation,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var _datepicker__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./libs/react/src/lib/datepicker/datepicker.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react/jsx-runtime.js");const __WEBPACK_DEFAULT_EXPORT__={title:"Components/Datepicker",component:_datepicker__WEBPACK_IMPORTED_MODULE_0__.Ay,argTypes:{},parameters:{componentIds:["component-datepicker"],docs:{description:{component:"Date pickers are used when users need to enter a date. The user can enter the date as text, but the date picker also allows the user to select the date in a visual representation of a calendar."}}},tags:["autodocs"]};var Default={args:{label:"Choose date"}},Validation={args:{label:"Choose date",validator:{validate:function validate(el){if("correctValue"!==el.value)return[{badInput:!0,customError:!0,patternMismatch:!0,rangeOverflow:!0,rangeUnderflow:!0,stepMismatch:!0,tooLong:!0,tooShort:!0,typeMismatch:!0,valid:!1,valueMissing:!0},"My custom validation message"]}},value:new Date,testId:"test"},render:function render(args){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_datepicker__WEBPACK_IMPORTED_MODULE_0__.Ay,Object.assign({},args))}};Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"{\n  args: {\n    label: 'Choose date'\n  }\n}",...Default.parameters?.docs?.source}}},Validation.parameters={...Validation.parameters,docs:{...Validation.parameters?.docs,source:{originalSource:"{\n  args: {\n    label: 'Choose date',\n    validator: {\n      validate: (el: GdsDatePicker) => {\n        /** Put your custom validation logic */\n        if (el.value !== 'correctValue') {\n          /** And return a validator array */\n          return [{\n            badInput: true,\n            customError: true,\n            patternMismatch: true,\n            rangeOverflow: true,\n            rangeUnderflow: true,\n            stepMismatch: true,\n            tooLong: true,\n            tooShort: true,\n            typeMismatch: true,\n            valid: false,\n            valueMissing: true\n          }, 'My custom validation message'];\n        }\n      }\n    },\n    value: new Date(),\n    testId: 'test'\n  },\n  render: args => <Datepicker {...args} />\n}",...Validation.parameters?.docs?.source},description:{story:"To handle validation of the `Datepicker`, you can pass a `validator` object to the `Datepicker` component. The `validator` object should have a `validate` function that takes the `Datepicker` element as an argument and returns an array of the validity state and an optional validation message.\n\n```tsx\n<Datepicker validator={{ validator: (el: GdsDatepicker) => {\n    // Put your custom validation logic\n     if (el.value !== 'correctValue') {\n       // And return a validator array\n       return [\n               {\n                 badInput: true,\n                 customError: true,\n                 patternMismatch: true,\n                 rangeOverflow: true,\n                 rangeUnderflow: true,\n                 stepMismatch: true,\n                 tooLong: true,\n                 tooShort: true,\n                 typeMismatch: true,\n                 valid: false,\n                 valueMissing: true,\n               },\n               'My custom validation message',\n         ] : [ValidityState, string]\n}}} />\n\n\n```\n\nFor more information on validation in Green Core, see the [Form Validation](https://storybook.seb.io/latest/core/?path=/docs/docs-form-validation-documentation--docs) example.",...Validation.parameters?.docs?.description}}};const __namedExportsOrder=["Default","Validation"];try{Validation.displayName="Validation",Validation.__docgenInfo={description:"To handle validation of the `Datepicker`, you can pass a `validator` object to the `Datepicker` component. The `validator` object should have a `validate` function that takes the `Datepicker` element as an argument and returns an array of the validity state and an optional validation message.\n\n```tsx\n<Datepicker validator={{ validator: (el: GdsDatepicker) => {\n    // Put your custom validation logic\n     if (el.value !== 'correctValue') {\n       // And return a validator array\n       return [\n               {\n                 badInput: true,\n                 customError: true,\n                 patternMismatch: true,\n                 rangeOverflow: true,\n                 rangeUnderflow: true,\n                 stepMismatch: true,\n                 tooLong: true,\n                 tooShort: true,\n                 typeMismatch: true,\n                 valid: false,\n                 valueMissing: true,\n               },\n               'My custom validation message',\n         ] : [ValidityState, string]\n}}} />\n\n\n```\n\nFor more information on validation in Green Core, see the [Form Validation](https://storybook.seb.io/latest/core/?path=/docs/docs-form-validation-documentation--docs) example.",displayName:"Validation",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["libs/react/src/lib/datepicker/datepicker.stories.tsx#Validation"]={docgenInfo:Validation.__docgenInfo,name:"Validation",path:"libs/react/src/lib/datepicker/datepicker.stories.tsx#Validation"})}catch(__react_docgen_typescript_loader_error){}}}]);