{"version":3,"file":"src-lib-datepicker-datepicker-stories.5eba95c1.iframe.bundle.js","mappings":";;;;;;;;AA0CA;ACuCA;AAQA;;;;;;;;;;;;;;;;AC9BA;AA6IA;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AASA;AACA;AACA;;;AAGA;;;AAGA;;;AAKA;AACA;AACA;AACA;;;;;AAMA;AACA;AACA;AACA;AACA;;;;;;;AAQA;;;;;;;AC9MA;;;;;AA2NA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAIA;;;;AAOA;;AAEA;;;;;;;;;;;AAWA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;AAUA;AACA;;;;;AAKA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;;AAIA;;;AAOA;AACA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAOA;;AAKA;;AAEA;;;;AAIA;;AAKA;;;AAIA;AAyCA;AACA;;;;;;;;;;;ACzZA;;;AAsDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AC5GA;ADmHA;;AAGA;AAGA;;AAGA;;AAgBA;AAKA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;;AAGA;AAGA;AACA;;;AAIA;;;;;AASA","sources":["webpack://green/./dist/libs/core/src/chunks/chunk.3WL6NKTC.js","webpack://green/./dist/libs/core/src/chunks/chunk.6C4HADUM.js","webpack://green/./dist/libs/core/src/chunks/chunk.BBNIUYHO.js","webpack://green/./dist/libs/core/src/chunks/chunk.7VUVGYFN.js","webpack://green/./dist/libs/core/src/chunks/chunk.FUSSIV5A.js","webpack://green/./dist/libs/core/src/chunks/chunk.NNJ6DJO2.js"],"sourcesContent":["import {\n  ListboxKbNavController,\n  unwrap\n} from \"./chunk.2X23R32H.js\";\nimport {\n  TransitionalStyles\n} from \"./chunk.WFXDH5SJ.js\";\nimport {\n  GdsElement\n} from \"./chunk.ZQ4D5K7J.js\";\nimport {\n  watch\n} from \"./chunk.2WO4NHJ2.js\";\nimport {\n  gdsCustomElement,\n  html\n} from \"./chunk.VOYMQ322.js\";\nimport {\n  __decorateClass,\n  __privateAdd,\n  __privateGet\n} from \"./chunk.5VURDMKE.js\";\n\n// libs/core/src/primitives/listbox/listbox.ts\nimport { property } from \"lit/decorators.js\";\nimport { createRef, ref } from \"lit/directives/ref.js\";\n\n// libs/core/src/primitives/listbox/listbox.styles.ts\nimport { css } from \"lit\";\nvar style = css`\n  @layer base, reset, transitional-styles;\n  @layer base {\n    :host {\n      display: flex;\n      flex-direction: column;\n    }\n  }\n`;\nvar listbox_styles_default = style;\n\n// libs/core/src/primitives/listbox/listbox.ts\nvar _slotRef, _handleSelect;\nvar GdsListbox = class extends GdsElement {\n  constructor() {\n    super();\n    this.multiple = false;\n    this.compareWith = (a, b) => a === b;\n    __privateAdd(this, _slotRef, createRef());\n    __privateAdd(this, _handleSelect, (e) => {\n      const option = e.target;\n      if (this.multiple)\n        option.selected = !option.selected;\n      else {\n        option.selected = true;\n        Array.from(this.options).forEach((el) => {\n          if (el !== option)\n            el.selected = false;\n        });\n      }\n      ;\n      this.ariaActiveDescendantElement = option;\n      this.dispatchEvent(\n        new CustomEvent(\"change\", {\n          bubbles: false,\n          composed: false\n        })\n      );\n    });\n    new ListboxKbNavController(this);\n  }\n  get navigableItems() {\n    return this.visibleOptionElements;\n  }\n  /**\n   * Returns a list of all `gds-option` elements in the listbox.\n   */\n  get options() {\n    if (!__privateGet(this, _slotRef).value)\n      return [];\n    return unwrap(__privateGet(this, _slotRef).value).assignedElements().filter(\n      (o) => !o.hasAttribute(\"isplaceholder\") && o.gdsElementName === \"gds-option\"\n    ) || [];\n  }\n  /**\n   * Returns a list of all visible `gds-option` elements in the listbox.\n   */\n  get visibleOptionElements() {\n    return this.options.filter((el) => !el.hidden);\n  }\n  /**\n   * Returns a list of all visible `gds-option` elements in the listbox.\n   */\n  get visibleSelectedOptionElements() {\n    return this.options.filter((el) => el.selected && !el.hidden);\n  }\n  /**\n   * Returns a list of all selected `gds-option` elements in the listbox.\n   */\n  get selection() {\n    return this.options.filter((el) => el.selected);\n  }\n  set selection(values) {\n    this.options.forEach((el) => {\n      el.selected = values.some((v) => this.compareWith(v, el.value));\n    });\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    this.setAttribute(\"role\", \"listbox\");\n    TransitionalStyles.instance.apply(this, \"gds-listbox\");\n    this.addEventListener(\"gds-select\", __privateGet(this, _handleSelect));\n  }\n  /**\n   * Focuses the first selected option in the listbox.\n   * If no option is selected, the first visible option is focused.\n   */\n  focus() {\n    var _a;\n    ;\n    (_a = this.visibleSelectedOptionElements[0] || this.visibleOptionElements[0]) == null ? void 0 : _a.focus();\n  }\n  render() {\n    return html`<slot ${ref(__privateGet(this, _slotRef))}></slot>`;\n  }\n  _rerenderOptions() {\n    this.options.forEach((el) => {\n      el.requestUpdate();\n    });\n  }\n};\n_slotRef = new WeakMap();\n_handleSelect = new WeakMap();\nGdsListbox.styles = listbox_styles_default;\n__decorateClass([\n  property({\n    type: Boolean,\n    reflect: true,\n    attribute: \"aria-multiselectable\",\n    converter: {\n      fromAttribute: Boolean,\n      toAttribute: (value) => value.toString()\n    }\n  })\n], GdsListbox.prototype, \"multiple\", 2);\n__decorateClass([\n  property()\n], GdsListbox.prototype, \"compareWith\", 2);\n__decorateClass([\n  watch(\"multiple\")\n], GdsListbox.prototype, \"_rerenderOptions\", 1);\nGdsListbox = __decorateClass([\n  gdsCustomElement(\"gds-listbox\")\n], GdsListbox);\n\nexport {\n  GdsListbox\n};\n","import {\n  Focusable,\n  option_styles_default\n} from \"./chunk.2ND5EWHE.js\";\nimport {\n  TransitionalStyles\n} from \"./chunk.WFXDH5SJ.js\";\nimport {\n  GdsElement\n} from \"./chunk.ZQ4D5K7J.js\";\nimport {\n  watch\n} from \"./chunk.2WO4NHJ2.js\";\nimport {\n  gdsCustomElement\n} from \"./chunk.VOYMQ322.js\";\nimport {\n  __decorateClass,\n  __privateAdd,\n  __privateGet,\n  __privateMethod,\n  __privateSet\n} from \"./chunk.5VURDMKE.js\";\n\n// libs/core/src/primitives/listbox/option.ts\nimport { html } from \"lit\";\nimport { property } from \"lit/decorators.js\";\nimport { when } from \"lit/directives/when.js\";\nimport { classMap } from \"lit/directives/class-map.js\";\nvar _hidden, _emitSelect, emitSelect_fn;\nvar GdsOption = class extends Focusable(GdsElement) {\n  constructor() {\n    super();\n    __privateAdd(this, _emitSelect);\n    __privateAdd(this, _hidden, false);\n    this.selected = false;\n    this.isPlaceholder = false;\n    this.addEventListener(\"click\", __privateMethod(this, _emitSelect, emitSelect_fn));\n    this.addEventListener(\"keydown\", (e) => {\n      if (e.key !== \"Enter\" && e.key !== \" \")\n        return;\n      e.preventDefault();\n      __privateMethod(this, _emitSelect, emitSelect_fn).call(this, e);\n    });\n  }\n  get hidden() {\n    return __privateGet(this, _hidden);\n  }\n  set hidden(value) {\n    if (this.isPlaceholder)\n      return;\n    __privateSet(this, _hidden, value === \"true\" || value === true);\n    this.setAttribute(\"aria-hidden\", value.toString());\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    this.setAttribute(\"role\", \"option\");\n    if (this.isPlaceholder) {\n      __privateSet(this, _hidden, true);\n      this.setAttribute(\"aria-hidden\", \"true\");\n    }\n    this.updateComplete.then(\n      () => TransitionalStyles.instance.apply(this, \"gds-option\")\n    );\n  }\n  get parentElement() {\n    return super.parentElement;\n  }\n  _handlePlaceholderStatusChange() {\n    if (this.isPlaceholder) {\n      __privateSet(this, _hidden, true);\n      this.setAttribute(\"aria-hidden\", \"true\");\n    } else {\n      __privateSet(this, _hidden, false);\n      this.setAttribute(\"aria-hidden\", \"false\");\n    }\n  }\n  render() {\n    var _a;\n    const isMultiple = (_a = this.parentElement) == null ? void 0 : _a.multiple;\n    const checkbox = html` <span\n      class=\"checkbox ${classMap({ checked: this.selected })}\"\n    ></span>`;\n    if (!isMultiple) {\n      if (this.selected)\n        this.setAttribute(\"highlighted\", \"\");\n      else\n        this.removeAttribute(\"highlighted\");\n    }\n    return html`<div>${when(isMultiple, () => checkbox)} <slot></slot></div>`;\n  }\n};\n_hidden = new WeakMap();\n_emitSelect = new WeakSet();\nemitSelect_fn = function(e) {\n  e.stopPropagation();\n  this.dispatchEvent(\n    new CustomEvent(\"gds-select\", {\n      bubbles: true,\n      composed: true,\n      detail: {\n        value: this.value\n      }\n    })\n  );\n};\nGdsOption.styles = option_styles_default;\n__decorateClass([\n  property()\n], GdsOption.prototype, \"value\", 2);\n__decorateClass([\n  property({\n    attribute: \"aria-hidden\",\n    reflect: true\n  })\n], GdsOption.prototype, \"hidden\", 1);\n__decorateClass([\n  property({\n    attribute: \"aria-selected\",\n    reflect: true\n  })\n], GdsOption.prototype, \"selected\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], GdsOption.prototype, \"isPlaceholder\", 2);\n__decorateClass([\n  watch(\"isplaceholder\")\n], GdsOption.prototype, \"_handlePlaceholderStatusChange\", 1);\nGdsOption = __decorateClass([\n  gdsCustomElement(\"gds-option\")\n], GdsOption);\n\nexport {\n  GdsOption\n};\n","import {\n  GdsFormControlElement\n} from \"./chunk.MZSK66DN.js\";\nimport {\n  constrainSlots\n} from \"./chunk.KBYQYDL3.js\";\nimport {\n  TransitionalStyles\n} from \"./chunk.WFXDH5SJ.js\";\nimport {\n  observeLightDOM\n} from \"./chunk.WM7HBMMV.js\";\nimport {\n  watch\n} from \"./chunk.2WO4NHJ2.js\";\nimport {\n  gdsCustomElement,\n  getScopedTagName,\n  html\n} from \"./chunk.VOYMQ322.js\";\nimport {\n  __decorateClass,\n  __privateAdd,\n  __privateGet,\n  __privateMethod,\n  __privateSet\n} from \"./chunk.5VURDMKE.js\";\n\n// libs/core/src/components/dropdown/dropdown.ts\nimport { property, query, queryAsync } from \"lit/decorators.js\";\nimport { unsafeHTML } from \"lit/directives/unsafe-html.js\";\nimport { when } from \"lit/directives/when.js\";\nimport { ifDefined } from \"lit/directives/if-defined.js\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { msg, str, updateWhenLocaleChanges } from \"@lit/localize\";\n\n// libs/core/src/components/dropdown/dropdown.styles.ts\nimport { css } from \"lit\";\nvar style = css`\n  @layer base, reset, transitional-styles;\n\n  @layer base {\n    button {\n      appearance: none;\n      display: block;\n      background-color: black;\n      border-radius: 2rem;\n      border: none;\n      color: white;\n      padding: 0.7rem 2rem;\n      margin: 0.5rem 0;\n      box-sizing: border-box;\n    }\n  }\n`;\nvar dropdown_styles_default = style;\n\n// libs/core/src/components/dropdown/dropdown.ts\nvar _optionElements, _handleSearchFieldKeyUp, _handleSearchFieldKeyDown, _handleListboxKeyDown, _handleOptionFocusChange, _handleSelectionChange, handleSelectionChange_fn, _registerAutoCloseListener, registerAutoCloseListener_fn, _unregisterAutoCloseListener, unregisterAutoCloseListener_fn, _blurCloseListener, _tabCloseListener;\nvar GdsDropdown = class extends GdsFormControlElement {\n  constructor() {\n    super();\n    /**\n     * Selects an option in the dropdown.\n     *\n     * @fires change\n     */\n    __privateAdd(this, _handleSelectionChange);\n    __privateAdd(this, _registerAutoCloseListener);\n    __privateAdd(this, _unregisterAutoCloseListener);\n    this.label = \"\";\n    this.open = false;\n    this.searchable = false;\n    this.multiple = false;\n    this.compareWith = (a, b) => a === b;\n    this.searchFilter = (q, o) => o.innerHTML.toLowerCase().includes(q.toLowerCase());\n    this.syncPopoverWidth = false;\n    this.maxHeight = 500;\n    this.size = \"medium\";\n    this.hideLabel = false;\n    __privateAdd(this, _optionElements, void 0);\n    /**\n     * Event handler for filtering the options in the dropdown.\n     *\n     * @param e The keyboard event.\n     */\n    __privateAdd(this, _handleSearchFieldKeyUp, (e) => {\n      const input = this._elSearchInput;\n      const options = Array.from(__privateGet(this, _optionElements));\n      options.forEach((o) => o.hidden = false);\n      if (!input.value)\n        return;\n      const filteredOptions = options.filter(\n        (o) => !this.searchFilter(input.value, o)\n      );\n      filteredOptions.forEach((o) => o.hidden = true);\n    });\n    /**\n     * Check for ArrowDown or Tab in the search field.\n     * If found, focus should be moved to the listbox.\n     */\n    __privateAdd(this, _handleSearchFieldKeyDown, (e) => {\n      var _a;\n      (_a = this._elListbox) == null ? void 0 : _a.then((listbox) => {\n        if (e.key === \"ArrowDown\" || e.key === \"Tab\") {\n          e.preventDefault();\n          listbox.focus();\n          return;\n        }\n      });\n    });\n    /**\n     * Check for Tab in the listbox.\n     * If found, focus should be moved to the search field.\n     */\n    __privateAdd(this, _handleListboxKeyDown, (e) => {\n      var _a;\n      if (e.key === \"Tab\" && this.searchable) {\n        e.preventDefault();\n        (_a = this._elSearchInput) == null ? void 0 : _a.focus();\n        return;\n      }\n    });\n    __privateAdd(this, _handleOptionFocusChange, (e) => {\n      const triggerButton = this._elTriggerBtn;\n      if (triggerButton)\n        triggerButton.ariaActiveDescendantElement = e.target;\n    });\n    /**\n     * A listener to close the dropdown when any other element is focused.\n     */\n    __privateAdd(this, _blurCloseListener, (e) => {\n      const isFocusOutside = e instanceof FocusEvent && e.relatedTarget && !this.contains(e.relatedTarget);\n      if (isFocusOutside)\n        this.open = false;\n    });\n    __privateAdd(this, _tabCloseListener, (e) => {\n      var _a;\n      if (e.key === \"Tab\" && !this.searchable) {\n        e.preventDefault();\n        this.open = false;\n        (_a = this._elTriggerBtn) == null ? void 0 : _a.focus();\n      }\n    });\n    constrainSlots(this);\n    updateWhenLocaleChanges(this);\n    __privateSet(this, _optionElements, this.getElementsByTagName(\n      getScopedTagName(\"gds-option\")\n    ));\n  }\n  get type() {\n    return \"gds-dropdown\";\n  }\n  /**\n   * Get the options of the dropdown.\n   */\n  get options() {\n    return Array.from(__privateGet(this, _optionElements)).filter(\n      (o) => !o.hasAttribute(\"isplaceholder\")\n    );\n  }\n  /**\n   * Return the first option with a isPlaceholder attribute.\n   * If no placeholder is found, this will be undefined.\n   */\n  get placeholder() {\n    return Array.from(__privateGet(this, _optionElements)).find(\n      (o) => o.hasAttribute(\"isplaceholder\")\n    );\n  }\n  /**\n   * Returns the display value as a string.\n   * If the dropdown is in multiple mode, this will be a comma separated list of the selected values.\n   */\n  get displayValue() {\n    var _a, _b;\n    let displayValue;\n    if (Array.isArray(this.value)) {\n      this.value.length > 2 ? displayValue = msg(str`${this.value.length} selected`) : displayValue = this.value.reduce(\n        (acc, cur) => {\n          var _a2;\n          return acc + ((_a2 = this.options.find((v) => v.value === cur)) == null ? void 0 : _a2.innerHTML) + \", \";\n        },\n        \"\"\n      ).slice(0, -2);\n    } else {\n      displayValue = (_a = this.options.find((v) => v.selected)) == null ? void 0 : _a.innerHTML;\n    }\n    return displayValue || ((_b = this.placeholder) == null ? void 0 : _b.innerHTML) || \"\";\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    TransitionalStyles.instance.apply(this, \"gds-dropdown\");\n    this.updateComplete.then(() => {\n      this._handleLightDOMChange();\n      this._handleValueChange();\n    });\n  }\n  render() {\n    return html`\n      ${when(\n      this.label && !this.hideLabel,\n      () => html`<label for=\"trigger\">${this.label}</label>`\n    )}\n\n      <span class=\"form-info\"><slot name=\"sub-label\"></slot></span>\n\n      <gds-popover\n        .label=${this.label}\n        .open=${this.open}\n        .calcMaxWidth=${(trigger) => this.syncPopoverWidth ? `${trigger.offsetWidth}px` : `auto`}\n        .calcMaxHeight=${(_trigger) => `${this.maxHeight}px`}\n        .useModalInMobileView=${true}\n        @gds-ui-state=${(e) => this.open = e.detail.open}\n      >\n        <button\n          id=\"trigger\"\n          slot=\"trigger\"\n          aria-haspopup=\"listbox\"\n          role=\"combobox\"\n          aria-owns=\"listbox\"\n          aria-controls=\"listbox\"\n          aria-expanded=\"${this.open}\"\n          aria-label=\"${this.label}\"\n          class=${classMap({ small: this.size === \"small\" })}\n        >\n          <slot name=\"trigger\">\n            <span>${unsafeHTML(this.displayValue)}</span>\n          </slot>\n        </button>\n        ${when(\n      this.searchable,\n      () => html`<input\n              id=\"searchinput\"\n              type=\"text\"\n              aria-label=\"${msg(\"Filter available options\")}\"\n              placeholder=\"${msg(\"Search\")}\"\n              @keydown=${__privateGet(this, _handleSearchFieldKeyDown)}\n              @keyup=${__privateGet(this, _handleSearchFieldKeyUp)}\n            />`\n    )}\n\n        <gds-listbox\n          id=\"listbox\"\n          .multiple=\"${ifDefined(this.multiple)}\"\n          .compareWith=\"${this.compareWith}\"\n          @change=\"${__privateMethod(this, _handleSelectionChange, handleSelectionChange_fn)}\"\n          @gds-focus=\"${__privateGet(this, _handleOptionFocusChange)}\"\n          @keydown=${__privateGet(this, _handleListboxKeyDown)}\n        >\n          <slot gds-allow=\"gds-option gds-menu-heading\"></slot>\n        </gds-listbox>\n      </gds-popover>\n\n      <span class=\"form-info\"><slot name=\"message\"></slot></span>\n    `;\n  }\n  _handleLightDOMChange() {\n    var _a, _b;\n    this.requestUpdate();\n    if (this.multiple) {\n      this._handleValueChange();\n      return;\n    }\n    if (this.value === void 0) {\n      if (this.placeholder)\n        this.value = this.placeholder.value;\n      else\n        this.value = (_a = this.options[0]) == null ? void 0 : _a.value;\n    } else if (!this.placeholder && this.options.find(\n      (o) => this.compareWith(o.value, this.value)\n    ) === void 0) {\n      this.options[0] && (this.options[0].selected = true);\n      this.value = (_b = this.options[0]) == null ? void 0 : _b.value;\n    }\n  }\n  _handleValueChange() {\n    this._elListbox.then((listbox) => {\n      if (listbox) {\n        if (Array.isArray(this.value))\n          listbox.selection = this.value;\n        else\n          listbox.selection = [this.value];\n      }\n    });\n  }\n  _onOpenChange() {\n    const open = this.open;\n    Array.from(__privateGet(this, _optionElements)).forEach((o) => o.hidden = !open);\n    if (open)\n      __privateMethod(this, _registerAutoCloseListener, registerAutoCloseListener_fn).call(this);\n    else {\n      __privateMethod(this, _unregisterAutoCloseListener, unregisterAutoCloseListener_fn).call(this);\n      this._elSearchInput && (this._elSearchInput.value = \"\");\n    }\n    this.dispatchEvent(\n      new CustomEvent(\"gds-ui-state\", {\n        detail: { open },\n        bubbles: true,\n        composed: true\n      })\n    );\n  }\n};\n_optionElements = new WeakMap();\n_handleSearchFieldKeyUp = new WeakMap();\n_handleSearchFieldKeyDown = new WeakMap();\n_handleListboxKeyDown = new WeakMap();\n_handleOptionFocusChange = new WeakMap();\n_handleSelectionChange = new WeakSet();\nhandleSelectionChange_fn = function() {\n  this._elListbox.then((listbox) => {\n    var _a;\n    if (this.multiple)\n      this.value = listbox.selection.map((s) => s.value);\n    else {\n      this.value = (_a = listbox.selection[0]) == null ? void 0 : _a.value;\n      this.open = false;\n      setTimeout(() => {\n        var _a2;\n        return (_a2 = this._elTriggerBtn) == null ? void 0 : _a2.focus();\n      }, 0);\n    }\n    this.dispatchEvent(\n      new CustomEvent(\"change\", {\n        detail: { value: this.value },\n        bubbles: true,\n        composed: true\n      })\n    );\n  });\n};\n_registerAutoCloseListener = new WeakSet();\nregisterAutoCloseListener_fn = function() {\n  this.addEventListener(\"blur\", __privateGet(this, _blurCloseListener));\n  this.addEventListener(\"gds-blur\", __privateGet(this, _blurCloseListener));\n  this.addEventListener(\"keydown\", __privateGet(this, _tabCloseListener));\n};\n_unregisterAutoCloseListener = new WeakSet();\nunregisterAutoCloseListener_fn = function() {\n  this.removeEventListener(\"blur\", __privateGet(this, _blurCloseListener));\n  this.removeEventListener(\"gds-blur\", __privateGet(this, _blurCloseListener));\n  this.removeEventListener(\"keydown\", __privateGet(this, _tabCloseListener));\n};\n_blurCloseListener = new WeakMap();\n_tabCloseListener = new WeakMap();\nGdsDropdown.styles = dropdown_styles_default;\nGdsDropdown.shadowRootOptions = {\n  mode: \"open\",\n  delegatesFocus: true\n};\n__decorateClass([\n  property()\n], GdsDropdown.prototype, \"label\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], GdsDropdown.prototype, \"open\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], GdsDropdown.prototype, \"searchable\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], GdsDropdown.prototype, \"multiple\", 2);\n__decorateClass([\n  property()\n], GdsDropdown.prototype, \"compareWith\", 2);\n__decorateClass([\n  property()\n], GdsDropdown.prototype, \"searchFilter\", 2);\n__decorateClass([\n  property({ type: Boolean, attribute: \"sync-popover-width\" })\n], GdsDropdown.prototype, \"syncPopoverWidth\", 2);\n__decorateClass([\n  property({ type: Number, attribute: \"max-height\" })\n], GdsDropdown.prototype, \"maxHeight\", 2);\n__decorateClass([\n  property()\n], GdsDropdown.prototype, \"size\", 2);\n__decorateClass([\n  property({ type: Boolean, attribute: \"hide-label\" })\n], GdsDropdown.prototype, \"hideLabel\", 2);\n__decorateClass([\n  query(\"#trigger\")\n], GdsDropdown.prototype, \"_elTriggerBtn\", 2);\n__decorateClass([\n  queryAsync(\"#listbox\")\n], GdsDropdown.prototype, \"_elListbox\", 2);\n__decorateClass([\n  query(\"#searchinput\")\n], GdsDropdown.prototype, \"_elSearchInput\", 2);\n__decorateClass([\n  observeLightDOM({\n    attributes: true,\n    childList: true,\n    subtree: true,\n    characterData: true\n  })\n], GdsDropdown.prototype, \"_handleLightDOMChange\", 1);\n__decorateClass([\n  watch(\"value\")\n], GdsDropdown.prototype, \"_handleValueChange\", 1);\n__decorateClass([\n  watch(\"open\")\n], GdsDropdown.prototype, \"_onOpenChange\", 1);\nGdsDropdown = __decorateClass([\n  gdsCustomElement(\"gds-dropdown\")\n], GdsDropdown);\n\nexport {\n  GdsDropdown\n};\n","import {\n  dateArrayConverter,\n  dateConverter\n} from \"./chunk.C3ECHGX7.js\";\nimport {\n  GdsFormControlElement\n} from \"./chunk.MZSK66DN.js\";\nimport {\n  TransitionalStyles\n} from \"./chunk.WFXDH5SJ.js\";\nimport {\n  watch\n} from \"./chunk.2WO4NHJ2.js\";\nimport {\n  gdsCustomElement,\n  html\n} from \"./chunk.VOYMQ322.js\";\nimport {\n  __decorateClass,\n  __privateAdd,\n  __privateGet,\n  __privateMethod,\n  __privateSet\n} from \"./chunk.5VURDMKE.js\";\n\n// libs/core/src/components/datepicker/datepicker.ts\nimport { property, query, queryAll, queryAsync, state } from \"lit/decorators.js\";\nimport { join } from \"lit/directives/join.js\";\nimport { when } from \"lit/directives/when.js\";\nimport { until } from \"lit/directives/until.js\";\nimport { map } from \"lit/directives/map.js\";\nimport { repeat } from \"lit/directives/repeat.js\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { nothing } from \"lit\";\nimport { msg } from \"@lit/localize\";\nimport { isSameDay } from \"date-fns\";\n\n// libs/core/src/components/datepicker/datepicker.styles.ts\nimport { css } from \"lit\";\nvar styles = css`\n  @layer base, reset, transitional-styles;\n  @layer base {\n    label {\n      display: block;\n    }\n  }\n`;\n\n// libs/core/src/components/datepicker/datepicker.ts\nvar _valueOnOpen, _renderBackToValidRangeButton, renderBackToValidRangeButton_fn, _focusDate, focusDate_fn, _getSpinnerLabel, getSpinnerLabel_fn, _getMinSpinnerValue, getMinSpinnerValue_fn, _getMaxSpinnerValue, getMaxSpinnerValue_fn, _dispatchChangeEvent, dispatchChangeEvent_fn, _dispatchInputEvent, dispatchInputEvent_fn, _handleFieldFocusOut, _handleSpinnerFocus, _handleClipboardCopy, _handleClipboardPaste, _handleFieldClick, _handleCalendarChange, _handleMonthChange, _handleYearChange, _handleIncrementFocusedMonth, _handleDecrementFocusedMonth, _handleCalendarFocusChange, _handlePopoverStateChange, _handleSpinnerKeydown, _parseDateFormat, parseDateFormat_fn, _handleSpinnerChange, _spinnerState, _years, years_get, _isValueOutsideRange, isValueOutsideRange_get;\nvar GdsDatepicker = class extends GdsFormControlElement {\n  constructor() {\n    super(...arguments);\n    __privateAdd(this, _renderBackToValidRangeButton);\n    __privateAdd(this, _focusDate);\n    __privateAdd(this, _getSpinnerLabel);\n    __privateAdd(this, _getMinSpinnerValue);\n    __privateAdd(this, _getMaxSpinnerValue);\n    __privateAdd(this, _dispatchChangeEvent);\n    __privateAdd(this, _dispatchInputEvent);\n    /**\n     * Takes a dateformat string from the dateformat attribute and turnes it to a DateFormatLayout object used in rendering the template.\n     */\n    __privateAdd(this, _parseDateFormat);\n    /**\n     * Returns a year iterator between the min and max dates for use in the year dropdown.\n     */\n    __privateAdd(this, _years);\n    __privateAdd(this, _isValueOutsideRange);\n    this.min = new Date((/* @__PURE__ */ new Date()).getFullYear() - 10, 0, 1);\n    this.max = new Date((/* @__PURE__ */ new Date()).getFullYear() + 10, 0, 1);\n    this.open = false;\n    this.label = \"\";\n    this.showWeekNumbers = false;\n    this.size = \"medium\";\n    this.hideLabel = false;\n    this.disabledWeekends = false;\n    this._focusedMonth = (/* @__PURE__ */ new Date()).getMonth();\n    this._focusedYear = (/* @__PURE__ */ new Date()).getFullYear();\n    this._dateFormatLayout = __privateMethod(this, _parseDateFormat, parseDateFormat_fn).call(this, \"y-m-d\");\n    __privateAdd(this, _valueOnOpen, void 0);\n    __privateAdd(this, _handleFieldFocusOut, (e) => {\n      this._elTrigger.then((_) => {\n        var _a, _b;\n        const parent = (_a = e.relatedTarget) == null ? void 0 : _a.parentElement;\n        if (parent === e.target)\n          return;\n        (_b = document.getSelection()) == null ? void 0 : _b.removeAllRanges();\n      });\n    });\n    __privateAdd(this, _handleSpinnerFocus, (e) => {\n      this._elTrigger.then((field) => {\n        var _a, _b;\n        (_a = document.getSelection()) == null ? void 0 : _a.removeAllRanges();\n        const range = new Range();\n        range.setStart(field.firstChild, 0);\n        range.setEnd(field.lastChild, 4);\n        (_b = document.getSelection()) == null ? void 0 : _b.addRange(range);\n      });\n    });\n    __privateAdd(this, _handleClipboardCopy, (e) => {\n      this._elField.then((field) => {\n        var _a;\n        if (e.currentTarget !== field)\n          return;\n        e.preventDefault();\n        (_a = e.clipboardData) == null ? void 0 : _a.setData(\"text/plain\", this.displayValue);\n      });\n    });\n    __privateAdd(this, _handleClipboardPaste, (e) => {\n      this._elField.then((field) => {\n        var _a;\n        if (e.currentTarget !== field)\n          return;\n        e.preventDefault();\n        const pasted = (_a = e.clipboardData) == null ? void 0 : _a.getData(\"text/plain\");\n        if (!pasted)\n          return;\n        const pastedDate = new Date(pasted);\n        if (pastedDate.toString() === \"Invalid Date\")\n          return;\n        this.value = pastedDate;\n        __privateMethod(this, _dispatchChangeEvent, dispatchChangeEvent_fn).call(this);\n      });\n    });\n    __privateAdd(this, _handleFieldClick, (e) => {\n      var _a;\n      (_a = this._elSpinners[0]) == null ? void 0 : _a.focus();\n    });\n    __privateAdd(this, _handleCalendarChange, (e) => {\n      e.stopPropagation();\n      this.value = e.detail;\n      this.open = false;\n      __privateMethod(this, _dispatchChangeEvent, dispatchChangeEvent_fn).call(this);\n    });\n    __privateAdd(this, _handleMonthChange, (e) => {\n      var _a;\n      e.stopPropagation();\n      this._focusedMonth = (_a = e.target) == null ? void 0 : _a.value;\n    });\n    __privateAdd(this, _handleYearChange, (e) => {\n      var _a;\n      e.stopPropagation();\n      this._focusedYear = (_a = e.target) == null ? void 0 : _a.value;\n    });\n    __privateAdd(this, _handleIncrementFocusedMonth, (_e) => {\n      this._focusedMonth++;\n      if (this._focusedMonth > 11) {\n        this._focusedMonth = 0;\n        this._focusedYear++;\n      }\n    });\n    __privateAdd(this, _handleDecrementFocusedMonth, (_e) => {\n      this._focusedMonth--;\n      if (this._focusedMonth < 0) {\n        this._focusedMonth = 11;\n        this._focusedYear--;\n      }\n    });\n    __privateAdd(this, _handleCalendarFocusChange, async () => {\n      this._focusedMonth = (await this._elCalendar).focusedMonth;\n      this._focusedYear = (await this._elCalendar).focusedYear;\n      this.value = (await this._elCalendar).focusedDate;\n      this.requestUpdate();\n      __privateMethod(this, _dispatchInputEvent, dispatchInputEvent_fn).call(this);\n    });\n    __privateAdd(this, _handlePopoverStateChange, async (e) => {\n      if (e.target !== e.currentTarget)\n        return;\n      this.open = e.detail.open;\n      if (e.detail.reason === \"close\") {\n        const calValue = (await this._elCalendar).value;\n        const hasChanged = !isSameDay(\n          calValue || /* @__PURE__ */ new Date(0),\n          __privateGet(this, _valueOnOpen) || /* @__PURE__ */ new Date(0)\n        );\n        if (hasChanged) {\n          this.value = calValue;\n          __privateMethod(this, _dispatchChangeEvent, dispatchChangeEvent_fn).call(this);\n        }\n        if (this.value) {\n          this._focusedMonth = this.value.getMonth();\n          this._focusedYear = this.value.getFullYear();\n        }\n      }\n      if (e.detail.reason === \"cancel\") {\n        this.value = __privateGet(this, _valueOnOpen);\n      }\n    });\n    __privateAdd(this, _handleSpinnerKeydown, (e) => {\n      const index = Array.from(this._elSpinners).findIndex(\n        (spinner) => spinner === e.target\n      );\n      if (e.key === \"ArrowRight\") {\n        const next = this._elSpinners[index + 1];\n        if (next)\n          next.focus();\n      }\n      if (e.key === \"ArrowLeft\") {\n        const prev = this._elSpinners[index - 1];\n        if (prev)\n          prev.focus();\n      }\n    });\n    __privateAdd(this, _handleSpinnerChange, (val, name) => {\n      __privateGet(this, _spinnerState)[name] = val;\n      const newDate = /* @__PURE__ */ new Date();\n      newDate.setFullYear(parseInt(__privateGet(this, _spinnerState).year));\n      newDate.setMonth(parseInt(__privateGet(this, _spinnerState).month) - 1);\n      newDate.setDate(parseInt(__privateGet(this, _spinnerState).day));\n      if (newDate.toString() === \"Invalid Date\")\n        return;\n      this.value = newDate;\n      __privateMethod(this, _dispatchChangeEvent, dispatchChangeEvent_fn).call(this);\n    });\n    /**\n     * The spinner state keeps track of the spinner values regardless of wheter a complete date has been enter yet.\n     */\n    __privateAdd(this, _spinnerState, {\n      year: \"yyyy\",\n      month: \"mm\",\n      day: \"dd\"\n    });\n  }\n  get type() {\n    return \"gds-datepicker\";\n  }\n  get dateformat() {\n    return this._dateFormatLayout.layout.map((f) => f.token).join(this._dateFormatLayout.delimiter);\n  }\n  set dateformat(dateformat) {\n    this._dateFormatLayout = __privateMethod(this, _parseDateFormat, parseDateFormat_fn).call(this, dateformat);\n  }\n  /**\n   * Get the currently focused date in the calendar popover. If no date is focused, or the calendar popover\n   * is closed, the value will be undefined.\n   */\n  async getFocusedDate() {\n    if (this.open)\n      return this._elCalendar.then((el) => el.focusedDate);\n    else\n      return void 0;\n  }\n  /**\n   * Get a string representation of the currently displayed value in the input field. The formatting will match the dateformat attribute.\n   */\n  get displayValue() {\n    return this._elInput.innerText.replace(/\\s+/g, \"\");\n  }\n  /**\n   * A reference to a date cell element (<td>) inside the shadow root of the calendar primitive.\n   * Inteded for use in integration tests.\n   */\n  async test_getDateCell(dayNumber) {\n    return this._elCalendar.then((el) => el.getDateCell(dayNumber));\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    TransitionalStyles.instance.apply(this, \"gds-datepicker\");\n  }\n  render() {\n    return html`${when(\n      this.label && !this.hideLabel,\n      () => html`<label for=\"spinner-0\" id=\"label\">${this.label}</label>`\n    )}\n\n      <div class=\"form-info\"><slot name=\"sub-label\"></slot></div>\n\n      <div\n        class=${classMap({ field: true, small: this.size === \"small\" })}\n        id=\"field\"\n        @click=${__privateGet(this, _handleFieldClick)}\n        @copy=${__privateGet(this, _handleClipboardCopy)}\n        @paste=${__privateGet(this, _handleClipboardPaste)}\n      >\n        <div\n          class=${classMap({ input: true, \"is-placeholder\": !this.value })}\n          @focusout=${__privateGet(this, _handleFieldFocusOut)}\n        >\n          ${join(\n      map(\n        this._dateFormatLayout.layout,\n        (f, i) => html`<gds-date-part-spinner\n                  id=\"spinner-${i}\"\n                  .length=${f.token === \"y\" ? 4 : 2}\n                  .value=${__privateGet(this, _spinnerState)[f.name]}\n                  aria-valuemin=${__privateMethod(this, _getMinSpinnerValue, getMinSpinnerValue_fn).call(this, f.name)}\n                  aria-valuemax=${__privateMethod(this, _getMaxSpinnerValue, getMaxSpinnerValue_fn).call(this, f.name)}\n                  aria-label=${__privateMethod(this, _getSpinnerLabel, getSpinnerLabel_fn).call(this, f.name)}\n                  aria-describedby=\"label\"\n                  @keydown=${__privateGet(this, _handleSpinnerKeydown)}\n                  @change=${(e) => __privateGet(this, _handleSpinnerChange).call(this, e.detail.value, f.name)}\n                  @focus=${__privateGet(this, _handleSpinnerFocus)}\n                  @touchend=${(e) => {\n          this.open = true;\n          e.preventDefault();\n        }}\n                ></gds-date-part-spinner>`\n      ),\n      html`<span>${this._dateFormatLayout.delimiter}</span>`\n    )}\n        </div>\n        <button\n          id=\"calendar-button\"\n          aria-label=\"${msg(\"Open calendar modal\")}\"\n          aria-haspopup=\"menu\"\n          aria-expanded=${this.open}\n          aria-controls=\"calendar-popover\"\n          aria-describedby=\"label\"\n        >\n          <gds-icon-calendar></gds-icon-calendar>\n        </button>\n      </div>\n\n      <div class=\"form-info\"><slot name=\"message\"></slot></div>\n\n      <gds-popover\n        .triggerRef=${this._elTrigger}\n        .anchorRef=${this._elField}\n        .open=${this.open}\n        @gds-ui-state=${__privateGet(this, _handlePopoverStateChange)}\n        label=${this.label}\n        id=\"calendar-popover\"\n        .placement=${\"bottom-end\"}\n        .calcMinWidth=${() => this.showWeekNumbers ? \"350px\" : \"305px\"}\n        .useModalInMobileView=${true}\n        @focusin=${async (e) => {\n      var _a;\n      const isPopover = ((_a = e.target) == null ? void 0 : _a.id) === \"calendar-popover\";\n      if (!isPopover)\n        return;\n      this._elCalendar.then((cal) => cal.focus());\n    }}\n      >\n        <div class=\"header\">\n          <button\n            @click=${__privateGet(this, _handleDecrementFocusedMonth)}\n            aria-label=${msg(\"Previous month\")}\n          >\n            <gds-icon-chevron-left></gds-icon-chevron-left>\n          </button>\n          <gds-dropdown\n            .value=${this._focusedMonth.toString()}\n            @change=${__privateGet(this, _handleMonthChange)}\n            .maxHeight=${300}\n            label=\"${msg(\"Month\")}\"\n            style=\"width:120px\"\n            size=\"small\"\n            hide-label\n          >\n            <gds-option value=\"0\">${msg(\"January\")}</gds-option>\n            <gds-option value=\"1\">${msg(\"February\")}</gds-option>\n            <gds-option value=\"2\">${msg(\"March\")}</gds-option>\n            <gds-option value=\"3\">${msg(\"April\")}</gds-option>\n            <gds-option value=\"4\">${msg(\"May\")}</gds-option>\n            <gds-option value=\"5\">${msg(\"June\")}</gds-option>\n            <gds-option value=\"6\">${msg(\"July\")}</gds-option>\n            <gds-option value=\"7\">${msg(\"August\")}</gds-option>\n            <gds-option value=\"8\">${msg(\"September\")}</gds-option>\n            <gds-option value=\"9\">${msg(\"October\")}</gds-option>\n            <gds-option value=\"10\">${msg(\"November\")}</gds-option>\n            <gds-option value=\"11\">${msg(\"December\")}</gds-option>\n          </gds-dropdown>\n          <gds-dropdown\n            .value=${this._focusedYear.toString()}\n            @change=${__privateGet(this, _handleYearChange)}\n            .maxHeight=${300}\n            label=\"${msg(\"Year\")}\"\n            size=\"small\"\n            hide-label\n          >\n            ${repeat(\n      __privateGet(this, _years, years_get),\n      (year) => year,\n      (year) => html`<gds-option value=${year}>${year}</gds-option>`\n    )}\n          </gds-dropdown>\n          <button\n            @click=${__privateGet(this, _handleIncrementFocusedMonth)}\n            aria-label=${msg(\"Next month\")}\n          >\n            <gds-icon-chevron-right></gds-icon-chevron-right>\n          </button>\n        </div>\n\n        <gds-calendar\n          id=\"calendar\"\n          @change=${__privateGet(this, _handleCalendarChange)}\n          @gds-date-focused=${__privateGet(this, _handleCalendarFocusChange)}\n          .focusedMonth=${this._focusedMonth}\n          .focusedYear=${this._focusedYear}\n          .value=${this.value}\n          .min=${this.min}\n          .max=${this.max}\n          .showWeekNumbers=${this.showWeekNumbers}\n          .disabledWeekends=${this.disabledWeekends}\n          .disabledDates=${this.disabledDates}\n        ></gds-calendar>\n\n        <div class=\"footer\">\n          <gds-button\n            rank=\"tertiary\"\n            size=\"small\"\n            @click=${() => {\n      this.value = void 0;\n      __privateMethod(this, _dispatchChangeEvent, dispatchChangeEvent_fn).call(this);\n    }}\n          >\n            ${msg(\"Clear\")}\n          </gds-button>\n          ${until(__privateMethod(this, _renderBackToValidRangeButton, renderBackToValidRangeButton_fn).call(this), nothing)}\n          <gds-button\n            rank=\"tertiary\"\n            size=\"small\"\n            @click=${() => {\n      this.value = /* @__PURE__ */ new Date();\n      __privateMethod(this, _dispatchChangeEvent, dispatchChangeEvent_fn).call(this);\n    }}\n          >\n            ${msg(\"Today\")}\n          </gds-button>\n        </div>\n      </gds-popover> `;\n  }\n  _handleValueChange() {\n    if (!this.value) {\n      __privateSet(this, _spinnerState, {\n        year: \"yyyy\",\n        month: \"mm\",\n        day: \"dd\"\n      });\n      return;\n    }\n    const date = this.value;\n    this._focusedMonth = date.getMonth();\n    this._focusedYear = date.getFullYear();\n    const year = date.getFullYear().toString();\n    const month = (date.getMonth() + 1).toString().padStart(2, \"0\");\n    const day = date.getDate().toString().padStart(2, \"0\");\n    __privateSet(this, _spinnerState, { year, month, day });\n  }\n  _handleOpenChange() {\n    if (this.open) {\n      __privateSet(this, _valueOnOpen, this.value);\n      this._elCalendar.then((el) => el.focus());\n    }\n  }\n};\n_valueOnOpen = new WeakMap();\n_renderBackToValidRangeButton = new WeakSet();\nrenderBackToValidRangeButton_fn = async function() {\n  const focusedDate = await this.getFocusedDate();\n  let buttonTxt = \"\";\n  let buttonAction;\n  if (focusedDate && focusedDate > this.max) {\n    buttonTxt = msg(\"Last available date\");\n    buttonAction = () => __privateMethod(this, _focusDate, focusDate_fn).call(this, this.max);\n  } else if (focusedDate && focusedDate < this.min) {\n    buttonTxt = msg(\"First available date\");\n    buttonAction = () => __privateMethod(this, _focusDate, focusDate_fn).call(this, this.min);\n  }\n  return html`${when(\n    buttonTxt.length > 0,\n    () => html`<gds-button rank=\"tertiary\" size=\"small\" @click=${buttonAction}>\n          ${buttonTxt}\n        </gds-button>`,\n    () => nothing\n  )}`;\n};\n_focusDate = new WeakSet();\nfocusDate_fn = function(d) {\n  const firstValidDate = new Date(d);\n  this._elCalendar.then((el) => el.focusedDate = firstValidDate).then(__privateGet(this, _handleCalendarFocusChange));\n};\n_getSpinnerLabel = new WeakSet();\ngetSpinnerLabel_fn = function(name) {\n  const labels = {\n    year: msg(\"Year\"),\n    month: msg(\"Month\"),\n    day: msg(\"Day\")\n  };\n  return labels[name];\n};\n_getMinSpinnerValue = new WeakSet();\ngetMinSpinnerValue_fn = function(name) {\n  const min = {\n    year: 1900,\n    month: 1,\n    day: 1\n  };\n  return min[name];\n};\n_getMaxSpinnerValue = new WeakSet();\ngetMaxSpinnerValue_fn = function(name) {\n  const max = {\n    year: 9999,\n    month: 12,\n    day: 31\n  };\n  return max[name];\n};\n_dispatchChangeEvent = new WeakSet();\ndispatchChangeEvent_fn = function() {\n  this.dispatchEvent(\n    new CustomEvent(\"change\", {\n      detail: { value: this.value }\n    })\n  );\n};\n_dispatchInputEvent = new WeakSet();\ndispatchInputEvent_fn = function() {\n  this.dispatchEvent(\n    new CustomEvent(\"input\", {\n      detail: { value: this.value }\n    })\n  );\n};\n_handleFieldFocusOut = new WeakMap();\n_handleSpinnerFocus = new WeakMap();\n_handleClipboardCopy = new WeakMap();\n_handleClipboardPaste = new WeakMap();\n_handleFieldClick = new WeakMap();\n_handleCalendarChange = new WeakMap();\n_handleMonthChange = new WeakMap();\n_handleYearChange = new WeakMap();\n_handleIncrementFocusedMonth = new WeakMap();\n_handleDecrementFocusedMonth = new WeakMap();\n_handleCalendarFocusChange = new WeakMap();\n_handlePopoverStateChange = new WeakMap();\n_handleSpinnerKeydown = new WeakMap();\n_parseDateFormat = new WeakSet();\nparseDateFormat_fn = function(dateformat) {\n  const delimiter = dateformat.replace(/[a-z0-9]/gi, \"\")[0];\n  const format = dateformat.split(delimiter);\n  const year = format.findIndex((f) => f === \"y\");\n  const month = format.findIndex((f) => f === \"m\");\n  const day = format.findIndex((f) => f === \"d\");\n  if (year === -1 || month === -1 || day === -1)\n    throw new Error(\"Invalid date format for <gds-datepicker>\");\n  const ordered = [year, month, day].sort((a, b) => a - b);\n  const orderedFormat = ordered.map((i) => format[i]).map((f) => ({\n    token: f,\n    name: f === \"y\" ? \"year\" : f === \"m\" ? \"month\" : \"day\"\n  }));\n  return { delimiter, layout: orderedFormat };\n};\n_handleSpinnerChange = new WeakMap();\n_spinnerState = new WeakMap();\n_years = new WeakSet();\nyears_get = function() {\n  var _a;\n  const minYear = this.min.getFullYear();\n  const maxYear = this.max.getFullYear();\n  const isOutsideRange = __privateGet(this, _isValueOutsideRange, isValueOutsideRange_get);\n  const valueYear = (_a = this.value) == null ? void 0 : _a.getFullYear();\n  return {\n    *[Symbol.iterator]() {\n      if (isOutsideRange)\n        yield valueYear;\n      for (let i = minYear; i <= maxYear; i++)\n        yield i;\n    }\n  };\n};\n_isValueOutsideRange = new WeakSet();\nisValueOutsideRange_get = function() {\n  if (!this.value)\n    return false;\n  return this.value.getFullYear() < this.min.getFullYear() || this.value.getFullYear() > this.max.getFullYear();\n};\nGdsDatepicker.styles = [styles];\nGdsDatepicker.shadowRootOptions = {\n  mode: \"open\",\n  delegatesFocus: true\n};\n__decorateClass([\n  property({ converter: dateConverter })\n], GdsDatepicker.prototype, \"value\", 2);\n__decorateClass([\n  property({ converter: dateConverter })\n], GdsDatepicker.prototype, \"min\", 2);\n__decorateClass([\n  property({ converter: dateConverter })\n], GdsDatepicker.prototype, \"max\", 2);\n__decorateClass([\n  property({ type: Boolean })\n], GdsDatepicker.prototype, \"open\", 2);\n__decorateClass([\n  property()\n], GdsDatepicker.prototype, \"label\", 2);\n__decorateClass([\n  property({ type: Boolean, attribute: \"show-week-numbers\" })\n], GdsDatepicker.prototype, \"showWeekNumbers\", 2);\n__decorateClass([\n  property()\n], GdsDatepicker.prototype, \"size\", 2);\n__decorateClass([\n  property({ type: Boolean, attribute: \"hide-label\" })\n], GdsDatepicker.prototype, \"hideLabel\", 2);\n__decorateClass([\n  property()\n], GdsDatepicker.prototype, \"dateformat\", 1);\n__decorateClass([\n  property({ type: Boolean, attribute: \"disabled-weekends\" })\n], GdsDatepicker.prototype, \"disabledWeekends\", 2);\n__decorateClass([\n  property({ converter: dateArrayConverter, attribute: \"disabled-dates\" })\n], GdsDatepicker.prototype, \"disabledDates\", 2);\n__decorateClass([\n  queryAsync(\"#calendar-button\")\n], GdsDatepicker.prototype, \"test_calendarButton\", 2);\n__decorateClass([\n  state()\n], GdsDatepicker.prototype, \"_focusedMonth\", 2);\n__decorateClass([\n  state()\n], GdsDatepicker.prototype, \"_focusedYear\", 2);\n__decorateClass([\n  state()\n], GdsDatepicker.prototype, \"_dateFormatLayout\", 2);\n__decorateClass([\n  queryAsync(\"#calendar\")\n], GdsDatepicker.prototype, \"_elCalendar\", 2);\n__decorateClass([\n  queryAsync(\"#calendar-button\")\n], GdsDatepicker.prototype, \"_elTrigger\", 2);\n__decorateClass([\n  queryAsync(\"#field\")\n], GdsDatepicker.prototype, \"_elField\", 2);\n__decorateClass([\n  queryAll(\"[role=spinbutton]\")\n], GdsDatepicker.prototype, \"_elSpinners\", 2);\n__decorateClass([\n  query(\".input\")\n], GdsDatepicker.prototype, \"_elInput\", 2);\n__decorateClass([\n  watch(\"value\")\n], GdsDatepicker.prototype, \"_handleValueChange\", 1);\n__decorateClass([\n  watch(\"open\")\n], GdsDatepicker.prototype, \"_handleOpenChange\", 1);\nGdsDatepicker = __decorateClass([\n  gdsCustomElement(\"gds-datepicker\")\n], GdsDatepicker);\n\nexport {\n  GdsDatepicker\n};\n","import {\n  renderMonthGridView\n} from \"./chunk.NNJ6DJO2.js\";\nimport {\n  TransitionalStyles\n} from \"./chunk.WFXDH5SJ.js\";\nimport {\n  GdsElement\n} from \"./chunk.ZQ4D5K7J.js\";\nimport {\n  watch\n} from \"./chunk.2WO4NHJ2.js\";\nimport {\n  gdsCustomElement\n} from \"./chunk.VOYMQ322.js\";\nimport {\n  __decorateClass,\n  __privateAdd,\n  __privateMethod,\n  __spreadValues\n} from \"./chunk.5VURDMKE.js\";\n\n// libs/core/src/primitives/calendar/calendar.ts\nimport { html } from \"lit\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { when } from \"lit/directives/when.js\";\nimport { property, query } from \"lit/decorators.js\";\nimport { msg } from \"@lit/localize\";\nimport {\n  addDays,\n  isSameDay,\n  isSameMonth,\n  getWeek,\n  subMonths,\n  addMonths,\n  lastDayOfMonth\n} from \"date-fns\";\n\n// libs/core/src/primitives/calendar/calendar.styles.ts\nimport { css } from \"lit\";\nvar style = css`\n  @layer base, reset, transitional-styles;\n  @layer base {\n    td.disabled {\n      color: #999;\n      cursor: default;\n    }\n    td.today {\n      background-color: #eee;\n    }\n  }\n`;\nvar calendar_styles_default = style;\n\n// libs/core/src/primitives/calendar/calendar.ts\nvar _setSelectedDate, setSelectedDate_fn, _handleKeyDown, handleKeyDown_fn;\nvar GdsCalendar = class extends GdsElement {\n  constructor() {\n    super(...arguments);\n    __privateAdd(this, _setSelectedDate);\n    __privateAdd(this, _handleKeyDown);\n    this.min = new Date((/* @__PURE__ */ new Date()).getFullYear() - 10, 0, 1);\n    this.max = new Date((/* @__PURE__ */ new Date()).getFullYear() + 10, 0, 1);\n    this.focusedDate = /* @__PURE__ */ new Date();\n    this.disabledWeekends = false;\n    this.showWeekNumbers = false;\n  }\n  get focusedMonth() {\n    return this.focusedDate.getMonth();\n  }\n  set focusedMonth(month) {\n    const lastOfSelectedMonth = lastDayOfMonth(\n      new Date(this.focusedYear, month, 1)\n    );\n    const newFocusedDate = new Date(this.focusedDate);\n    newFocusedDate.setDate(\n      Math.min(this.focusedDate.getDate(), lastOfSelectedMonth.getDate())\n    );\n    newFocusedDate.setMonth(month);\n    newFocusedDate.setHours(12, 0, 0, 0);\n    this.focusedDate = newFocusedDate;\n  }\n  get focusedYear() {\n    return this.focusedDate.getFullYear();\n  }\n  set focusedYear(year) {\n    this.focusedDate = new Date(this.focusedDate.setFullYear(year));\n  }\n  /**\n   * Returns the date cell element for the given day number.\n   */\n  getDateCell(dayNumber) {\n    var _a;\n    return (_a = this.shadowRoot) == null ? void 0 : _a.querySelector(`#dateCell-${dayNumber}`);\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    TransitionalStyles.instance.apply(this, \"gds-calendar\");\n    this.addEventListener(\"keydown\", __privateMethod(this, _handleKeyDown, handleKeyDown_fn));\n  }\n  focus() {\n    var _a;\n    super.focus();\n    (_a = this._elFocusedCell) == null ? void 0 : _a.focus();\n  }\n  render() {\n    const currentDate = /* @__PURE__ */ new Date();\n    return html`<table>\n      <thead>\n        <tr>\n          ${when(this.showWeekNumbers, () => html`<th></th>`)}\n          <th>${msg(\"Mon\")}</th>\n          <th>${msg(\"Tue\")}</th>\n          <th>${msg(\"Wed\")}</th>\n          <th>${msg(\"Thu\")}</th>\n          <th>${msg(\"Fri\")}</th>\n          <th>${msg(\"Sat\")}</th>\n          <th>${msg(\"Sun\")}</th>\n        </tr>\n      </thead>\n      <tbody>\n        ${renderMonthGridView(\n      this.focusedDate,\n      (weeks) => html`\n            ${weeks.map(\n        (week) => html`\n                <tr>\n                  ${when(\n          this.showWeekNumbers,\n          () => html`<td class=\"week-number\">\n                        ${getWeek(week.days[0])}\n                      </td>`\n        )}\n                  ${week.days.map((day) => {\n          const customization = __spreadValues({\n            // Defaults\n            color: \"currentColor\",\n            // Get baseline disabled state from the disabledDates prop (or false if unset)\n            disabled: Boolean(\n              this.disabledDates && this.disabledDates.some((d) => isSameDay(d, day))\n            )\n          }, this.customizedDates && this.customizedDates.find(\n            (d) => isSameDay(d.date, day)\n          ));\n          const isOutsideCurrentMonth = !isSameMonth(this.focusedDate, day) || day < this.min || day > this.max;\n          const isWeekend = day.getDay() === 0 || day.getDay() === 6;\n          const isDisabled = customization.disabled || isOutsideCurrentMonth || this.disabledWeekends && isWeekend;\n          return html`\n                      <td\n                        class=\"${classMap({\n            \"custom-date\": Boolean(customization),\n            disabled: Boolean(isDisabled),\n            today: isSameDay(currentDate, day)\n          })}\"\n                        ?disabled=${isDisabled}\n                        tabindex=\"${isSameDay(this.focusedDate, day) ? 0 : -1}\"\n                        aria-selected=\"${this.value && isSameDay(this.value, day)}\"\n                        aria-label=\"${day.toDateString()}\"\n                        @click=${() => isDisabled ? null : __privateMethod(this, _setSelectedDate, setSelectedDate_fn).call(this, day)}\n                        id=\"dateCell-${day.getDate()}\"\n                      >\n                        <span\n                          style=\"color: ${customization ? customization == null ? void 0 : customization.color : \"\"}\"\n                          >${day.getDate()}</span\n                        >\n\n                        ${when(\n            customization.indicator,\n            () => html`<span\n                              class=\"indicator_${customization == null ? void 0 : customization.indicator}\"\n                              style=\"background-color: ${customization == null ? void 0 : customization.color}\"\n                            ></span>`\n          )}\n                      </td>\n                    `;\n        })}\n                </tr>\n              `\n      )}\n          `\n    )}\n      </tbody>\n    </table>`;\n  }\n  _valueChanged() {\n    if (!this.value)\n      return;\n    this.focusedDate = this.value;\n  }\n};\n_setSelectedDate = new WeakSet();\nsetSelectedDate_fn = function(date) {\n  this.value = date;\n  this.dispatchEvent(\n    new CustomEvent(\"change\", {\n      detail: date,\n      bubbles: false,\n      composed: false\n    })\n  );\n};\n_handleKeyDown = new WeakSet();\nhandleKeyDown_fn = function(e) {\n  var _a;\n  let handled = false;\n  let newFocusedDate = new Date(this.focusedDate);\n  if (e.key === \"ArrowLeft\") {\n    newFocusedDate = addDays(this.focusedDate, -1);\n    handled = true;\n  } else if (e.key === \"ArrowRight\") {\n    newFocusedDate = addDays(this.focusedDate, 1);\n    handled = true;\n  } else if (e.key === \"ArrowUp\") {\n    newFocusedDate = addDays(this.focusedDate, -7);\n    handled = true;\n  } else if (e.key === \"ArrowDown\") {\n    newFocusedDate = addDays(this.focusedDate, 7);\n    handled = true;\n  } else if (e.key === \"Enter\" || e.key === \" \") {\n    if (!((_a = this._elFocusedCell) == null ? void 0 : _a.hasAttribute(\"disabled\"))) {\n      __privateMethod(this, _setSelectedDate, setSelectedDate_fn).call(this, this.focusedDate);\n    }\n    handled = true;\n  } else if (e.key === \"Home\") {\n    newFocusedDate = new Date(this.focusedYear, this.focusedMonth, 1);\n    handled = true;\n  } else if (e.key === \"End\") {\n    newFocusedDate = new Date(this.focusedYear, this.focusedMonth + 1, 0);\n    handled = true;\n  } else if (e.key === \"PageUp\") {\n    newFocusedDate = subMonths(this.focusedDate, 1);\n    handled = true;\n  } else if (e.key === \"PageDown\") {\n    newFocusedDate = addMonths(this.focusedDate, 1);\n    handled = true;\n  }\n  if (newFocusedDate.getFullYear() >= this.min.getFullYear() && newFocusedDate.getFullYear() <= this.max.getFullYear()) {\n    this.focusedDate = newFocusedDate;\n  }\n  if (handled) {\n    e.preventDefault();\n    e.stopPropagation();\n    this.updateComplete.then(() => {\n      var _a2;\n      (_a2 = this._elFocusedCell) == null ? void 0 : _a2.focus();\n      this.dispatchEvent(\n        new CustomEvent(\"gds-date-focused\", {\n          detail: this.focusedDate,\n          bubbles: false,\n          composed: false\n        })\n      );\n    });\n  }\n};\nGdsCalendar.styles = [calendar_styles_default];\nGdsCalendar.shadowRootOptions = {\n  mode: \"open\",\n  delegatesFocus: true\n};\n__decorateClass([\n  property()\n], GdsCalendar.prototype, \"value\", 2);\n__decorateClass([\n  property({ type: Date })\n], GdsCalendar.prototype, \"min\", 2);\n__decorateClass([\n  property({ type: Date })\n], GdsCalendar.prototype, \"max\", 2);\n__decorateClass([\n  property()\n], GdsCalendar.prototype, \"focusedDate\", 2);\n__decorateClass([\n  property({ type: Boolean, attribute: \"disabled-weekends\" })\n], GdsCalendar.prototype, \"disabledWeekends\", 2);\n__decorateClass([\n  property({ type: Array, attribute: \"disabled-dates\" })\n], GdsCalendar.prototype, \"disabledDates\", 2);\n__decorateClass([\n  property({ type: Number })\n], GdsCalendar.prototype, \"focusedMonth\", 1);\n__decorateClass([\n  property({ type: Number })\n], GdsCalendar.prototype, \"focusedYear\", 1);\n__decorateClass([\n  property({ type: Boolean })\n], GdsCalendar.prototype, \"showWeekNumbers\", 2);\n__decorateClass([\n  property({ attribute: false })\n], GdsCalendar.prototype, \"customizedDates\", 2);\n__decorateClass([\n  query('td[tabindex=\"0\"]')\n], GdsCalendar.prototype, \"_elFocusedCell\", 2);\n__decorateClass([\n  watch(\"value\")\n], GdsCalendar.prototype, \"_valueChanged\", 1);\nGdsCalendar = __decorateClass([\n  gdsCustomElement(\"gds-calendar\")\n], GdsCalendar);\n\nexport {\n  GdsCalendar\n};\n","// libs/core/src/primitives/calendar/functions.ts\nimport {\n  startOfMonth,\n  endOfMonth,\n  addDays,\n  eachWeekOfInterval,\n  eachDayOfInterval\n} from \"date-fns\";\nimport { html } from \"lit\";\nfunction renderMonthGridView(date, template) {\n  const monthStart = startOfMonth(date);\n  const monthEnd = endOfMonth(date);\n  const weeks = eachWeekOfInterval(\n    { start: monthStart, end: monthEnd },\n    { weekStartsOn: 1 }\n  );\n  return html`${template(\n    weeks.map((weekStartDay) => ({\n      days: eachDayOfInterval({\n        start: weekStartDay,\n        end: addDays(weekStartDay, 6)\n      })\n    }))\n  )}`;\n}\n\nexport {\n  renderMonthGridView\n};\n"],"names":[],"sourceRoot":""}