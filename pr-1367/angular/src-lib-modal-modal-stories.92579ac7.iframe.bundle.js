"use strict";(self.webpackChunkgreen=self.webpackChunkgreen||[]).push([[893],{"./libs/angular/src/lib/modal/modal.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Custom:()=>Custom,Default:()=>Default,Slideout:()=>Slideout,Takeover:()=>Takeover,__namedExportsOrder:()=>__namedExportsOrder,default:()=>modal_stories});var documentation=__webpack_require__("./libs/angular/src/lib/modal/documentation.mdx"),dist=__webpack_require__("./node_modules/@storybook/angular/dist/index.mjs"),tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.mjs"),common=__webpack_require__("./node_modules/@angular/common/fesm2022/common.mjs"),core=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),a11y=__webpack_require__("./node_modules/@angular/cdk/fesm2022/a11y.mjs"),modal_component=__webpack_require__("./libs/angular/src/lib/modal/modal.component.ts"),modal_header_directive=__webpack_require__("./libs/angular/src/lib/modal/modal-header.directive.ts"),modal_footer_directive=__webpack_require__("./libs/angular/src/lib/modal/modal-footer.directive.ts");const DECLARATIONS=[modal_component.N1,modal_component.Wm,modal_component.lT,modal_component.eD,modal_header_directive.o,modal_footer_directive.g],EXPORTS=[modal_component.N1,modal_header_directive.o,modal_footer_directive.g];let NggModalModule=class NggModalModule{};NggModalModule=(0,tslib_es6.Cg)([(0,core.NgModule)({imports:[a11y.Pd,common.CommonModule],exports:EXPORTS,declarations:DECLARATIONS})],NggModalModule);const modal_stories={title:"Components/Modal",component:modal_component.N1,decorators:[(0,dist.moduleMetadata)({imports:[NggModalModule]})],parameters:{docs:{page:documentation.default},componentIds:["component-dialogue","component-slideout","component-foldout","component-takeover"]}},Template=args=>({template:'\n    <ngg-modal [modalType]="modalType" [header]="header" [isOpen]="isOpen" [confirmLabel]="confirmLabel" [dismissLabel]="dismissLabel" [trapFocus]="trapFocus" [hideHeader]="false" [hideFooter]="false" (closed)="isOpen = false">\n      <p>Modal Body</p>\n    </ngg-modal>\n    <button (click)="isOpen = true">Open Modal</button>\n  ',props:{...args,isOpen:!0}}),Default=Template.bind({});Default.args={header:"Header",dismissLabel:"Secondary",confirmLabel:"Primary",trapFocus:!1};const Slideout=Template.bind({});Slideout.args={modalType:"slideout",header:"Header",dismissLabel:"Secondary",confirmLabel:"Primary",trapFocus:!1};const Takeover=Template.bind({});Takeover.args={modalType:"takeover",header:"Header",dismissLabel:"Secondary",confirmLabel:"Primary",trapFocus:!1};const Custom=(args=>({template:'\n    <ngg-modal [modalType]="modalType" [header]="header" [isOpen]="isOpen" [confirmLabel]="confirmLabel" [dismissLabel]="dismissLabel" [trapFocus]="trapFocus" [hideHeader]="hideHeader" [hideFooter]="hideFooter" (closed)="isOpen = false">\n      <ng-container nggModalHeader>\n        <div style="display:flex;align-items:center;">\n          <h3>{{header}}</h3>\n          <span style="margin-left:10px;" class="badge info">!</span>\n        </div>\n      </ng-container>\n      <p>Modal Body</p>\n      <ng-container nggModalFooter>\n          <button class="danger" (click)="isOpen = false">Close</button>\n      </ng-container>\n    </ngg-modal>\n    <button (click)="isOpen = true">Open Modal</button>\n  ',props:{...args,isOpen:!0}})).bind({});Custom.args={header:"Header",dismissLabel:"Secondary",confirmLabel:"Primary",trapFocus:!1,hideHeader:!1,hideFooter:!1},Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:'(args: NggModalComponent) => {\n  const isOpen = true;\n  return {\n    template: `\n    <ngg-modal [modalType]="modalType" [header]="header" [isOpen]="isOpen" [confirmLabel]="confirmLabel" [dismissLabel]="dismissLabel" [trapFocus]="trapFocus" [hideHeader]="false" [hideFooter]="false" (closed)="isOpen = false">\n      <p>Modal Body</p>\n    </ngg-modal>\n    <button (click)="isOpen = true">Open Modal</button>\n  `,\n    props: {\n      ...args,\n      isOpen\n    }\n  };\n}',...Default.parameters?.docs?.source}}},Slideout.parameters={...Slideout.parameters,docs:{...Slideout.parameters?.docs,source:{originalSource:'(args: NggModalComponent) => {\n  const isOpen = true;\n  return {\n    template: `\n    <ngg-modal [modalType]="modalType" [header]="header" [isOpen]="isOpen" [confirmLabel]="confirmLabel" [dismissLabel]="dismissLabel" [trapFocus]="trapFocus" [hideHeader]="false" [hideFooter]="false" (closed)="isOpen = false">\n      <p>Modal Body</p>\n    </ngg-modal>\n    <button (click)="isOpen = true">Open Modal</button>\n  `,\n    props: {\n      ...args,\n      isOpen\n    }\n  };\n}',...Slideout.parameters?.docs?.source}}},Takeover.parameters={...Takeover.parameters,docs:{...Takeover.parameters?.docs,source:{originalSource:'(args: NggModalComponent) => {\n  const isOpen = true;\n  return {\n    template: `\n    <ngg-modal [modalType]="modalType" [header]="header" [isOpen]="isOpen" [confirmLabel]="confirmLabel" [dismissLabel]="dismissLabel" [trapFocus]="trapFocus" [hideHeader]="false" [hideFooter]="false" (closed)="isOpen = false">\n      <p>Modal Body</p>\n    </ngg-modal>\n    <button (click)="isOpen = true">Open Modal</button>\n  `,\n    props: {\n      ...args,\n      isOpen\n    }\n  };\n}',...Takeover.parameters?.docs?.source}}},Custom.parameters={...Custom.parameters,docs:{...Custom.parameters?.docs,source:{originalSource:'(args: NggModalComponent) => {\n  const isOpen = true;\n  return {\n    template: `\n    <ngg-modal [modalType]="modalType" [header]="header" [isOpen]="isOpen" [confirmLabel]="confirmLabel" [dismissLabel]="dismissLabel" [trapFocus]="trapFocus" [hideHeader]="hideHeader" [hideFooter]="hideFooter" (closed)="isOpen = false">\n      <ng-container nggModalHeader>\n        <div style="display:flex;align-items:center;">\n          <h3>{{header}}</h3>\n          <span style="margin-left:10px;" class="badge info">!</span>\n        </div>\n      </ng-container>\n      <p>Modal Body</p>\n      <ng-container nggModalFooter>\n          <button class="danger" (click)="isOpen = false">Close</button>\n      </ng-container>\n    </ngg-modal>\n    <button (click)="isOpen = true">Open Modal</button>\n  `,\n    props: {\n      ...args,\n      isOpen\n    }\n  };\n}',...Custom.parameters?.docs?.source}}};const __namedExportsOrder=["Default","Slideout","Takeover","Custom"]}}]);