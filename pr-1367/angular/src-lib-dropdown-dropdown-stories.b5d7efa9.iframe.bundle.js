"use strict";(self.webpackChunkgreen=self.webpackChunkgreen||[]).push([[4173],{"./libs/angular/src/lib/shared/core-element/core-element.directive.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{L:()=>NggCoreElementDirective});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.mjs"),common=__webpack_require__("./node_modules/@angular/common/fesm2022/common.mjs"),core=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),chunk_VOYMQ322=__webpack_require__("./dist/libs/core/src/chunks/chunk.VOYMQ322.js");__webpack_require__("./dist/libs/core/src/chunks/chunk.5VURDMKE.js");let NggCoreElementDirective=class NggCoreElementDirective{constructor(){this.viewRef=null,this.document=(0,core.inject)(common.DOCUMENT),this.renderer=(0,core.inject)(core.Renderer2),this.vcr=(0,core.inject)(core.ViewContainerRef),this.cdr=(0,core.inject)(core.ChangeDetectorRef),this.template=(0,core.inject)(core.TemplateRef)}ngOnInit(){this.vcr.clear();const originalCreateElement=this.renderer.createElement;this.renderer.createElement=(name,_namespace)=>this.document.createElement((0,chunk_VOYMQ322.Eq)(name)),this.viewRef=this.vcr.createEmbeddedView(this.template),this.renderer.createElement=originalCreateElement,this.cdr.markForCheck()}};NggCoreElementDirective=(0,tslib_es6.Cg)([(0,core.Directive)({selector:"[nggCoreElement]"})],NggCoreElementDirective)},"./libs/angular/src/lib/shared/core-element/core-element.module.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{$:()=>NggCoreWrapperModule});var tslib__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/tslib/tslib.es6.mjs"),_angular_core__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),_angular_common__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@angular/common/fesm2022/common.mjs"),_core_element_directive__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./libs/angular/src/lib/shared/core-element/core-element.directive.ts");let NggCoreWrapperModule=class NggCoreWrapperModule{};NggCoreWrapperModule=(0,tslib__WEBPACK_IMPORTED_MODULE_1__.Cg)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.NgModule)({declarations:[_core_element_directive__WEBPACK_IMPORTED_MODULE_0__.L],imports:[_angular_common__WEBPACK_IMPORTED_MODULE_3__.CommonModule],exports:[_core_element_directive__WEBPACK_IMPORTED_MODULE_0__.L]})],NggCoreWrapperModule)},"./libs/angular/src/lib/shared/index.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{$M:()=>core_element_module.$});var NggOnScrollDirective_1,tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.mjs"),common=__webpack_require__("./node_modules/@angular/common/fesm2022/common.mjs"),core=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),Subject=__webpack_require__("./node_modules/rxjs/_esm5/internal/Subject.js"),fromEvent=__webpack_require__("./node_modules/rxjs/_esm5/internal/observable/fromEvent.js"),interval=__webpack_require__("./node_modules/rxjs/_esm5/internal/observable/interval.js"),takeUntil=__webpack_require__("./node_modules/rxjs/_esm5/internal/operators/takeUntil.js"),throttle=__webpack_require__("./node_modules/rxjs/_esm5/internal/operators/throttle.js");const ON_SCROLL_TOKEN=new core.InjectionToken("ON_SCROLL_TOKEN");let NggOnScrollDirective=class NggOnScrollDirective{static#_=NggOnScrollDirective_1=this;constructor(elementRef){this.elementRef=elementRef,this.onScroll$=new Subject.B7,this.destroy$=new Subject.B7}ngAfterViewInit(){this.elementRef&&(0,fromEvent.R)(this.elementRef?.nativeElement,"scroll").pipe((0,takeUntil.Q)(this.destroy$),(0,throttle.n)((()=>(0,interval.Y)(30)))).subscribe((()=>{this.onScroll$.next()}))}ngOnDestroy(){this.destroy$.next(null),this.destroy$.complete()}static#_2=this.ctorParameters=()=>[{type:core.ElementRef}]};NggOnScrollDirective=NggOnScrollDirective_1=(0,tslib_es6.Cg)([(0,core.Directive)({selector:"[nggOnScroll]",providers:[{provide:ON_SCROLL_TOKEN,useFactory:component=>component?.onScroll$,deps:[NggOnScrollDirective_1]}]}),(0,tslib_es6.Sn)("design:paramtypes",[core.ElementRef])],NggOnScrollDirective);let NggSharedModule=class NggSharedModule{};NggSharedModule=(0,tslib_es6.Cg)([(0,core.NgModule)({declarations:[NggOnScrollDirective],imports:[common.CommonModule],exports:[NggOnScrollDirective]})],NggSharedModule);__webpack_require__("./libs/angular/src/lib/shared/core-element/core-element.directive.ts");var core_element_module=__webpack_require__("./libs/angular/src/lib/shared/core-element/core-element.module.ts")},"./libs/angular/src/lib/dropdown/dropdown.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{CustomOption:()=>CustomOption,Form:()=>Form,FormWithReset:()=>FormWithReset,MultiSelect:()=>MultiSelect,Searchable:()=>Searchable,Select:()=>Select,Small:()=>Small,Test:()=>Test,__namedExportsOrder:()=>__namedExportsOrder,default:()=>dropdown_stories});var documentation=__webpack_require__("./libs/angular/src/lib/dropdown/documentation.mdx"),dist=__webpack_require__("./node_modules/@storybook/angular/dist/index.mjs"),fesm2022_forms=__webpack_require__("./node_modules/@angular/forms/fesm2022/forms.mjs"),tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.mjs"),core=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),common=__webpack_require__("./node_modules/@angular/common/fesm2022/common.mjs"),dropdown_component=__webpack_require__("./libs/angular/src/lib/dropdown/dropdown.component.ts"),dropdown_option_directive=__webpack_require__("./libs/angular/src/lib/dropdown/dropdown-option.directive.ts"),dropdown_button_directive=__webpack_require__("./libs/angular/src/lib/dropdown/dropdown-button.directive.ts"),shared=__webpack_require__("./libs/angular/src/lib/shared/index.ts");let NggDropdownModule=class NggDropdownModule{};NggDropdownModule=(0,tslib_es6.Cg)([(0,core.NgModule)({declarations:[dropdown_component.d,dropdown_option_directive.a,dropdown_button_directive.d],imports:[common.CommonModule,shared.$M],exports:[dropdown_component.d,dropdown_option_directive.a,dropdown_button_directive.d],schemas:[core.CUSTOM_ELEMENTS_SCHEMA]})],NggDropdownModule);var of=__webpack_require__("./node_modules/rxjs/_esm5/internal/observable/of.js"),delay=__webpack_require__("./node_modules/rxjs/_esm5/internal/operators/delay.js");const dropdown_stories={title:"Components/Dropdown",component:dropdown_component.d,decorators:[(0,dist.moduleMetadata)({imports:[fesm2022_forms.YN,fesm2022_forms.X1,NggDropdownModule]})],parameters:{docs:{page:documentation.default},componentIds:["component-dropdown"]}},Template=args=>({template:'<ngg-dropdown [texts]="texts" [options]="options" [(value)]="value" [loop]="loop" [multiSelect]="multiSelect" [searchable]="searchable" [useValue]="useValue" [display]="display" [size]="size" [id]="id"></ngg-dropdown>',props:args}),Select=Template.bind({});Select.args={id:"",texts:{placeholder:"Select meal"},value:"",loop:!0,multiSelect:!1,searchable:!1,display:"label",useValue:"value",options:[{label:"Tacos",value:"tacos"},{label:"Pizza",value:"pizza"},{label:"Sushi",value:"sushi"}]};const Small=Template.bind({});Small.args={id:"",texts:{placeholder:"Select meal"},value:"",loop:!0,multiSelect:!1,searchable:!1,display:"label",useValue:"value",size:"small",options:[{label:"Tacos",value:"tacos"},{label:"Pizza",value:"pizza"},{label:"Sushi",value:"sushi"}]};const Test=Template.bind({});Test.args={id:"",texts:{placeholder:"Select meal"},value:"",loop:!0,multiSelect:!1,searchable:!1,display:"label",useValue:"value",options:[{label:"Lunch",value:"lunch",heading:!0},{label:"Tacos",value:"tacos"},{label:"Pizza",value:"pizza"},{label:"Sushi",value:"sushi"},{label:"Dinner",value:"dinner",heading:!0},{label:"Ramen",value:"ramen"},{label:"Tori Ramen",value:"tori"},{label:"Tokyo Ramen",value:"tokyo"},{label:"Kyoto Ramen",value:"kyoto"},{label:"Sriracha Ramen",value:"sriracha"},{label:"Kimchi Ramen",value:"kimchi"},{label:"Hakodate Ramen",value:"hakodate"}]};const MultiSelect=Template.bind({});MultiSelect.args={id:"",texts:{placeholder:"Select meal(s)"},value:"",loop:!0,multiSelect:!0,searchable:!1,display:"name",useValue:"value",options:[{name:"Tacos",value:"tacos"},{name:"Pizza",value:"pizza"},{name:"Sushi",value:"sushi"}]};const Searchable=Template.bind({});Searchable.args={id:"",texts:{placeholder:"Select meal(s)",searchPlaceholder:"Search meal"},value:"",loop:!0,multiSelect:!1,searchable:!0,display:"name",useValue:"value",options:[{name:"Tacos",value:"tacos"},{name:"Pizza",value:"pizza"},{name:"Sushi",value:"sushi"},{name:"Ramen",value:"ramen"},{name:"Tori Ramen",value:"tori"},{name:"Tokyo Ramen",value:"tokyo"},{name:"Kyoto Ramen",value:"kyoto"},{name:"Sriracha Ramen",value:"sriracha"},{name:"Kimchi Ramen",value:"kimchi"},{name:"Hakodate Ramen",value:"hakodate"}]};const CustomOption=(args=>(args.compareWith=(o1,o2)=>o1.id===o2.id,args.searchFilter=(search,value)=>["kitchen","id"].some((key=>value[key].toLowerCase().includes(search.toLowerCase()))),{component:dropdown_component.d,template:'\n    <ngg-dropdown\n      [texts]="texts"\n      [options]="options"\n      [(value)]="value"\n      [loop]="loop"\n      [multiSelect]="multiSelect"\n      [searchable]="searchable"\n      [searchFilter]="searchFilter"\n      [compareWith]="compareWith"\n      [useValue]="useValue"\n      [display]="display"\n      [id]="id">\n      <ng-template nggDropdownButton let-option="option">\n        <div>\n          <div>{{ option.name }}</div>\n          <div style="font-size: 0.8em">{{ option.val.kitchen }}</div>\n        </div>\n      </ng-template>\n      <ng-template nggDropdownOption let-option="option" let-index="index">\n        <div>\n          <div>{{ index }}. {{ option.name }}</div>\n          <div style="font-size: 0.8em">{{ option.val.kitchen }}</div>\n        </div>\n      </ng-template>\n    </ngg-dropdown>\n    ',props:args})).bind({});CustomOption.args={id:"",texts:{placeholder:"Select meal"},value:"",loop:!0,multiSelect:!1,searchable:!0,useValue:"val",display:"name",options:[{name:"Tacos",val:{id:"tacos",kitchen:"mexican"}},{name:"Pizza",val:{id:"pizza",kitchen:"italian"}},{name:"Sushi",val:{id:"sushi",kitchen:"japanese"}}]};const Form=(args=>{const validationForm=new fesm2022_forms.gE({country:new fesm2022_forms.MJ(void 0,[fesm2022_forms.k0.required])}),options$=(0,of.of)([{label:"Sweden",value:"sweden"},{label:"Denmark",value:"denmark"},{label:"Finland",value:"Finland"},{label:"Norway",value:"norway"},{label:"England",value:"england"},{label:"Germany",value:"germany"},{label:"Estonia",value:"estonia"},{label:"Lithuania",value:"lithuania"},{label:"Belarus",value:"belarus"},{label:"Latvia",value:"latvia"},{label:"Greece",value:"greece"},{label:"Italy",value:"italy"},{label:"Austria",value:"austria"},{label:"Switzerland",value:"switzerland"},{label:"Netherlands",value:"netherlands"},{label:"Belgium",value:"belgium"},{label:"France",value:"france"},{label:"Spain",value:"spain"},{label:"Portugal",value:"portugal"},{label:"Poland",value:"poland"}]).pipe((0,delay.c)(3e3));return{component:dropdown_component.d,template:'\n      <form [formGroup]="validationForm" #ngForm="ngForm" (submit)="save(validationForm.value)">\n  <div class="form-group" *ngIf="validationForm.get(\'country\') as dropdown">\n    <ngg-dropdown\n      label="Country"\n      [options]="options$ | async"\n      formControlName="country"\n      [valid]="dropdown.valid && ngForm.submitted"\n      [invalid]="dropdown.invalid && ngForm.submitted"\n    >\n      \x3c!-- Hint text when not submitted --\x3e\n      <ng-container data-form-info *ngIf="!ngForm[\'submitted\']"\n        >Select country</ng-container\n      >\n      <ng-container data-form-info *ngIf="ngForm[\'submitted\']">\n        \x3c!-- Text when form control contains one or more errors --\x3e\n        <ng-container *ngIf="dropdown.errors as errors">\n          \x3c!-- Text for each error (only one will be displayed at a time) --\x3e\n          <ng-container *ngIf="errors[\'required\']">Select country</ng-container>\n        </ng-container>\n      </ng-container>\n    </ngg-dropdown>\n  </div>\n  <button type="submit" [disabled]="ngForm?.submitted && validationForm.invalid">\n    Save\n  </button>\n    ',props:{...args,validationForm,options$,save:form=>{console.log("Saved!",form)}}}}).bind({});Form.args={};const FormWithReset=(args=>{const validationFormAdvance=new fesm2022_forms.gE({country:new fesm2022_forms.MJ(void 0,[fesm2022_forms.k0.required])}),options$=(0,of.of)([{label:"Sweden",value:{country:"sweden",id:"1"}},{label:"Australia",value:{country:"Australia",id:"2"}}]).pipe((0,delay.c)(3e3));return{component:dropdown_component.d,template:'\n    <form [formGroup]="validationFormAdvance" #ngForm="ngForm" (submit)="save(validationFormAdvance.value)">\n    <div class="form-group" *ngIf="validationFormAdvance.get(\'country\') as dropdown">\n      <ngg-dropdown\n        label="Country"\n        [options]="options$ | async"\n        formControlName="country"\n        [invalid]="validationFormAdvance.get(\'country\').invalid && validationFormAdvance.get(\'country\').touched"\n      >\n        \x3c!-- Hint text when not submitted --\x3e\n        <ng-container data-form-info *ngIf="!ngForm[\'submitted\']"\n          >Select country</ng-container\n        >\n        <ng-container data-form-info *ngIf="ngForm[\'submitted\']">\n          \x3c!-- Text when form control contains one or more errors --\x3e\n          <ng-container *ngIf="dropdown.errors as errors">\n            \x3c!-- Text for each error (only one will be displayed at a time) --\x3e\n            <ng-container *ngIf="errors[\'required\']">Select country</ng-container>\n          </ng-container>\n        </ng-container>\n      </ngg-dropdown>\n    </div>\n    <button type="submit" [disabled]="ngForm?.submitted && validationFormAdvance.invalid">\n      Save\n    </button>\n    <button (click)="validationFormAdvance.reset()">\n      Reset\n    </button>\n    ',props:{...args,validationFormAdvance,options$,save:form=>{console.log("Saved!",form)}}}}).bind({});FormWithReset.args={},Select.parameters={...Select.parameters,docs:{...Select.parameters?.docs,source:{originalSource:'(args: NggDropdownComponent) => ({\n  template: `<ngg-dropdown [texts]="texts" [options]="options" [(value)]="value" [loop]="loop" [multiSelect]="multiSelect" [searchable]="searchable" [useValue]="useValue" [display]="display" [size]="size" [id]="id"></ngg-dropdown>`,\n  props: args\n})',...Select.parameters?.docs?.source}}},Small.parameters={...Small.parameters,docs:{...Small.parameters?.docs,source:{originalSource:'(args: NggDropdownComponent) => ({\n  template: `<ngg-dropdown [texts]="texts" [options]="options" [(value)]="value" [loop]="loop" [multiSelect]="multiSelect" [searchable]="searchable" [useValue]="useValue" [display]="display" [size]="size" [id]="id"></ngg-dropdown>`,\n  props: args\n})',...Small.parameters?.docs?.source}}},Test.parameters={...Test.parameters,docs:{...Test.parameters?.docs,source:{originalSource:'(args: NggDropdownComponent) => ({\n  template: `<ngg-dropdown [texts]="texts" [options]="options" [(value)]="value" [loop]="loop" [multiSelect]="multiSelect" [searchable]="searchable" [useValue]="useValue" [display]="display" [size]="size" [id]="id"></ngg-dropdown>`,\n  props: args\n})',...Test.parameters?.docs?.source}}},MultiSelect.parameters={...MultiSelect.parameters,docs:{...MultiSelect.parameters?.docs,source:{originalSource:'(args: NggDropdownComponent) => ({\n  template: `<ngg-dropdown [texts]="texts" [options]="options" [(value)]="value" [loop]="loop" [multiSelect]="multiSelect" [searchable]="searchable" [useValue]="useValue" [display]="display" [size]="size" [id]="id"></ngg-dropdown>`,\n  props: args\n})',...MultiSelect.parameters?.docs?.source}}},Searchable.parameters={...Searchable.parameters,docs:{...Searchable.parameters?.docs,source:{originalSource:'(args: NggDropdownComponent) => ({\n  template: `<ngg-dropdown [texts]="texts" [options]="options" [(value)]="value" [loop]="loop" [multiSelect]="multiSelect" [searchable]="searchable" [useValue]="useValue" [display]="display" [size]="size" [id]="id"></ngg-dropdown>`,\n  props: args\n})',...Searchable.parameters?.docs?.source}}},CustomOption.parameters={...CustomOption.parameters,docs:{...CustomOption.parameters?.docs,source:{originalSource:'(args: NggDropdownComponent) => {\n  args.compareWith = (o1: any, o2: any) => o1.id === o2.id;\n  args.searchFilter = (search: string, value: any) => [\'kitchen\', \'id\'].some(key => value[key].toLowerCase().includes(search.toLowerCase()));\n  return {\n    component: NggDropdownComponent,\n    template: `\n    <ngg-dropdown\n      [texts]="texts"\n      [options]="options"\n      [(value)]="value"\n      [loop]="loop"\n      [multiSelect]="multiSelect"\n      [searchable]="searchable"\n      [searchFilter]="searchFilter"\n      [compareWith]="compareWith"\n      [useValue]="useValue"\n      [display]="display"\n      [id]="id">\n      <ng-template nggDropdownButton let-option="option">\n        <div>\n          <div>{{ option.name }}</div>\n          <div style="font-size: 0.8em">{{ option.val.kitchen }}</div>\n        </div>\n      </ng-template>\n      <ng-template nggDropdownOption let-option="option" let-index="index">\n        <div>\n          <div>{{ index }}. {{ option.name }}</div>\n          <div style="font-size: 0.8em">{{ option.val.kitchen }}</div>\n        </div>\n      </ng-template>\n    </ngg-dropdown>\n    `,\n    props: args\n  };\n}',...CustomOption.parameters?.docs?.source}}},Form.parameters={...Form.parameters,docs:{...Form.parameters?.docs,source:{originalSource:"(args: NggDropdownComponent) => {\n  const validationForm = new FormGroup({\n    country: new FormControl(undefined, [Validators.required])\n  });\n  const options$ = of([{\n    label: 'Sweden',\n    value: 'sweden'\n  }, {\n    label: 'Denmark',\n    value: 'denmark'\n  }, {\n    label: 'Finland',\n    value: 'Finland'\n  }, {\n    label: 'Norway',\n    value: 'norway'\n  }, {\n    label: 'England',\n    value: 'england'\n  }, {\n    label: 'Germany',\n    value: 'germany'\n  }, {\n    label: 'Estonia',\n    value: 'estonia'\n  }, {\n    label: 'Lithuania',\n    value: 'lithuania'\n  }, {\n    label: 'Belarus',\n    value: 'belarus'\n  }, {\n    label: 'Latvia',\n    value: 'latvia'\n  }, {\n    label: 'Greece',\n    value: 'greece'\n  }, {\n    label: 'Italy',\n    value: 'italy'\n  }, {\n    label: 'Austria',\n    value: 'austria'\n  }, {\n    label: 'Switzerland',\n    value: 'switzerland'\n  }, {\n    label: 'Netherlands',\n    value: 'netherlands'\n  }, {\n    label: 'Belgium',\n    value: 'belgium'\n  }, {\n    label: 'France',\n    value: 'france'\n  }, {\n    label: 'Spain',\n    value: 'spain'\n  }, {\n    label: 'Portugal',\n    value: 'portugal'\n  }, {\n    label: 'Poland',\n    value: 'poland'\n  }]).pipe(delay(3000));\n  const save = (form: any) => {\n    console.log('Saved!', form);\n  };\n  return {\n    component: NggDropdownComponent,\n    template: `\n      <form [formGroup]=\"validationForm\" #ngForm=\"ngForm\" (submit)=\"save(validationForm.value)\">\n  <div class=\"form-group\" *ngIf=\"validationForm.get('country') as dropdown\">\n    <ngg-dropdown\n      label=\"Country\"\n      [options]=\"options$ | async\"\n      formControlName=\"country\"\n      [valid]=\"dropdown.valid && ngForm.submitted\"\n      [invalid]=\"dropdown.invalid && ngForm.submitted\"\n    >\n      \x3c!-- Hint text when not submitted --\x3e\n      <ng-container data-form-info *ngIf=\"!ngForm['submitted']\"\n        >Select country</ng-container\n      >\n      <ng-container data-form-info *ngIf=\"ngForm['submitted']\">\n        \x3c!-- Text when form control contains one or more errors --\x3e\n        <ng-container *ngIf=\"dropdown.errors as errors\">\n          \x3c!-- Text for each error (only one will be displayed at a time) --\x3e\n          <ng-container *ngIf=\"errors['required']\">Select country</ng-container>\n        </ng-container>\n      </ng-container>\n    </ngg-dropdown>\n  </div>\n  <button type=\"submit\" [disabled]=\"ngForm?.submitted && validationForm.invalid\">\n    Save\n  </button>\n    `,\n    props: {\n      ...args,\n      validationForm,\n      options$,\n      save\n    }\n  };\n}",...Form.parameters?.docs?.source}}},FormWithReset.parameters={...FormWithReset.parameters,docs:{...FormWithReset.parameters?.docs,source:{originalSource:'(args: NggDropdownComponent) => {\n  const validationFormAdvance = new FormGroup({\n    country: new FormControl(undefined, [Validators.required])\n  });\n  const options$ = of([{\n    label: \'Sweden\',\n    value: {\n      country: \'sweden\',\n      id: \'1\'\n    }\n  }, {\n    label: \'Australia\',\n    value: {\n      country: \'Australia\',\n      id: \'2\'\n    }\n  }]).pipe(delay(3000));\n  const save = (form: any) => {\n    console.log(\'Saved!\', form);\n  };\n  return {\n    component: NggDropdownComponent,\n    template: `\n    <form [formGroup]="validationFormAdvance" #ngForm="ngForm" (submit)="save(validationFormAdvance.value)">\n    <div class="form-group" *ngIf="validationFormAdvance.get(\'country\') as dropdown">\n      <ngg-dropdown\n        label="Country"\n        [options]="options$ | async"\n        formControlName="country"\n        [invalid]="validationFormAdvance.get(\'country\').invalid && validationFormAdvance.get(\'country\').touched"\n      >\n        \x3c!-- Hint text when not submitted --\x3e\n        <ng-container data-form-info *ngIf="!ngForm[\'submitted\']"\n          >Select country</ng-container\n        >\n        <ng-container data-form-info *ngIf="ngForm[\'submitted\']">\n          \x3c!-- Text when form control contains one or more errors --\x3e\n          <ng-container *ngIf="dropdown.errors as errors">\n            \x3c!-- Text for each error (only one will be displayed at a time) --\x3e\n            <ng-container *ngIf="errors[\'required\']">Select country</ng-container>\n          </ng-container>\n        </ng-container>\n      </ngg-dropdown>\n    </div>\n    <button type="submit" [disabled]="ngForm?.submitted && validationFormAdvance.invalid">\n      Save\n    </button>\n    <button (click)="validationFormAdvance.reset()">\n      Reset\n    </button>\n    `,\n    props: {\n      ...args,\n      validationFormAdvance,\n      options$,\n      save\n    }\n  };\n}',...FormWithReset.parameters?.docs?.source}}};const __namedExportsOrder=["Select","Small","Test","MultiSelect","Searchable","CustomOption","Form","FormWithReset"]}}]);