{"version":3,"file":"src-lib-filter-chips-filter-chips-stories.50770f3e.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+DA;AA+CA;;AAEA;AACA;;;;AAIA;AACA;;;AAIA;;;;;;;;;;ACxFA;;;AAoBA;AACA;;AAEA;;AAEA;;;;AAIA;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC+EA;;AAGA;;ACmSA;AACA;AACA;AACA;AACA;;AAEA;;;AAKA;;AAEA;;AAMA","sources":["webpack://green/./dist/libs/core/src/chunks/chunk.JG4R6KQ7.js","webpack://green/./dist/libs/core/src/chunks/chunk.HL44DPZO.js","webpack://green/./dist/libs/core/src/chunks/chunk.DFTJBJPB.js","webpack://green/./dist/libs/core/src/chunks/chunk.73JVLKVZ.js"],"sourcesContent":["import {\n  resizeObserver\n} from \"./chunk.VHN4JEZC.js\";\nimport {\n  stringArrayConverter\n} from \"./chunk.C3ECHGX7.js\";\nimport {\n  GdsFormControlElement\n} from \"./chunk.MZSK66DN.js\";\nimport {\n  watch\n} from \"./chunk.2WO4NHJ2.js\";\nimport {\n  gdsCustomElement,\n  html\n} from \"./chunk.VOYMQ322.js\";\nimport {\n  __decorateClass,\n  __privateAdd,\n  __privateGet,\n  __privateMethod,\n  __privateSet\n} from \"./chunk.5VURDMKE.js\";\n\n// libs/core/src/components/filter-chips/filter-chips.ts\nimport { property, query, state } from \"lit/decorators.js\";\nimport { classMap } from \"lit/directives/class-map.js\";\n\n// libs/core/src/components/filter-chips/filter-chips.styles.ts\nimport { css } from \"lit\";\nvar styles = css`\n  @layer base, reset, transitional-styles;\n  @layer base {\n    :host {\n      display: inline-block;\n      max-width: 100%;\n    }\n\n    .chips {\n      display: flex;\n      flex-wrap: wrap;\n      gap: 0.5rem;\n    }\n\n    .collapse {\n      overflow: auto;\n      scroll-snap-type: both mandatory;\n      overscroll-behavior-x: contain;\n      flex-wrap: nowrap;\n      padding-bottom: 0.5rem;\n      scrollbar-color: rgba(0, 0, 0, 0.5) transparent;\n      scrollbar-width: thin;\n    }\n\n    ::slotted(*) {\n      scroll-snap-align: start;\n      scroll-snap-stop: always;\n    }\n  }\n`;\n\n// libs/core/src/components/filter-chips/filter-chips.ts\nvar _handleChipClick, _collapseThreshold, _collapsedAt, _getChipHeight, getChipHeight_fn, _handleSlotChange, handleSlotChange_fn;\nvar GdsFilterChips = class extends GdsFormControlElement {\n  constructor() {\n    super(...arguments);\n    __privateAdd(this, _getChipHeight);\n    __privateAdd(this, _handleSlotChange);\n    this.multiple = false;\n    this.label = \"\";\n    this.rowCollapse = false;\n    this._collapsed = false;\n    __privateAdd(this, _handleChipClick, (event) => {\n      const clickedChip = this.chips.find(\n        (s) => s === event.target || s.contains(event.target)\n      );\n      if (clickedChip) {\n        if (this.multiple && Array.isArray(this.value)) {\n          if (clickedChip.selected) {\n            this.value = this.value.filter((v) => v !== clickedChip.value);\n          } else {\n            this.value = [...this.value, clickedChip.value];\n          }\n        } else {\n          this.value = clickedChip.value;\n        }\n        this.dispatchEvent(\n          new CustomEvent(\"change\", {\n            detail: { clickedChip, value: this.value },\n            bubbles: true,\n            composed: true\n          })\n        );\n      }\n    });\n    __privateAdd(this, _collapseThreshold, 3);\n    __privateAdd(this, _collapsedAt, 0);\n  }\n  /**\n   * Returns the chips in the control\n   * @readonly\n   */\n  get chips() {\n    return this._elSlot ? this._elSlot.assignedElements() : [];\n  }\n  render() {\n    const layoutClasses = {\n      collapse: this._collapsed\n    };\n    return html`<div\n      class=\"chips ${classMap(layoutClasses)}\"\n      role=\"listbox\"\n      aria-label=${this.label}\n      aria-multiselectable=${this.multiple}\n    >\n      <slot\n        gds-allow=\"gds-filter-chip\"\n        @click=${__privateGet(this, _handleChipClick)}\n        @slotchange=${__privateMethod(this, _handleSlotChange, handleSlotChange_fn)}\n        role=\"none\"\n      ></slot>\n    </div>`;\n  }\n  _handleResize() {\n    if (!this.rowCollapse)\n      return;\n    const chipHeight = __privateMethod(this, _getChipHeight, getChipHeight_fn).call(this);\n    const selfHeight = this.offsetHeight;\n    const selfWidth = this.offsetWidth;\n    if (selfHeight >= chipHeight * __privateGet(this, _collapseThreshold)) {\n      this._collapsed = true;\n      __privateSet(this, _collapsedAt, selfWidth);\n    }\n    if (selfWidth > __privateGet(this, _collapsedAt)) {\n      this._collapsed = false;\n    }\n  }\n  _updateSelectedFromValue() {\n    if (!this.value)\n      return;\n    if (this.multiple && !Array.isArray(this.value)) {\n      this.value = [this.value];\n    }\n    if (!this.multiple && Array.isArray(this.value)) {\n      this.value = this.value[0];\n    }\n    this.updateComplete.then(() => {\n      this.chips.forEach((chip) => {\n        chip.selected = this.multiple ? this.value.includes(chip.value) : this.value === chip.value;\n      });\n    });\n  }\n};\n_handleChipClick = new WeakMap();\n_collapseThreshold = new WeakMap();\n_collapsedAt = new WeakMap();\n_getChipHeight = new WeakSet();\ngetChipHeight_fn = function() {\n  var _a;\n  return ((_a = this.chips[0]) == null ? void 0 : _a.offsetHeight) || 0;\n};\n_handleSlotChange = new WeakSet();\nhandleSlotChange_fn = function() {\n  var _a;\n  const selChipValue = (_a = this.chips.find((s) => s.selected)) == null ? void 0 : _a.value;\n  if (selChipValue) {\n    this.value = selChipValue;\n  }\n};\nGdsFilterChips.styles = [styles];\n__decorateClass([\n  property({ converter: stringArrayConverter })\n], GdsFilterChips.prototype, \"value\", 2);\n__decorateClass([\n  property({ type: Boolean })\n], GdsFilterChips.prototype, \"multiple\", 2);\n__decorateClass([\n  property()\n], GdsFilterChips.prototype, \"label\", 2);\n__decorateClass([\n  property({ type: Boolean, attribute: \"row-collapse\" })\n], GdsFilterChips.prototype, \"rowCollapse\", 2);\n__decorateClass([\n  state()\n], GdsFilterChips.prototype, \"_collapsed\", 2);\n__decorateClass([\n  query(\"slot\")\n], GdsFilterChips.prototype, \"_elSlot\", 2);\n__decorateClass([\n  resizeObserver()\n], GdsFilterChips.prototype, \"_handleResize\", 1);\n__decorateClass([\n  watch(\"value\")\n], GdsFilterChips.prototype, \"_updateSelectedFromValue\", 1);\nGdsFilterChips = __decorateClass([\n  gdsCustomElement(\"gds-filter-chips\")\n], GdsFilterChips);\n\nexport {\n  GdsFilterChips\n};\n","import {\n  TransitionalStyles\n} from \"./chunk.ZLWSCK7R.js\";\nimport {\n  GdsElement\n} from \"./chunk.ZQ4D5K7J.js\";\nimport {\n  gdsCustomElement,\n  getScopedTagName,\n  html\n} from \"./chunk.VOYMQ322.js\";\nimport {\n  __decorateClass\n} from \"./chunk.5VURDMKE.js\";\n\n// libs/core/src/components/filter-chips/filter-chip/filter-chip.ts\nimport { property, queryAsync } from \"lit/decorators.js\";\nimport { classMap } from \"lit/directives/class-map.js\";\n\n// libs/core/src/components/filter-chips/filter-chip/filter-chip.styles.ts\nimport { css } from \"lit\";\nvar styles = css`\n  @layer base, reset, transitional-styles;\n  @layer base {\n    .btn-p {\n      padding: 0 0.75rem;\n    }\n    .icon {\n      width: 1rem;\n    }\n  }\n`;\n\n// libs/core/src/components/filter-chips/filter-chip/filter-chip.ts\nvar GdsFilterChip = class extends GdsElement {\n  constructor() {\n    super(...arguments);\n    this.selected = false;\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    this.setAttribute(\"role\", \"none\");\n    TransitionalStyles.instance.apply(this, \"gds-filter-chip\");\n    this._button.then((btn) => {\n      TransitionalStyles.instance.apply(btn, \"gds-button\");\n    });\n  }\n  render() {\n    const btnClasses = {\n      \"btn-p\": !this.selected\n    };\n    return html`<gds-button\n      class=\"btn\"\n      size=\"small\"\n      .rank=${this.selected ? \"primary\" : \"secondary\"}\n      variant=${this._isUsingTransitionalStyles ? \"ghost\" : \"default\"}\n      gds-role=\"option\"\n      gds-aria-selected=${this.selected}\n    >\n      <span class=${classMap(btnClasses)}><slot></slot></span>\n      <gds-icon\n        name=\"checkmark\"\n        slot=\"trail\"\n        style=\"display: ${this.selected ? \"block\" : \"none\"}\"\n        class=\"icon\"\n      ></gds-icon>\n    </gds-button>`;\n  }\n};\nGdsFilterChip.styles = [styles];\n__decorateClass([\n  property({ reflect: true, type: Boolean })\n], GdsFilterChip.prototype, \"selected\", 2);\n__decorateClass([\n  property()\n], GdsFilterChip.prototype, \"value\", 2);\n__decorateClass([\n  queryAsync(getScopedTagName(\"gds-button\"))\n], GdsFilterChip.prototype, \"_button\", 2);\nGdsFilterChip = __decorateClass([\n  gdsCustomElement(\"gds-filter-chip\")\n], GdsFilterChip);\n\nexport {\n  GdsFilterChip\n};\n","import {\n  GdsElement\n} from \"./chunk.ZQ4D5K7J.js\";\nimport {\n  gdsCustomElement,\n  html\n} from \"./chunk.VOYMQ322.js\";\nimport {\n  __decorateClass\n} from \"./chunk.5VURDMKE.js\";\n\n// libs/core/src/components/icon/icon.ts\nimport { unsafeCSS } from \"lit\";\n\n// libs/core/src/components/icon/stem.styles.scss\nvar stem_styles_default = `svg:not([display=none]) {\n  contain: layout style;\n  display: flex;\n  height: 1lh;\n  isolation: isolate;\n  overflow: hidden;\n  width: auto;\n}\n\nsymbol {\n  fill: none;\n  height: 24px;\n  stroke: currentColor;\n  stroke-linecap: round;\n  stroke-linejoin: round;\n  stroke-width: 2px;\n  width: 24px;\n}`;\n\n// libs/core/src/components/icon/icon.ts\nvar GdsIcon = class extends GdsElement {\n  constructor() {\n    super(...arguments);\n    this.open = false;\n    this.name = \"\";\n  }\n  static get styles() {\n    return unsafeCSS(stem_styles_default);\n  }\n  render() {\n    const { name } = this;\n    return html`\n      <svg display=\"none\">\n        <symbol id=\"plus\">\n          <line x1=\"12\" y1=\"5\" x2=\"12\" y2=\"19\" />\n          <line x1=\"5\" y1=\"12\" x2=\"19\" y2=\"12\" />\n        </symbol>\n        <symbol id=\"x\">\n          <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\" />\n          <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\" />\n        </symbol>\n        <symbol id=\"chevron-right\">\n          <polyline points=\"9 18 15 12 9 6\" />\n        </symbol>\n        <symbol id=\"chevron-left\">\n          <polyline points=\"15 18 9 12 15 6\" />\n        </symbol>\n        <symbol id=\"chevron-down\">\n          <polyline points=\"6 9 12 15 18 9\" />\n        </symbol>\n        <symbol id=\"arrow\">\n          <line x1=\"5\" y1=\"12\" x2=\"19\" y2=\"12\" />\n          <polyline points=\"12 5 19 12 12 19\" />\n        </symbol>\n        <symbol id=\"bell\">\n          <path d=\"M18 8A6 6 0 0 0 6 8c0 7-3 9-3 9h18s-3-2-3-9\" />\n          <path d=\"M13.73 21a2 2 0 0 1-3.46 0\" />\n        </symbol>\n        <symbol id=\"calendar\">\n          <rect x=\"3\" y=\"4\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\" />\n          <line x1=\"16\" y1=\"2\" x2=\"16\" y2=\"6\" />\n          <line x1=\"8\" y1=\"2\" x2=\"8\" y2=\"6\" />\n          <line x1=\"3\" y1=\"10\" x2=\"21\" y2=\"10\" />\n        </symbol>\n        <symbol id=\"lock\">\n          <rect x=\"3\" y=\"11\" width=\"18\" height=\"11\" rx=\"2\" ry=\"2\" />\n          <path d=\"M7 11V7a5 5 0 0 1 10 0v4\" />\n        </symbol>\n        <symbol id=\"eye\">\n          <path d=\"M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z\" />\n          <circle cx=\"12\" cy=\"12\" r=\"3\" />\n        </symbol>\n        <symbol id=\"hash\">\n          <line x1=\"4\" y1=\"9\" x2=\"20\" y2=\"9\" />\n          <line x1=\"4\" y1=\"15\" x2=\"20\" y2=\"15\" />\n          <line x1=\"10\" y1=\"3\" x2=\"8\" y2=\"21\" />\n          <line x1=\"16\" y1=\"3\" x2=\"14\" y2=\"21\" />\n        </symbol>\n        <symbol id=\"mail\">\n          <path\n            d=\"M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z\"\n          />\n          <polyline points=\"22,6 12,13 2,6\" />\n        </symbol>\n        <symbol id=\"send\">\n          <line x1=\"22\" y1=\"2\" x2=\"11\" y2=\"13\" />\n          <polygon points=\"22 2 15 22 11 13 2 9 22 2\" />\n        </symbol>\n        <symbol id=\"info\">\n          <circle cx=\"12\" cy=\"12\" r=\"10\" />\n          <line x1=\"12\" y1=\"16\" x2=\"12\" y2=\"12\" />\n          <line x1=\"12\" y1=\"8\" x2=\"12.01\" y2=\"8\" />\n        </symbol>\n        <symbol id=\"tel\">\n          <path\n            d=\"M15.05 5A5 5 0 0 1 19 8.95M15.05 1A9 9 0 0 1 23 8.94m-1 7.98v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z\"\n          />\n        </symbol>\n        <symbol id=\"search\">\n          <circle cx=\"11\" cy=\"11\" r=\"8\" />\n          <line x1=\"21\" y1=\"21\" x2=\"16.65\" y2=\"16.65\" />\n        </symbol>\n        <symbol id=\"user\">\n          <path d=\"M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2\" />\n          <circle cx=\"12\" cy=\"7\" r=\"4\" />\n        </symbol>\n        <symbol id=\"arrow-up\">\n          <line x1=\"12\" y1=\"19\" x2=\"12\" y2=\"5\" />\n          <polyline points=\"5 12 12 5 19 12\" />\n        </symbol>\n        <symbol id=\"arrow-down\">\n          <line x1=\"12\" y1=\"5\" x2=\"12\" y2=\"19\" />\n          <polyline points=\"19 12 12 19 5 12\" />\n        </symbol>\n        <symbol id=\"warning\">\n          <path\n            d=\"M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z\"\n          />\n          <line x1=\"12\" y1=\"9\" x2=\"12\" y2=\"13\" />\n          <path x1=\"12\" y1=\"17\" x2=\"12.01\" y2=\"17\" />\n        </symbol>\n        <symbol id=\"checkmark\">\n          <path\n            d=\"M2.75 15.0938L9 20.25L21.25 3.75\"\n            stroke-width=\"2\"\n            stroke-linecap=\"round\"\n            stroke-linejoin=\"round\"\n          />\n        </symbol>\n      </svg>\n      <svg viewBox=\"0 0 24 24\">\n        <use href=\"#${name}\"></use>\n      </svg>\n    `;\n  }\n};\nGdsIcon.properties = {\n  open: { type: String, reflect: true },\n  name: { type: String }\n};\nGdsIcon = __decorateClass([\n  gdsCustomElement(\"gds-icon\")\n], GdsIcon);\n\nexport {\n  GdsIcon\n};\n","import {\n  tokens\n} from \"./chunk.22HXFUYL.js\";\nimport {\n  GdsFormControlElement\n} from \"./chunk.MZSK66DN.js\";\nimport {\n  constrainSlots\n} from \"./chunk.KBYQYDL3.js\";\nimport {\n  TransitionalStyles\n} from \"./chunk.ZLWSCK7R.js\";\nimport {\n  gdsCustomElement,\n  html\n} from \"./chunk.VOYMQ322.js\";\nimport {\n  __decorateClass,\n  __privateAdd,\n  __privateGet,\n  __privateSet\n} from \"./chunk.5VURDMKE.js\";\n\n// libs/core/src/components/button/button.ts\nimport { nothing as nothing2, unsafeCSS } from \"lit\";\nimport { property, query } from \"lit/decorators.js\";\nimport { when } from \"lit/directives/when.js\";\nimport { classMap } from \"lit/directives/class-map.js\";\n\n// libs/core/src/utils/directives/forward-attributes.ts\nimport { Directive, PartType, directive } from \"lit/directive.js\";\nimport { nothing } from \"lit/html.js\";\nvar ForwardAttributesDirective = class extends Directive {\n  constructor(partInfo) {\n    super(partInfo);\n    if (partInfo.type !== PartType.ELEMENT) {\n      throw new Error(\n        \"The `forwardAttributes` directive must be used in element bindings\"\n      );\n    }\n  }\n  render(_filter) {\n    return nothing;\n  }\n  update(part, [filter]) {\n    var _a;\n    const element = part.element;\n    const host = (_a = part.options) == null ? void 0 : _a.host;\n    Array.from(host.attributes).forEach((attr) => {\n      if (filter(attr)) {\n        element.setAttribute(attr.name.replace(\"gds-\", \"\"), attr.value);\n      }\n    });\n  }\n};\nvar forwardAttributes = directive(ForwardAttributesDirective);\n\n// libs/core/src/components/button/button.style.css\nvar button_style_default = `@layer tokens, a11y, core, ranks, sizes, variants, disabled;\n\n@layer tokens {\n  :host {\n    --_gap: var(--gds-sys-space-spacer-m);\n\n    --_transition: var(--gds-sys-transition);\n\n    --_padding-inline: var(--gds-sys-space-padding-l);\n    --_padding-block: var(--gds-sys-space-padding-m);\n\n    --_border-radius: var(--gds-sys-radii-full);\n    --_border-width: 1px;\n    --_border-style: solid;\n\n    --_color-bg: var(--gds-sys-color-content-content);\n    --_color-text: var(--gds-sys-color-content-content-inverse);\n    --_color-border: var(--gds-sys-color-stroke-stroke);\n\n    --_color-outline-alpha: 60%;\n    --_color-outline: var(--_color-border);\n\n    /* These state layer variables can be variant to the correct state layer token in\n    * the rank and variant specific styles. It will be blended with \\`--_color-bg\\`\n    * for the \\`background-color\\` rule. */\n    --_state-layer-hover: var(--gds-sys-color-state-layers-state-black);\n    --_state-layer-active: var(--gds-sys-color-state-layers-state-black-shade);\n\n    --gds-sys-transition-properties: color;\n\n    contain: layout;\n    display: inline-block;\n    isolation: isolate;\n    max-width: 100%;\n  }\n}\n\n@layer a11y {\n  @media (prefers-color-scheme: dark) {\n    /* TODO */\n  }\n  @media (prefers-reduced-motion: reduce) {\n    :host {\n      --_transition: none;\n    }\n  }\n}\n\n@layer core {\n  button {\n    --gds-sys-transition-properties: color !important;\n\n    align-items: center;\n    background-color: var(--_color-bg);\n    block-size: 100%;\n    border-color: var(--_color-border);\n    border-radius: var(--_border-radius);\n    border-style: var(--_border-style);\n    border-width: var(--_border-width);\n    box-sizing: border-box;\n    color: var(--_color-text);\n    color-scheme: dark light;\n    cursor: pointer;\n    display: inline-flex;\n    font-family: inherit;\n    font-size: 1rem;\n    font-weight: 400;\n    gap: var(--_gap);\n    height: var(--_size);\n    inline-size: 100%;\n    justify-content: space-between;\n    justify-items: center;\n    line-height: 1.25;\n    outline-color: transparent;\n    outline-offset: 2px;\n    outline-style: solid;\n    outline-width: 2px;\n    padding-block: var(--_padding-block);\n    padding-inline: var(--_padding-inline);\n    position: relative;\n    transition: var(--_transition);\n    transition-property: color, border-color;\n\n    &:focus {\n      outline-color: color-mix(\n        in srgb,\n        var(--_color-outline),\n        transparent var(--_color-outline-alpha)\n      );\n\n      &:not(:focus-visible) {\n        outline-color: transparent;\n      }\n    }\n\n    &:hover {\n      background-color: color-mix(\n        in srgb,\n        var(--_color-bg),\n        var(--_state-layer-hover)\n      );\n      border-color: color-mix(\n        in srgb,\n        var(--_color-border),\n        var(--_state-layer-hover)\n      );\n    }\n\n    &:active {\n      background-color: color-mix(\n        in srgb,\n        var(--_color-bg),\n        var(--_state-layer-active)\n      );\n      border-color: color-mix(\n        in srgb,\n        var(--_color-border),\n        var(--_state-layer-active)\n      );\n    }\n  }\n\n  button slot:not([name]) {\n    display: inline-block;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n  }\n}\n\n@layer ranks {\n  :host([rank*='secondary']) button {\n    --_color-bg: var(--gds-sys-color-content-content-inverse);\n    --_color-text: var(--gds-sys-color-content-content);\n    --_color-border: var(--gds-sys-color-stroke-stroke);\n\n    &:active {\n      --_state-layer-active: var(--gds-sys-color-state-layers-state-black-dim1);\n    }\n  }\n\n  :host([rank*='tertiary']) button {\n    --_color-bg: transparent;\n    --_color-text: var(--gds-sys-color-content-content);\n    --_color-border: transparent;\n\n    &:hover {\n      --_color-border: var(--gds-sys-color-stroke-stroke);\n    }\n\n    &:active {\n      --_state-layer-active: var(--gds-sys-color-state-layers-state-black-dim1);\n      --_color-border: var(--gds-sys-color-stroke-stroke);\n    }\n  }\n\n  button.circle {\n    align-items: center;\n    aspect-ratio: 1/1;\n    height: var(--_size);\n    justify-content: center;\n    padding: 0;\n    width: var(--_size);\n\n    &::slotted(gds-icon) {\n      align-items: center;\n      display: flex;\n      height: 24px;\n      justify-content: center;\n      width: 24px;\n    }\n  }\n}\n\n@layer sizes {\n  :host([size='small']) button {\n    --_padding-inline: var(--gds-sys-space-padding-l);\n    --_padding-block: var(--gds-sys-space-padding-s);\n    --_size: 2rem;\n    font-size: 0.875rem;\n  }\n\n  :host([size='medium']) button {\n    --_padding-inline: var(--gds-sys-space-padding-l);\n    --_padding-block: var(--gds-sys-space-padding-m);\n    --_size: 2.5rem;\n  }\n\n  :host([size='large']) button {\n    --_padding-inline: var(--gds-sys-space-padding-xl);\n    --_padding-block: var(--gds-sys-space-padding-m);\n    --_size: 3rem;\n  }\n}\n\n@layer variants {\n  :host([rank='primary'][variant='positive']) button {\n    --_bg: var(--gds-sys-color-container-container-positive);\n    --_color-bg: var(--_bg);\n    --_color-border: var(--_bg);\n\n    &:hover {\n      --_state-layer-hover: var(--gds-sys-color-state-layers-state-black-dim1);\n    }\n\n    &:active {\n      --_state-layer-active: var(--gds-sys-color-state-layers-state-black-dim2);\n    }\n\n    &:focus {\n      --_color-outline: var(--_bg);\n    }\n  }\n\n  :host([rank='secondary'][variant='positive']) button {\n    --_color-bg: var(--gds-sys-color-content-content-inverse);\n    --_color-text: var(--gds-sys-color-content-content-positive);\n    --_color-border: var(--gds-sys-color-stroke-stroke-positive);\n\n    &:hover {\n      --_state-layer-hover: var(--gds-sys-color-state-layers-state-positive);\n    }\n\n    &:active {\n      --_state-layer-active: var(\n        --gds-sys-color-state-layers-state-positive-dim\n      );\n    }\n  }\n\n  :host([rank='tertiary'][variant='positive']) button {\n    --_color-bg: transparent;\n    --_color-text: var(--gds-sys-color-content-content-positive);\n    --_color-border: transparent;\n\n    &:hover {\n      --_state-layer-hover: var(--gds-sys-color-state-layers-state-positive);\n      --_color-border: var(--gds-sys-color-stroke-stroke-positive);\n    }\n\n    &:active {\n      --_state-layer-active: var(\n        --gds-sys-color-state-layers-state-positive-dim\n      );\n      --_color-border: var(--gds-sys-color-stroke-stroke-positive);\n    }\n  }\n\n  :host([rank='primary'][variant='negative']) button {\n    --_bg: var(--gds-sys-color-container-container-negative);\n    --_color-bg: var(--_bg);\n    --_color-text: var(--gds-sys-color-status-negative-on-negative);\n    --_color-border: var(--_bg);\n\n    &:hover {\n      --_state-layer-hover: var(--gds-sys-color-state-layers-state-black-dim1);\n    }\n\n    &:active {\n      --_state-layer-active: var(--gds-sys-color-state-layers-state-black-dim2);\n    }\n\n    &:focus {\n      --_color-outline: var(--_bg);\n    }\n  }\n\n  :host([rank='secondary'][variant='negative']) button {\n    --_color-bg: var(--gds-sys-color-content-content-inverse);\n    --_color-text: var(--gds-sys-color-content-content-negative);\n    --_color-border: var(--gds-sys-color-stroke-stroke-negative);\n\n    &:hover {\n      --_state-layer-hover: var(--gds-sys-color-state-layers-state-negative);\n    }\n\n    &:active {\n      --_state-layer-active: var(\n        --gds-sys-color-state-layers-state-negative-dim\n      );\n    }\n  }\n\n  :host([rank='tertiary'][variant='negative']) button {\n    --_color-bg: transparent;\n    --_color-text: var(--gds-sys-color-content-content-negative);\n    --_color-border: transparent;\n\n    &:hover {\n      --_state-layer-hover: var(--gds-sys-color-state-layers-state-negative);\n      --_color-border: var(--gds-sys-color-stroke-stroke-negative);\n    }\n\n    &:active {\n      --_state-layer-active: var(\n        --gds-sys-color-state-layers-state-negative-dim\n      );\n      --_color-border: var(--gds-sys-color-stroke-stroke-negative);\n    }\n  }\n}\n\n@layer disabled {\n  button:disabled {\n    --_color-bg: var(--gds-sys-color-container-container-disabled);\n    border-color: var(--_color-bg);\n    color: var(--gds-sys-color-content-content-disabled);\n    pointer-events: none;\n  }\n}\n`;\n\n// libs/core/src/utils/helpers/strip-white-space.ts\nvar templateCache = /* @__PURE__ */ new WeakMap();\nfunction stripWhitespace(extendedTag) {\n  return (strings, ...values) => {\n    let modstrings = templateCache.get(strings);\n    if (!modstrings) {\n      modstrings = strings.map((s) => s.replace(/\\n[\\s]+</gm, \"<\"));\n      modstrings.raw = strings.raw;\n      templateCache.set(strings, modstrings);\n    }\n    return extendedTag(modstrings, ...values);\n  };\n}\n\n// libs/core/src/components/button/button.ts\nvar html2 = stripWhitespace(html);\nvar _isIconButton, _mainSlotChange, _handleClick;\nvar GdsButton = class extends GdsFormControlElement {\n  constructor() {\n    super();\n    this.disabled = false;\n    this.rank = \"primary\";\n    this.variant = \"neutral\";\n    this.size = \"medium\";\n    this.label = \"\";\n    __privateAdd(this, _isIconButton, false);\n    // Check if the button is an icon button.\n    __privateAdd(this, _mainSlotChange, () => {\n      var _a, _b;\n      const assignedNodes = (_b = (_a = this._mainSlot) == null ? void 0 : _a.assignedNodes()) != null ? _b : [];\n      __privateSet(this, _isIconButton, assignedNodes.length === 1 && assignedNodes.some((node) => node.gdsElementName === \"gds-icon\"));\n      this.requestUpdate();\n    });\n    __privateAdd(this, _handleClick, (e) => {\n      this.dispatchEvent(\n        new CustomEvent(\"gds-click\", {\n          bubbles: true,\n          composed: true,\n          detail: e\n        })\n      );\n      if (this.form) {\n        if (this.type === \"submit\") {\n          this.form.requestSubmit();\n        } else if (this.type === \"reset\") {\n          this.form.reset();\n        }\n      }\n    });\n    constrainSlots(this);\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    this.setAttribute(\"role\", \"none\");\n    TransitionalStyles.instance.apply(this, \"gds-button\");\n  }\n  render() {\n    const buttonClasses = {\n      circle: __privateGet(this, _isIconButton),\n      icon: __privateGet(this, _isIconButton),\n      small: this.size === \"small\",\n      large: this.size === \"large\",\n      positive: this.variant === \"positive\",\n      negative: this.variant === \"negative\",\n      primary: this.rank === \"primary\",\n      secondary: this.rank === \"secondary\",\n      tertiary: this.rank === \"tertiary\"\n    };\n    return html2`\n      <button\n        class=${classMap(buttonClasses)}\n        ?type=\"${this.type}\"\n        ?disabled=\"${this.disabled}\"\n        @click=\"${__privateGet(this, _handleClick)}\"\n        aria-label=${this.label || nothing2}\n        part=\"_button\"\n        ${forwardAttributes(\n      (attr) => attr.name.startsWith(\"gds-aria\") || attr.name === \"gds-role\"\n    )}\n      >\n        <slot name=\"lead\" gds-allow=\"gds-icon\"></slot>\n        <slot @slotchange=${__privateGet(this, _mainSlotChange)}></slot>\n        <slot name=\"trail\" gds-allow=\"gds-icon\"></slot>\n        ${when(\n      !this._isUsingTransitionalStyles,\n      () => html2`<gds-ripple></gds-ripple>`\n    )}\n      </button>\n    `;\n  }\n};\n_isIconButton = new WeakMap();\n_mainSlotChange = new WeakMap();\n_handleClick = new WeakMap();\nGdsButton.styles = [tokens, unsafeCSS(button_style_default)];\n/**\n * @internal\n */\nGdsButton.shadowRootOptions = {\n  mode: \"open\",\n  delegatesFocus: true\n};\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], GdsButton.prototype, \"disabled\", 2);\n__decorateClass([\n  property({ reflect: true })\n], GdsButton.prototype, \"type\", 2);\n__decorateClass([\n  property({ reflect: true })\n], GdsButton.prototype, \"rank\", 2);\n__decorateClass([\n  property({ reflect: true })\n], GdsButton.prototype, \"variant\", 2);\n__decorateClass([\n  property({ reflect: true })\n], GdsButton.prototype, \"size\", 2);\n__decorateClass([\n  property()\n], GdsButton.prototype, \"label\", 2);\n__decorateClass([\n  query(\"slot:not([name])\")\n], GdsButton.prototype, \"_mainSlot\", 2);\nGdsButton = __decorateClass([\n  gdsCustomElement(\"gds-button\")\n], GdsButton);\n\nexport {\n  GdsButton\n};\n"],"names":[],"sourceRoot":""}