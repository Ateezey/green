{"version":3,"file":"5197.ec8048dd.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;AA6BA;;;;;;;;;;;;;;;;AC8BA;AA6IA;;;;;;AASA;;;;;AAKA;AACA;AACA;;;AAGA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAKA;AACA;AACA;AACA;;;;;AAMA;AACA;AACA;AACA;AACA;;;;;AAMA;;;;;;;;;;;;AC/NA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC4CA;AAwHA;AACA;;;AAGA;;;AAGA;AACA;;;;;;AAOA;ACpIA;AAQA;;;;;;;;AC/CA","sources":["webpack://green/./dist/libs/core/src/chunks/chunk.2ND5EWHE.js","webpack://green/./dist/libs/core/src/chunks/chunk.FQJOPY6P.js","webpack://green/./dist/libs/core/src/chunks/chunk.RH4MLBTZ.js","webpack://green/./dist/libs/core/src/chunks/chunk.TQSHXMZ7.js","webpack://green/./dist/libs/core/src/chunks/chunk.VOZFG7I2.js","webpack://green/./dist/libs/core/src/chunks/chunk.YVYVFMRL.js"],"sourcesContent":["// libs/core/src/primitives/listbox/option.styles.ts\nimport { css } from \"lit\";\nvar style = css`\n  @layer base, reset, transitional-styles;\n  @layer base {\n    :host {\n      display: block;\n      padding: 1rem 1.5rem;\n      cursor: pointer;\n    }\n\n    :host(:not(:last-child)) {\n      border-bottom: 1px solid #e0e0e0;\n    }\n\n    :host(:hover) {\n      background-color: #ededed;\n    }\n\n    :host(:focus-visible) {\n      outline: auto;\n      outline-offset: -6px;\n      outline-color: #666;\n    }\n  }\n`;\nvar option_styles_default = style;\n\n// libs/core/src/mixins/focusable.ts\nvar Focusable = (superClass) => {\n  class HighlightableElement extends superClass {\n    constructor() {\n      super(...arguments);\n      this.onblur = (e) => {\n        this.setAttribute(\"tabindex\", \"-1\");\n        this.dispatchEvent(\n          new FocusEvent(\"gds-blur\", {\n            bubbles: true,\n            composed: true,\n            relatedTarget: e.relatedTarget\n          })\n        );\n      };\n      this.onfocus = (e) => {\n        this.dispatchEvent(\n          new FocusEvent(\"gds-focus\", {\n            bubbles: true,\n            composed: true,\n            relatedTarget: e.relatedTarget\n          })\n        );\n      };\n    }\n    focus(options) {\n      this.setAttribute(\"tabindex\", \"0\");\n      super.focus(options);\n    }\n  }\n  return HighlightableElement;\n};\n\nexport {\n  option_styles_default,\n  Focusable\n};\n","import {\n  GdsFormControlElement\n} from \"./chunk.4JYGKN2M.js\";\nimport {\n  observeLightDOM\n} from \"./chunk.WM7HBMMV.js\";\nimport {\n  constrainSlots\n} from \"./chunk.6NM7ENKA.js\";\nimport {\n  TransitionalStyles\n} from \"./chunk.WD3OOHSN.js\";\nimport {\n  watch\n} from \"./chunk.2WO4NHJ2.js\";\nimport {\n  gdsCustomElement,\n  getScopedTagName,\n  html\n} from \"./chunk.VOYMQ322.js\";\nimport {\n  __decorateClass,\n  __privateAdd,\n  __privateGet,\n  __privateMethod,\n  __privateSet\n} from \"./chunk.5VURDMKE.js\";\n\n// libs/core/src/components/dropdown/dropdown.ts\nimport { property, query, queryAsync } from \"lit/decorators.js\";\nimport { unsafeHTML } from \"lit/directives/unsafe-html.js\";\nimport { when } from \"lit/directives/when.js\";\nimport { ifDefined } from \"lit/directives/if-defined.js\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { msg, str, updateWhenLocaleChanges } from \"@lit/localize\";\n\n// libs/core/src/components/dropdown/dropdown.styles.ts\nimport { css } from \"lit\";\nvar style = css`\n  @layer base, reset, transitional-styles;\n\n  @layer base {\n    button {\n      appearance: none;\n      display: block;\n      background-color: black;\n      border-radius: 2rem;\n      border: none;\n      color: white;\n      padding: 0.7rem 2rem;\n      margin: 0.5rem 0;\n      box-sizing: border-box;\n    }\n  }\n`;\nvar dropdown_styles_default = style;\n\n// libs/core/src/components/dropdown/dropdown.ts\nvar _optionElements, _handleSearchFieldKeyUp, _handleSearchFieldKeyDown, _handleListboxKeyDown, _handleOptionFocusChange, _handleSelectionChange, handleSelectionChange_fn, _registerAutoCloseListener, registerAutoCloseListener_fn, _unregisterAutoCloseListener, unregisterAutoCloseListener_fn, _blurCloseListener, _tabCloseListener;\nvar GdsDropdown = class extends GdsFormControlElement {\n  constructor() {\n    super();\n    /**\n     * Selects an option in the dropdown.\n     *\n     * @fires change\n     */\n    __privateAdd(this, _handleSelectionChange);\n    __privateAdd(this, _registerAutoCloseListener);\n    __privateAdd(this, _unregisterAutoCloseListener);\n    this.label = \"\";\n    this.open = false;\n    this.searchable = false;\n    this.multiple = false;\n    this.compareWith = (a, b) => a === b;\n    this.searchFilter = (q, o) => o.innerHTML.toLowerCase().includes(q.toLowerCase());\n    this.syncPopoverWidth = false;\n    this.maxHeight = 500;\n    this.size = \"medium\";\n    this.hideLabel = false;\n    __privateAdd(this, _optionElements, void 0);\n    /**\n     * Event handler for filtering the options in the dropdown.\n     *\n     * @param e The keyboard event.\n     */\n    __privateAdd(this, _handleSearchFieldKeyUp, (e) => {\n      const input = this._elSearchInput;\n      const options = Array.from(__privateGet(this, _optionElements));\n      options.forEach((o) => o.hidden = false);\n      if (!input.value)\n        return;\n      const filteredOptions = options.filter(\n        (o) => !this.searchFilter(input.value, o)\n      );\n      filteredOptions.forEach((o) => o.hidden = true);\n    });\n    /**\n     * Check for ArrowDown or Tab in the search field.\n     * If found, focus should be moved to the listbox.\n     */\n    __privateAdd(this, _handleSearchFieldKeyDown, (e) => {\n      var _a;\n      (_a = this._elListbox) == null ? void 0 : _a.then((listbox) => {\n        if (e.key === \"ArrowDown\" || e.key === \"Tab\") {\n          e.preventDefault();\n          listbox.focus();\n          return;\n        }\n      });\n    });\n    /**\n     * Check for Tab in the listbox.\n     * If found, focus should be moved to the search field.\n     */\n    __privateAdd(this, _handleListboxKeyDown, (e) => {\n      var _a;\n      if (e.key === \"Tab\" && this.searchable) {\n        e.preventDefault();\n        (_a = this._elSearchInput) == null ? void 0 : _a.focus();\n        return;\n      }\n    });\n    __privateAdd(this, _handleOptionFocusChange, (e) => {\n      const triggerButton = this._elTriggerBtn;\n      if (triggerButton)\n        triggerButton.ariaActiveDescendantElement = e.target;\n    });\n    /**\n     * A listener to close the dropdown when any other element is focused.\n     */\n    __privateAdd(this, _blurCloseListener, (e) => {\n      const isFocusOutside = e instanceof FocusEvent && e.relatedTarget && !this.contains(e.relatedTarget);\n      if (isFocusOutside)\n        this.open = false;\n    });\n    __privateAdd(this, _tabCloseListener, (e) => {\n      var _a;\n      if (e.key === \"Tab\" && !this.searchable) {\n        e.preventDefault();\n        this.open = false;\n        (_a = this._elTriggerBtn) == null ? void 0 : _a.focus();\n      }\n    });\n    constrainSlots(this);\n    updateWhenLocaleChanges(this);\n    __privateSet(this, _optionElements, this.getElementsByTagName(\n      getScopedTagName(\"gds-option\")\n    ));\n  }\n  get type() {\n    return \"gds-dropdown\";\n  }\n  /**\n   * Get the options of the dropdown.\n   */\n  get options() {\n    return Array.from(__privateGet(this, _optionElements)).filter(\n      (o) => !o.hasAttribute(\"isplaceholder\")\n    );\n  }\n  /**\n   * Return the first option with a isPlaceholder attribute.\n   * If no placeholder is found, this will be undefined.\n   */\n  get placeholder() {\n    return Array.from(__privateGet(this, _optionElements)).find(\n      (o) => o.hasAttribute(\"isplaceholder\")\n    );\n  }\n  /**\n   * Returns the display value as a string.\n   * If the dropdown is in multiple mode, this will be a comma separated list of the selected values.\n   */\n  get displayValue() {\n    var _a, _b;\n    let displayValue;\n    if (Array.isArray(this.value)) {\n      this.value.length > 2 ? displayValue = msg(str`${this.value.length} selected`) : displayValue = this.value.reduce(\n        (acc, cur) => {\n          var _a2;\n          return acc + ((_a2 = this.options.find((v) => v.value === cur)) == null ? void 0 : _a2.innerHTML) + \", \";\n        },\n        \"\"\n      ).slice(0, -2);\n    } else {\n      displayValue = (_a = this.options.find((v) => v.selected)) == null ? void 0 : _a.innerHTML;\n    }\n    return displayValue || ((_b = this.placeholder) == null ? void 0 : _b.innerHTML) || \"\";\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    TransitionalStyles.instance.apply(this, \"gds-dropdown\");\n    this.updateComplete.then(() => {\n      this._handleLightDOMChange();\n      this._handleValueChange();\n    });\n  }\n  render() {\n    return html`\n      ${when(\n      this.label && !this.hideLabel,\n      () => html`<label for=\"trigger\">${this.label}</label>`\n    )}\n\n      <span class=\"form-info\"><slot name=\"sub-label\"></slot></span>\n\n      <button\n        id=\"trigger\"\n        @click=\"${() => this.open = !this.open}\"\n        aria-haspopup=\"listbox\"\n        role=\"combobox\"\n        aria-owns=\"listbox\"\n        aria-controls=\"listbox\"\n        aria-expanded=\"${this.open}\"\n        aria-label=\"${this.label}\"\n        class=${classMap({ small: this.size === \"small\" })}\n      >\n        <slot name=\"trigger\">\n          <span>${unsafeHTML(this.displayValue)}</span>\n        </slot>\n      </button>\n\n      <span class=\"form-info\"><slot name=\"message\"></slot></span>\n\n      <gds-popover\n        .label=${this.label}\n        .open=${this.open}\n        .triggerRef=${this._elTriggerBtnAsync}\n        .calcMaxWidth=${(trigger) => this.syncPopoverWidth ? `${trigger.offsetWidth}px` : `auto`}\n        .calcMaxHeight=${(_trigger) => `${this.maxHeight}px`}\n        @gds-ui-state=${(e) => this.open = e.detail.open}\n      >\n        ${when(\n      this.searchable,\n      () => html`<input\n              id=\"searchinput\"\n              type=\"text\"\n              aria-label=\"${msg(\"Filter available options\")}\"\n              placeholder=\"${msg(\"Search\")}\"\n              @keydown=${__privateGet(this, _handleSearchFieldKeyDown)}\n              @keyup=${__privateGet(this, _handleSearchFieldKeyUp)}\n            />`\n    )}\n\n        <gds-listbox\n          id=\"listbox\"\n          .multiple=\"${ifDefined(this.multiple)}\"\n          .compareWith=\"${this.compareWith}\"\n          @change=\"${__privateMethod(this, _handleSelectionChange, handleSelectionChange_fn)}\"\n          @gds-focus=\"${__privateGet(this, _handleOptionFocusChange)}\"\n          @keydown=${__privateGet(this, _handleListboxKeyDown)}\n        >\n          <slot gds-allow=\"gds-option gds-menu-heading\"></slot>\n        </gds-listbox>\n      </gds-popover>\n    `;\n  }\n  _handleLightDOMChange() {\n    var _a, _b;\n    this.requestUpdate();\n    if (this.multiple) {\n      this._handleValueChange();\n      return;\n    }\n    if (this.value === void 0) {\n      if (this.placeholder)\n        this.value = this.placeholder.value;\n      else\n        this.value = (_a = this.options[0]) == null ? void 0 : _a.value;\n    } else if (!this.placeholder && this.options.find(\n      (o) => this.compareWith(o.value, this.value)\n    ) === void 0) {\n      this.options[0] && (this.options[0].selected = true);\n      this.value = (_b = this.options[0]) == null ? void 0 : _b.value;\n    }\n  }\n  _handleValueChange() {\n    this._elListbox.then((listbox) => {\n      if (listbox) {\n        if (Array.isArray(this.value))\n          listbox.selection = this.value;\n        else\n          listbox.selection = [this.value];\n      }\n    });\n  }\n  _onOpenChange() {\n    const open = this.open;\n    Array.from(__privateGet(this, _optionElements)).forEach((o) => o.hidden = !open);\n    if (open)\n      __privateMethod(this, _registerAutoCloseListener, registerAutoCloseListener_fn).call(this);\n    else {\n      __privateMethod(this, _unregisterAutoCloseListener, unregisterAutoCloseListener_fn).call(this);\n      this._elSearchInput && (this._elSearchInput.value = \"\");\n    }\n    this.dispatchEvent(\n      new CustomEvent(\"gds-ui-state\", {\n        detail: { open },\n        bubbles: true,\n        composed: true\n      })\n    );\n  }\n};\n_optionElements = new WeakMap();\n_handleSearchFieldKeyUp = new WeakMap();\n_handleSearchFieldKeyDown = new WeakMap();\n_handleListboxKeyDown = new WeakMap();\n_handleOptionFocusChange = new WeakMap();\n_handleSelectionChange = new WeakSet();\nhandleSelectionChange_fn = function() {\n  this._elListbox.then((listbox) => {\n    var _a;\n    if (this.multiple)\n      this.value = listbox.selection.map((s) => s.value);\n    else {\n      this.value = (_a = listbox.selection[0]) == null ? void 0 : _a.value;\n      this.open = false;\n      setTimeout(() => {\n        var _a2;\n        return (_a2 = this._elTriggerBtn) == null ? void 0 : _a2.focus();\n      }, 0);\n    }\n    this.dispatchEvent(\n      new CustomEvent(\"change\", {\n        detail: { value: this.value },\n        bubbles: true,\n        composed: true\n      })\n    );\n  });\n};\n_registerAutoCloseListener = new WeakSet();\nregisterAutoCloseListener_fn = function() {\n  this.addEventListener(\"blur\", __privateGet(this, _blurCloseListener));\n  this.addEventListener(\"gds-blur\", __privateGet(this, _blurCloseListener));\n  this.addEventListener(\"keydown\", __privateGet(this, _tabCloseListener));\n};\n_unregisterAutoCloseListener = new WeakSet();\nunregisterAutoCloseListener_fn = function() {\n  this.removeEventListener(\"blur\", __privateGet(this, _blurCloseListener));\n  this.removeEventListener(\"gds-blur\", __privateGet(this, _blurCloseListener));\n  this.removeEventListener(\"keydown\", __privateGet(this, _tabCloseListener));\n};\n_blurCloseListener = new WeakMap();\n_tabCloseListener = new WeakMap();\nGdsDropdown.styles = dropdown_styles_default;\nGdsDropdown.shadowRootOptions = {\n  mode: \"open\",\n  delegatesFocus: true\n};\n__decorateClass([\n  property()\n], GdsDropdown.prototype, \"label\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], GdsDropdown.prototype, \"open\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], GdsDropdown.prototype, \"searchable\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], GdsDropdown.prototype, \"multiple\", 2);\n__decorateClass([\n  property()\n], GdsDropdown.prototype, \"compareWith\", 2);\n__decorateClass([\n  property()\n], GdsDropdown.prototype, \"searchFilter\", 2);\n__decorateClass([\n  property({ type: Boolean, attribute: \"sync-popover-width\" })\n], GdsDropdown.prototype, \"syncPopoverWidth\", 2);\n__decorateClass([\n  property({ type: Number, attribute: \"max-height\" })\n], GdsDropdown.prototype, \"maxHeight\", 2);\n__decorateClass([\n  property()\n], GdsDropdown.prototype, \"size\", 2);\n__decorateClass([\n  property({ type: Boolean, attribute: \"hide-label\" })\n], GdsDropdown.prototype, \"hideLabel\", 2);\n__decorateClass([\n  query(\"#trigger\")\n], GdsDropdown.prototype, \"_elTriggerBtn\", 2);\n__decorateClass([\n  queryAsync(\"#trigger\")\n], GdsDropdown.prototype, \"_elTriggerBtnAsync\", 2);\n__decorateClass([\n  queryAsync(\"#listbox\")\n], GdsDropdown.prototype, \"_elListbox\", 2);\n__decorateClass([\n  query(\"#searchinput\")\n], GdsDropdown.prototype, \"_elSearchInput\", 2);\n__decorateClass([\n  observeLightDOM({\n    attributes: true,\n    childList: true,\n    subtree: true,\n    characterData: true\n  })\n], GdsDropdown.prototype, \"_handleLightDOMChange\", 1);\n__decorateClass([\n  watch(\"value\")\n], GdsDropdown.prototype, \"_handleValueChange\", 1);\n__decorateClass([\n  watch(\"open\")\n], GdsDropdown.prototype, \"_onOpenChange\", 1);\nGdsDropdown = __decorateClass([\n  gdsCustomElement(\"gds-dropdown\")\n], GdsDropdown);\n\nexport {\n  GdsDropdown\n};\n","import {\n  TransitionalStyles\n} from \"./chunk.WD3OOHSN.js\";\nimport {\n  GdsElement\n} from \"./chunk.WJL43WU3.js\";\nimport {\n  gdsCustomElement\n} from \"./chunk.VOYMQ322.js\";\nimport {\n  __decorateClass\n} from \"./chunk.5VURDMKE.js\";\n\n// libs/core/src/primitives/menu/menu-heading.ts\nimport { html } from \"lit\";\n\n// libs/core/src/primitives/menu/menu-heading.styles.ts\nimport { css } from \"lit\";\nvar style = css`\n  @layer base, reset, transitional-styles;\n  @layer base {\n    :host {\n      padding: 0.5 1rem;\n      cursor: pointer;\n    }\n\n    :host(:hover) {\n      background-color: grey;\n    }\n  }\n`;\nvar menu_heading_styles_default = style;\n\n// libs/core/src/primitives/menu/menu-heading.ts\nvar GdsMenuHeading = class extends GdsElement {\n  connectedCallback() {\n    super.connectedCallback();\n    this.setAttribute(\"inert\", \"true\");\n    this.updateComplete.then(\n      () => TransitionalStyles.instance.apply(this, \"gds-menu-heading\")\n    );\n  }\n  render() {\n    return html`<slot></slot>`;\n  }\n};\nGdsMenuHeading.styles = menu_heading_styles_default;\nGdsMenuHeading = __decorateClass([\n  gdsCustomElement(\"gds-menu-heading\")\n], GdsMenuHeading);\n\nexport {\n  GdsMenuHeading\n};\n","import {\n  watchMediaQuery\n} from \"./chunk.WM7HBMMV.js\";\nimport {\n  TransitionalStyles\n} from \"./chunk.WD3OOHSN.js\";\nimport {\n  GdsElement\n} from \"./chunk.WJL43WU3.js\";\nimport {\n  watch\n} from \"./chunk.2WO4NHJ2.js\";\nimport {\n  gdsCustomElement\n} from \"./chunk.VOYMQ322.js\";\nimport {\n  __decorateClass,\n  __privateAdd,\n  __privateGet,\n  __privateMethod,\n  __privateSet\n} from \"./chunk.5VURDMKE.js\";\n\n// libs/core/src/primitives/popover/popover.ts\nimport { html, unsafeCSS } from \"lit\";\nimport { property, state } from \"lit/decorators.js\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { msg } from \"@lit/localize\";\nimport { createRef, ref } from \"lit/directives/ref.js\";\nimport {\n  computePosition,\n  autoUpdate,\n  offset,\n  flip\n} from \"@floating-ui/dom\";\n\n// libs/core/src/primitives/popover/popover.styles.ts\nimport { css } from \"lit\";\nvar style = css`\n  @layer base, reset, transitional-styles;\n  @layer base {\n    :host([open]) dialog {\n      opacity: 1;\n      box-sizing: border-box;\n      transform: translate3d(0, 0, 0);\n      visibility: visible;\n    }\n\n    dialog {\n      inset: auto;\n      position: fixed;\n      overflow: hidden;\n      padding: 0px;\n      box-sizing: border-box;\n      right: 0;\n      margin: 0;\n      box-shadow:\n        0 0 0 1px rgba(0, 0, 0, 0.2),\n        0 1rem 28px rgba(0, 0, 0, 0.15);\n      border-width: 0;\n      border-radius: 0.5rem;\n    }\n\n    header {\n      display: none;\n    }\n\n    dialog::backdrop {\n      background-color: transparent;\n      display: block;\n      position: fixed;\n    }\n  }\n`;\nvar popover_styles_default = style;\n\n// libs/core/src/primitives/popover/popover.ts\nvar _dialogElementRef, _autoPositionCleanupFn, _isMobileViewport, _dispatchUiStateEvent, _handleCloseButton, _registerTriggerEvents, registerTriggerEvents_fn, _unregisterTriggerEvents, unregisterTriggerEvents_fn, _registerAutoPositioning, registerAutoPositioning_fn, _triggerKeyDownListener, _focusFirstSlottedChild, _clickOutsideListener;\nvar GdsPopover = class extends GdsElement {\n  constructor() {\n    super(...arguments);\n    __privateAdd(this, _registerTriggerEvents);\n    __privateAdd(this, _unregisterTriggerEvents);\n    __privateAdd(this, _registerAutoPositioning);\n    this.open = false;\n    this.triggerRef = Promise.resolve(void 0);\n    this.label = void 0;\n    this.placement = \"bottom-start\";\n    this.calcMinWidth = (referenceEl) => `${referenceEl.offsetWidth}px`;\n    this.calcMaxWidth = (_referenceEl) => `auto`;\n    this.calcMinHeight = (referenceEl) => `auto`;\n    this.calcMaxHeight = (_referenceEl) => `500px`;\n    this._trigger = void 0;\n    this._isVirtKbVisible = false;\n    // A reference to the dialog element used to make the popover modal\n    __privateAdd(this, _dialogElementRef, createRef());\n    // A function that removes the Floating UI auto positioning. This gets called when we switch to mobile view layout.\n    __privateAdd(this, _autoPositionCleanupFn, void 0);\n    __privateAdd(this, _isMobileViewport, false);\n    __privateAdd(this, _dispatchUiStateEvent, (reason) => {\n      this.dispatchEvent(\n        new CustomEvent(\"gds-ui-state\", {\n          detail: { open: this.open, reason },\n          bubbles: false,\n          composed: false\n        })\n      );\n    });\n    __privateAdd(this, _handleCloseButton, (e) => {\n      e.stopPropagation();\n      e.preventDefault();\n      this.open = false;\n      __privateGet(this, _dispatchUiStateEvent).call(this, \"close\");\n      setTimeout(() => {\n        var _a;\n        return (_a = this._trigger) == null ? void 0 : _a.focus();\n      }, 250);\n    });\n    /**\n     * ArrowDown on the trigger element will trigger the popover by default, and escape will close it.\n     */\n    __privateAdd(this, _triggerKeyDownListener, (e) => {\n      if (e.key === \"ArrowDown\") {\n        e.preventDefault();\n        this.open = true;\n        __privateGet(this, _dispatchUiStateEvent).call(this, \"show\");\n      }\n      if (e.key === \"Escape\") {\n        this.open = false;\n        __privateGet(this, _dispatchUiStateEvent).call(this, \"cancel\");\n      }\n    });\n    /**\n     * Move focus to the first slotted child.\n     */\n    __privateAdd(this, _focusFirstSlottedChild, () => {\n      var _a, _b;\n      const firstSlottedChild = (_b = (_a = this.shadowRoot) == null ? void 0 : _a.querySelector(\"slot\")) == null ? void 0 : _b.assignedElements()[0];\n      this.updateComplete.then(() => {\n        firstSlottedChild == null ? void 0 : firstSlottedChild.focus();\n      });\n    });\n    __privateAdd(this, _clickOutsideListener, (evt) => {\n      const e = evt;\n      const dialog = __privateGet(this, _dialogElementRef).value;\n      const isNotEnterKey = e.clientX > 0 || e.clientY > 0;\n      if (isNotEnterKey && dialog && this.open) {\n        const rect = dialog.getBoundingClientRect();\n        const isInDialog = rect.top <= e.clientY && e.clientY <= rect.top + rect.height && rect.left <= e.clientX && e.clientX <= rect.left + rect.width;\n        if (!isInDialog) {\n          e.stopPropagation();\n          this.open = false;\n          __privateGet(this, _dispatchUiStateEvent).call(this, \"close\");\n        }\n      }\n    });\n  }\n  _handleTriggerRefChanged() {\n    this.triggerRef.then((el) => {\n      if (el)\n        this._trigger = el;\n    });\n  }\n  _handleTriggerChanged() {\n    __privateMethod(this, _registerTriggerEvents, registerTriggerEvents_fn).call(this);\n    __privateMethod(this, _registerAutoPositioning, registerAutoPositioning_fn).call(this);\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    TransitionalStyles.instance.apply(this, \"gds-popover\");\n    __privateMethod(this, _registerTriggerEvents, registerTriggerEvents_fn).call(this);\n    this._handleOpenChange();\n    this.addEventListener(\"keydown\", (e) => {\n      if (e.key === \"Escape\") {\n        this.open = false;\n        __privateGet(this, _dispatchUiStateEvent).call(this, \"cancel\");\n        e.stopPropagation();\n        e.preventDefault();\n      }\n    });\n    this.addEventListener(\"focusin\", (e) => {\n      const t = e.target;\n      if (t.tagName === \"INPUT\" || t.tagName === \"TEXTAREA\") {\n        this._isVirtKbVisible = true;\n      } else {\n        this._isVirtKbVisible = false;\n      }\n    });\n    this.addEventListener(\"blurin\", (_) => {\n      this._isVirtKbVisible = false;\n    });\n  }\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    __privateMethod(this, _unregisterTriggerEvents, unregisterTriggerEvents_fn).call(this);\n  }\n  render() {\n    return html`<dialog\n      class=\"${classMap({ \"v-kb-visible\": this._isVirtKbVisible })}\"\n      ${ref(__privateGet(this, _dialogElementRef))}\n    >\n      <header>\n        <h2>${this.label}</h2>\n        <button\n          class=\"close\"\n          @click=${__privateGet(this, _handleCloseButton)}\n          aria-label=\"${msg(\"Close\")}\"\n        >\n          <i></i>\n        </button>\n      </header>\n      <slot></slot>\n    </dialog>`;\n  }\n  _handleOpenChange() {\n    this.setAttribute(\"aria-hidden\", String(!this.open));\n    this.hidden = !this.open;\n    this.updateComplete.then(() => {\n      var _a, _b, _c;\n      if (this.open) {\n        (_a = __privateGet(this, _dialogElementRef).value) == null ? void 0 : _a.showModal();\n        __privateGet(this, _focusFirstSlottedChild).call(this);\n        setTimeout(\n          () => {\n            var _a2;\n            return (_a2 = __privateGet(this, _dialogElementRef).value) == null ? void 0 : _a2.addEventListener(\n              \"click\",\n              __privateGet(this, _clickOutsideListener)\n            );\n          },\n          0\n        );\n      } else {\n        (_b = __privateGet(this, _dialogElementRef).value) == null ? void 0 : _b.close();\n        (_c = __privateGet(this, _dialogElementRef).value) == null ? void 0 : _c.removeEventListener(\n          \"click\",\n          __privateGet(this, _clickOutsideListener)\n        );\n      }\n    });\n  }\n  _handleMobileLayout(matches) {\n    var _a, _b, _c, _d;\n    __privateSet(this, _isMobileViewport, matches);\n    if (matches) {\n      (_a = __privateGet(this, _autoPositionCleanupFn)) == null ? void 0 : _a.call(this);\n      (_b = __privateGet(this, _dialogElementRef).value) == null ? void 0 : _b.style.removeProperty(\"left\");\n      (_c = __privateGet(this, _dialogElementRef).value) == null ? void 0 : _c.style.removeProperty(\"top\");\n      (_d = __privateGet(this, _dialogElementRef).value) == null ? void 0 : _d.style.removeProperty(\"minWidth\");\n      this.updateComplete.then(() => {\n        var _a2;\n        if (this.open)\n          (_a2 = __privateGet(this, _dialogElementRef).value) == null ? void 0 : _a2.showModal();\n      });\n    } else {\n      this.updateComplete.then(() => {\n        __privateMethod(this, _registerAutoPositioning, registerAutoPositioning_fn).call(this);\n      });\n    }\n  }\n};\n_dialogElementRef = new WeakMap();\n_autoPositionCleanupFn = new WeakMap();\n_isMobileViewport = new WeakMap();\n_dispatchUiStateEvent = new WeakMap();\n_handleCloseButton = new WeakMap();\n_registerTriggerEvents = new WeakSet();\nregisterTriggerEvents_fn = function() {\n  var _a;\n  (_a = this._trigger) == null ? void 0 : _a.addEventListener(\"keydown\", __privateGet(this, _triggerKeyDownListener));\n};\n_unregisterTriggerEvents = new WeakSet();\nunregisterTriggerEvents_fn = function() {\n  var _a, _b;\n  (_a = this._trigger) == null ? void 0 : _a.removeEventListener(\"keydown\", __privateGet(this, _triggerKeyDownListener));\n  (_b = __privateGet(this, _autoPositionCleanupFn)) == null ? void 0 : _b.call(this);\n};\n_registerAutoPositioning = new WeakSet();\nregisterAutoPositioning_fn = function() {\n  const referenceEl = this._trigger;\n  const floatingEl = __privateGet(this, _dialogElementRef).value;\n  if (!referenceEl || !floatingEl || __privateGet(this, _isMobileViewport))\n    return;\n  if (__privateGet(this, _autoPositionCleanupFn)) {\n    __privateGet(this, _autoPositionCleanupFn).call(this);\n  }\n  __privateSet(this, _autoPositionCleanupFn, autoUpdate(referenceEl, floatingEl, () => {\n    computePosition(referenceEl, floatingEl, {\n      placement: this.placement,\n      middleware: [offset(8), flip()],\n      strategy: \"fixed\"\n    }).then(\n      ({ x, y }) => Object.assign(floatingEl.style, {\n        left: `${x}px`,\n        top: `${y}px`,\n        minWidth: this.calcMinWidth(referenceEl),\n        maxWidth: this.calcMaxWidth(referenceEl),\n        minHeight: this.calcMinHeight(referenceEl),\n        maxHeight: this.calcMaxHeight(referenceEl)\n      })\n    );\n  }));\n};\n_triggerKeyDownListener = new WeakMap();\n_focusFirstSlottedChild = new WeakMap();\n_clickOutsideListener = new WeakMap();\nGdsPopover.styles = unsafeCSS(popover_styles_default);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], GdsPopover.prototype, \"open\", 2);\n__decorateClass([\n  property()\n], GdsPopover.prototype, \"triggerRef\", 2);\n__decorateClass([\n  property()\n], GdsPopover.prototype, \"label\", 2);\n__decorateClass([\n  property()\n], GdsPopover.prototype, \"placement\", 2);\n__decorateClass([\n  property()\n], GdsPopover.prototype, \"calcMinWidth\", 2);\n__decorateClass([\n  property()\n], GdsPopover.prototype, \"calcMaxWidth\", 2);\n__decorateClass([\n  property()\n], GdsPopover.prototype, \"calcMinHeight\", 2);\n__decorateClass([\n  property()\n], GdsPopover.prototype, \"calcMaxHeight\", 2);\n__decorateClass([\n  state()\n], GdsPopover.prototype, \"_trigger\", 2);\n__decorateClass([\n  state()\n], GdsPopover.prototype, \"_isVirtKbVisible\", 2);\n__decorateClass([\n  watch(\"triggerRef\")\n], GdsPopover.prototype, \"_handleTriggerRefChanged\", 1);\n__decorateClass([\n  watch(\"_trigger\")\n], GdsPopover.prototype, \"_handleTriggerChanged\", 1);\n__decorateClass([\n  watch(\"open\")\n], GdsPopover.prototype, \"_handleOpenChange\", 1);\n__decorateClass([\n  watchMediaQuery(\"(max-width: 576px)\")\n], GdsPopover.prototype, \"_handleMobileLayout\", 1);\nGdsPopover = __decorateClass([\n  gdsCustomElement(\"gds-popover\")\n], GdsPopover);\n\nexport {\n  GdsPopover\n};\n","import {\n  Focusable,\n  option_styles_default\n} from \"./chunk.2ND5EWHE.js\";\nimport {\n  TransitionalStyles\n} from \"./chunk.WD3OOHSN.js\";\nimport {\n  GdsElement\n} from \"./chunk.WJL43WU3.js\";\nimport {\n  watch\n} from \"./chunk.2WO4NHJ2.js\";\nimport {\n  gdsCustomElement\n} from \"./chunk.VOYMQ322.js\";\nimport {\n  __decorateClass,\n  __privateAdd,\n  __privateGet,\n  __privateMethod,\n  __privateSet\n} from \"./chunk.5VURDMKE.js\";\n\n// libs/core/src/primitives/listbox/option.ts\nimport { html } from \"lit\";\nimport { property } from \"lit/decorators.js\";\nimport { when } from \"lit/directives/when.js\";\nimport { classMap } from \"lit/directives/class-map.js\";\nvar _hidden, _emitSelect, emitSelect_fn;\nvar GdsOption = class extends Focusable(GdsElement) {\n  constructor() {\n    super();\n    __privateAdd(this, _emitSelect);\n    __privateAdd(this, _hidden, false);\n    this.selected = false;\n    this.isPlaceholder = false;\n    this.addEventListener(\"click\", __privateMethod(this, _emitSelect, emitSelect_fn));\n    this.addEventListener(\"keydown\", (e) => {\n      if (e.key !== \"Enter\" && e.key !== \" \")\n        return;\n      e.preventDefault();\n      __privateMethod(this, _emitSelect, emitSelect_fn).call(this, e);\n    });\n  }\n  get hidden() {\n    return __privateGet(this, _hidden);\n  }\n  set hidden(value) {\n    if (this.isPlaceholder)\n      return;\n    __privateSet(this, _hidden, value === \"true\" || value === true);\n    this.setAttribute(\"aria-hidden\", value.toString());\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    this.setAttribute(\"role\", \"option\");\n    if (this.isPlaceholder) {\n      __privateSet(this, _hidden, true);\n      this.setAttribute(\"aria-hidden\", \"true\");\n    }\n    this.updateComplete.then(\n      () => TransitionalStyles.instance.apply(this, \"gds-option\")\n    );\n  }\n  get parentElement() {\n    return super.parentElement;\n  }\n  _handlePlaceholderStatusChange() {\n    if (this.isPlaceholder) {\n      __privateSet(this, _hidden, true);\n      this.setAttribute(\"aria-hidden\", \"true\");\n    } else {\n      __privateSet(this, _hidden, false);\n      this.setAttribute(\"aria-hidden\", \"false\");\n    }\n  }\n  render() {\n    var _a;\n    const isMultiple = (_a = this.parentElement) == null ? void 0 : _a.multiple;\n    const checkbox = html` <span\n      class=\"checkbox ${classMap({ checked: this.selected })}\"\n    ></span>`;\n    if (!isMultiple) {\n      if (this.selected)\n        this.setAttribute(\"highlighted\", \"\");\n      else\n        this.removeAttribute(\"highlighted\");\n    }\n    return html`<div>${when(isMultiple, () => checkbox)} <slot></slot></div>`;\n  }\n};\n_hidden = new WeakMap();\n_emitSelect = new WeakSet();\nemitSelect_fn = function(e) {\n  e.stopPropagation();\n  this.dispatchEvent(\n    new CustomEvent(\"gds-select\", {\n      bubbles: true,\n      composed: true,\n      detail: {\n        value: this.value\n      }\n    })\n  );\n};\nGdsOption.styles = option_styles_default;\n__decorateClass([\n  property()\n], GdsOption.prototype, \"value\", 2);\n__decorateClass([\n  property({\n    attribute: \"aria-hidden\",\n    reflect: true\n  })\n], GdsOption.prototype, \"hidden\", 1);\n__decorateClass([\n  property({\n    attribute: \"aria-selected\",\n    reflect: true\n  })\n], GdsOption.prototype, \"selected\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], GdsOption.prototype, \"isPlaceholder\", 2);\n__decorateClass([\n  watch(\"isplaceholder\")\n], GdsOption.prototype, \"_handlePlaceholderStatusChange\", 1);\nGdsOption = __decorateClass([\n  gdsCustomElement(\"gds-option\")\n], GdsOption);\n\nexport {\n  GdsOption\n};\n","import {\n  ListboxKbNavController,\n  unwrap\n} from \"./chunk.2X23R32H.js\";\nimport {\n  TransitionalStyles\n} from \"./chunk.WD3OOHSN.js\";\nimport {\n  GdsElement\n} from \"./chunk.WJL43WU3.js\";\nimport {\n  watch\n} from \"./chunk.2WO4NHJ2.js\";\nimport {\n  gdsCustomElement,\n  html\n} from \"./chunk.VOYMQ322.js\";\nimport {\n  __decorateClass,\n  __privateAdd,\n  __privateGet\n} from \"./chunk.5VURDMKE.js\";\n\n// libs/core/src/primitives/listbox/listbox.ts\nimport { property } from \"lit/decorators.js\";\nimport { createRef, ref } from \"lit/directives/ref.js\";\n\n// libs/core/src/primitives/listbox/listbox.styles.ts\nimport { css } from \"lit\";\nvar style = css`\n  @layer base, reset, transitional-styles;\n  @layer base {\n    :host {\n      display: flex;\n      flex-direction: column;\n    }\n  }\n`;\nvar listbox_styles_default = style;\n\n// libs/core/src/primitives/listbox/listbox.ts\nvar _slotRef, _handleSelect;\nvar GdsListbox = class extends GdsElement {\n  constructor() {\n    super();\n    this.multiple = false;\n    this.compareWith = (a, b) => a === b;\n    __privateAdd(this, _slotRef, createRef());\n    __privateAdd(this, _handleSelect, (e) => {\n      const option = e.target;\n      if (this.multiple)\n        option.selected = !option.selected;\n      else {\n        option.selected = true;\n        Array.from(this.options).forEach((el) => {\n          if (el !== option)\n            el.selected = false;\n        });\n      }\n      ;\n      this.ariaActiveDescendantElement = option;\n      this.dispatchEvent(\n        new CustomEvent(\"change\", {\n          bubbles: false,\n          composed: false\n        })\n      );\n    });\n    new ListboxKbNavController(this);\n  }\n  get navigableItems() {\n    return this.visibleOptionElements;\n  }\n  /**\n   * Returns a list of all `gds-option` elements in the listbox.\n   */\n  get options() {\n    if (!__privateGet(this, _slotRef).value)\n      return [];\n    return unwrap(__privateGet(this, _slotRef).value).assignedElements().filter(\n      (o) => !o.hasAttribute(\"isplaceholder\") && o.gdsElementName === \"gds-option\"\n    ) || [];\n  }\n  /**\n   * Returns a list of all visible `gds-option` elements in the listbox.\n   */\n  get visibleOptionElements() {\n    return this.options.filter((el) => !el.hidden);\n  }\n  /**\n   * Returns a list of all visible `gds-option` elements in the listbox.\n   */\n  get visibleSelectedOptionElements() {\n    return this.options.filter((el) => el.selected && !el.hidden);\n  }\n  /**\n   * Returns a list of all selected `gds-option` elements in the listbox.\n   */\n  get selection() {\n    return this.options.filter((el) => el.selected);\n  }\n  set selection(values) {\n    this.options.forEach((el) => {\n      el.selected = values.some((v) => this.compareWith(v, el.value));\n    });\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    this.setAttribute(\"role\", \"listbox\");\n    TransitionalStyles.instance.apply(this, \"gds-listbox\");\n    this.addEventListener(\"gds-select\", __privateGet(this, _handleSelect));\n  }\n  /**\n   * Focuses the first selected option in the listbox.\n   * If no option is selected, the first visible option is focused.\n   */\n  focus() {\n    var _a;\n    ;\n    (_a = this.visibleSelectedOptionElements[0] || this.visibleOptionElements[0]) == null ? void 0 : _a.focus();\n  }\n  render() {\n    return html`<slot ${ref(__privateGet(this, _slotRef))}></slot>`;\n  }\n  _rerenderOptions() {\n    this.options.forEach((el) => {\n      el.requestUpdate();\n    });\n  }\n};\n_slotRef = new WeakMap();\n_handleSelect = new WeakMap();\nGdsListbox.styles = listbox_styles_default;\n__decorateClass([\n  property({\n    type: Boolean,\n    reflect: true,\n    attribute: \"aria-multiselectable\",\n    converter: {\n      fromAttribute: Boolean,\n      toAttribute: (value) => value.toString()\n    }\n  })\n], GdsListbox.prototype, \"multiple\", 2);\n__decorateClass([\n  property()\n], GdsListbox.prototype, \"compareWith\", 2);\n__decorateClass([\n  watch(\"multiple\")\n], GdsListbox.prototype, \"_rerenderOptions\", 1);\nGdsListbox = __decorateClass([\n  gdsCustomElement(\"gds-listbox\")\n], GdsListbox);\n\nexport {\n  GdsListbox\n};\n"],"names":[],"sourceRoot":""}