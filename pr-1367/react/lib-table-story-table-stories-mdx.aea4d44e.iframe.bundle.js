(self.webpackChunkgreen=self.webpackChunkgreen||[]).push([[9034],{"./libs/react/src/lib/table/story/table.stories.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Template:()=>Template,__namedExportsOrder:()=>__namedExportsOrder,default:()=>table_stories,expandableTable:()=>expandableTable,selectableTable:()=>selectableTable,sortableTable:()=>sortableTable,table:()=>table});var react=__webpack_require__("./node_modules/react/index.js"),lib=__webpack_require__("./node_modules/@storybook/addon-docs/node_modules/@mdx-js/react/lib/index.js"),dist=__webpack_require__("./node_modules/@storybook/addon-docs/dist/index.mjs"),components=__webpack_require__("./libs/react/src/lib/table/components/index.ts"),jsx_runtime=(__webpack_require__("./node_modules/core-js/modules/es.array.map.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js"),__webpack_require__("./node_modules/core-js/modules/es.array.iterator.js"),__webpack_require__("./node_modules/core-js/modules/web.dom-collections.iterator.js"),__webpack_require__("./node_modules/react/jsx-runtime.js")),columnData=[{children:"#",accessor:"id"},{children:"First name",accessor:"firstName"},{children:"Last name",accessor:"lastName"},{children:"Superhero",accessor:"superHero"}],rowData=[{id:"1",firstName:"Peter",lastName:"Parker",superHero:"Spider-man",expanded:!1,checked:!1,rowContentDetails:[{id:"1",firstName:"Peter",lastName:"Parker",superHero:"Spider-man"}]},{id:"2",firstName:"John",lastName:"Wayne",superHero:"Batman",expanded:!1,checked:!1,rowContentDetails:[{id:"1",firstName:"Peter",lastName:"Parker",superHero:"Spider-man"}]},{id:"3",firstName:"Bruce",lastName:"Banner",superHero:"Hulk",expanded:!1,checked:!1,rowContentDetails:[{id:"1",firstName:"Peter",lastName:"Parker",superHero:"Spider-man"}]}],SortableTable=function SortableTable(){var _React$useState=react.useState(rowData),data=_React$useState[0],setData=_React$useState[1],_React$useState2=react.useState(null),sortedColumn=_React$useState2[0],setSortedColumn=_React$useState2[1];return(0,jsx_runtime.jsxs)(components.XI,{sortedColumn,onSort:function onSort(newSortedColumn){setSortedColumn(newSortedColumn),newSortedColumn&&setData((0,components.eh)(data,newSortedColumn.accessor,newSortedColumn.sortDirection))},children:[(0,jsx_runtime.jsx)(components.A0,{children:(0,jsx_runtime.jsx)(components.Hj,{children:columnData.map((function(column,i){return(0,jsx_runtime.jsx)(components.M_,Object.assign({},column),i)}))})}),(0,jsx_runtime.jsx)(components.BF,{children:data.map((function(item,i){return(0,jsx_runtime.jsx)(components.Hj,{children:columnData.map((function(column,columnIndex){return(0,jsx_runtime.jsx)(components.nA,{children:item[column.accessor]},columnIndex)}))},i)}))})]})},SelectableTable=function SelectableTable(){var _React$useState3=react.useState(rowData),data=_React$useState3[0],setData=_React$useState3[1],_React$useState4=react.useState({checked:!1,indeterminate:!1}),selectAllIndicator=_React$useState4[0],setSelectAllIndicator=_React$useState4[1];return(0,jsx_runtime.jsxs)(components.XI,{onRowSelect:function onSelect(event,rowUniqueKey){var _onRowSelect=(0,components.iY)(event,data,"id",rowUniqueKey),newData=_onRowSelect.data,isAllSelected=_onRowSelect.isAllSelected,isIndeterminate=_onRowSelect.isIndeterminate;setSelectAllIndicator({checked:isAllSelected,indeterminate:isIndeterminate}),setData(newData)},children:[(0,jsx_runtime.jsx)(components.A0,{children:(0,jsx_runtime.jsx)(components.Hj,Object.assign({},selectAllIndicator,{children:columnData.map((function(column,i){return(0,jsx_runtime.jsx)(components.M_,Object.assign({},column),i)}))}))}),(0,jsx_runtime.jsx)(components.BF,{children:data.map((function(item,i){return(0,jsx_runtime.jsx)(components.Hj,{uniqueKey:item.id,checked:item.checked,children:columnData.map((function(column,columnIndex){return(0,jsx_runtime.jsx)(components.nA,{children:item[column.accessor]},columnIndex)}))},i)}))})]})},ExpandableTable=function ExpandableTable(){var _React$useState5=react.useState(rowData),data=_React$useState5[0],setData=_React$useState5[1];return(0,jsx_runtime.jsxs)(components.XI,{onRowExpand:function onRowExpand(expanded,rowId){setData((function(prevData){return prevData.map((function(item){return item.id===rowId?Object.assign({},item,{expanded}):item}))}))},children:[(0,jsx_runtime.jsx)(components.A0,{children:(0,jsx_runtime.jsx)(components.Hj,{children:columnData.map((function(column,i){return(0,jsx_runtime.jsx)(components.M_,Object.assign({},column),i)}))})}),(0,jsx_runtime.jsx)(components.BF,{children:data.map((function(item,i){var _item$rowContentDetai;return(0,jsx_runtime.jsxs)(react.Fragment,{children:[(0,jsx_runtime.jsx)(components.Hj,{uniqueKey:item.id,isExpanded:item.expanded,children:columnData.map((function(column,columnIndex){return(0,jsx_runtime.jsx)(components.nA,{children:item[column.accessor]},columnIndex)}))}),null==(_item$rowContentDetai=item.rowContentDetails)?void 0:_item$rowContentDetai.map((function(rowItem){return(0,jsx_runtime.jsx)(components.Hj,{isSubRow:!0,uniqueKey:rowItem.id,isExpanded:rowItem.expanded,children:columnData.map((function(column,columnIndex){return(0,jsx_runtime.jsx)(components.nA,{children:rowItem[column.accessor]},columnIndex)}))},rowItem.id)}))]},i)}))})]})};const Template=()=>{const _components=Object.assign({div:"div"},(0,lib.RP)());return(0,jsx_runtime.jsx)(_components.div,{className:"my-5",children:(0,jsx_runtime.jsxs)(components.XI,{children:[(0,jsx_runtime.jsx)(components.A0,{children:(0,jsx_runtime.jsx)(components.Hj,{children:columnData.map(((column,i)=>(0,jsx_runtime.jsx)(components.M_,{...column},i)))})}),(0,jsx_runtime.jsx)(components.BF,{children:rowData.map(((item,i)=>(0,jsx_runtime.jsx)(components.Hj,{children:columnData.map(((column,columnIndex)=>(0,jsx_runtime.jsx)(components.nA,{children:item[column.accessor]},columnIndex)))},i)))})]})})};function _createMdxContent(props){const _components=Object.assign({h1:"h1",p:"p",h2:"h2",pre:"pre",code:"code",h4:"h4",h3:"h3"},(0,lib.RP)(),props.components);return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(dist.W8,{title:"Components/Table",component:components.XI}),"\n",(0,jsx_runtime.jsx)(_components.h1,{id:"table",children:"Table"}),"\n",(0,jsx_runtime.jsx)(_components.p,{children:"Table Component"}),"\n",(0,jsx_runtime.jsx)(dist.gG,{name:"Table",parameters:{componentIds:["component-table"]},children:Template.bind({})}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"usage",children:"Usage"}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-typescript",children:"import {\n  Table,\n  TableHeader,\n  TableBody,\n  TableRow,\n  TableHeaderCell,\n  TableCell,\n} from '@sebgroup/green-react'\n"})}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-typescript",children:"interface SuperHeroData {\n  id: ReactNode\n  firstName: ReactNode\n  lastName: ReactNode\n  superHero: ReactNode\n}\n\ntype SuperHeroRowData = GenericTableRow<SuperHeroData>\n\ntype SuperHeroColumnDataT = Omit<\n  TableHeaderCellProps<SuperHeroRowData>,\n  'ref'\n> &\n  React.RefAttributes<HTMLTableCellElement>\n\nconst columnData: SuperHeroColumnDataT[] = [\n  {\n    children: '#',\n    accessor: 'id',\n  },\n  ...\n]\n\nconst rowData: SuperHeroRowData[] = [\n  {\n    id: '1',\n    firstName: 'Peter',\n    lastName: 'Parker',\n    superHero: 'Spider-man',\n    expanded: false,\n    checked: false,\n  },\n  ...\n]\n"})}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-tsx",children:"<Table>\n  <TableHeader>\n    <TableRow>\n      {columnData.map((column: SuperHeroColumnDataT, i: number) => (\n        <TableHeaderCell key={i} {...column} />\n      ))}\n    </TableRow>\n  </TableHeader>\n  <TableBody>\n    {rowData.map((item: SuperHeroRowData, i: number) => (\n      <TableRow key={i}>\n        {columnData.map((column: SuperHeroColumnDataT, columnIndex: number) => (\n          <TableCell key={columnIndex}>{item[column.accessor]}</TableCell>\n        ))}\n      </TableRow>\n    ))}\n  </TableBody>\n</Table>\n"})}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"sortable-table",children:"Sortable Table"}),"\n",(0,jsx_runtime.jsx)(dist.gG,{name:"Sortable table",parameters:{componentIds:["component-sortable"]},children:(0,jsx_runtime.jsx)(SortableTable,{})}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-tsx",children:"import { sortArray } from '@sebgroup/green-react'\n\nconst [data, setData] = React.useState<SuperHeroRowData[]>(rowData)\nconst [sortedColumn, setSortedColumn] = React.useState<SortedColumn | null>(\n  null,\n)\n\nconst onSort = (newSortedColumn: SortedColumn) => {\n  setSortedColumn(newSortedColumn)\n  newSortedColumn &&\n    setData(\n      sortArray(\n        data,\n        newSortedColumn.accessor as keyof SuperHeroRowData,\n        newSortedColumn.sortDirection,\n      ),\n    )\n}\n"})}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-tsx",children:"<Table sortedColumn={sortedColumn} onSort={onSort}>\n  ....\n</Table>\n"})}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"selectable-table",children:"Selectable Table"}),"\n",(0,jsx_runtime.jsx)(dist.gG,{name:"Selectable table",parameters:{componentIds:["component-selectable"]},children:(0,jsx_runtime.jsx)(SelectableTable,{})}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-typescript",children:"import { onRowSelect } from '@sebgroup/green-react'\n\nconst [data, setData] = React.useState<SuperHeroRowData[]>(rowData)\nconst [selectAllIndicator, setSelectAllIndicator] = React.useState({\n  checked: false,\n  indeterminate: false,\n})\n\nconst onSelect = (\n  event: React.ChangeEvent<HTMLInputElement>,\n  rowUniqueKey: string,\n) => {\n  const {\n    data: newData,\n    isAllSelected,\n    isIndeterminate,\n  } = onRowSelect(event, data, 'id', rowUniqueKey)\n  setSelectAllIndicator({\n    checked: isAllSelected,\n    indeterminate: isIndeterminate,\n  })\n  setData(newData)\n}\n"})}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-tsx",children:"<Table onRowSelect={onSelect}>\n  <TableHeader>\n    <TableRow {...selectAllIndicator}>....</TableRow>\n  </TableHeader>\n  <TableBody>\n    {data.map((item: SuperHeroRowData, i: number) => (\n      <TableRow key={i} uniqueKey={item.id} checked={item.checked}>\n        ...\n      </TableRow>\n    ))}\n  </TableBody>\n</Table>\n"})}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"expandable-table",children:"Expandable Table"}),"\n",(0,jsx_runtime.jsx)(dist.gG,{name:"Expandable table",parameters:{componentIds:["component-expandable"]},children:(0,jsx_runtime.jsx)(ExpandableTable,{})}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-typescript",children:"interface SuperHeroData {\n  id: ReactNode\n  firstName: ReactNode\n  lastName: ReactNode\n  superHero: ReactNode\n  rowContentDetails?: SuperHeroRowData[]\n}\n\ntype SuperHeroRowData = GenericTableRow<SuperHeroData>\n\ntype ExpandedSuperHeroRowAccessor = Omit<SuperHeroRowData, 'rowContentDetails'>\n\nexport const rowData: SuperHeroRowData[] = [\n  {\n    id: '1',\n    firstName: 'Peter',\n    lastName: 'Parker',\n    superHero: 'Spider-man',\n    expanded: false,\n    checked: false,\n    rowContentDetails: [\n      {\n        id: '1',\n        firstName: 'Peter',\n        lastName: 'Parker',\n        superHero: 'Spider-man',\n      },\n    ],\n  },\n ....\n]\n"})}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-typescript",children:"const [data, setData] = React.useState<SuperHeroRowData[]>(rowData)\n\nconst onRowExpand = (expanded: boolean, rowId: string) => {\n  setData((prevData: SuperHeroRowData[]) => {\n    return prevData.map((item: SuperHeroRowData) => {\n      if (item.id === rowId) {\n        return { ...item, expanded }\n      }\n      return item\n    })\n  })\n}\n"})}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-tsx",children:"<Table onRowExpand={onRowExpand}>\n  .....\n  <TableBody>\n    {data.map((item: SuperHeroRowData, i: number) => (\n      <React.Fragment key={i}>\n        <TableRow uniqueKey={item.id} isExpanded={item.expanded}>\n          {columnData.map(\n            (column: SuperHeroColumnDataT, columnIndex: number) => (\n              <TableCell key={columnIndex}>{item[column.accessor]}</TableCell>\n            ),\n          )}\n        </TableRow>\n        {item.rowContentDetails?.map((rowItem: SuperHeroRowData) => (\n          <TableRow\n            isSubRow\n            key={rowItem.id}\n            uniqueKey={rowItem.id}\n            isExpanded={rowItem.expanded}\n          >\n            {columnData.map(\n              (column: SuperHeroColumnDataT, columnIndex: number) => (\n                <TableCell key={columnIndex}>\n                  {\n                    rowItem[\n                      column.accessor as keyof ExpandedSuperHeroRowAccessor\n                    ]\n                  }\n                </TableCell>\n              ),\n            )}\n          </TableRow>\n        ))}\n      </React.Fragment>\n    ))}\n  </TableBody>\n</Table>\n"})}),"\n",(0,jsx_runtime.jsx)(_components.h4,{id:"available-component-props",children:"Available component props"}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"table-1",children:(0,jsx_runtime.jsx)(_components.code,{children:"Table"})}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["| Props        | Description                    | Type                                                                    |\n| :----------- | :----------------------------- | :---------------------------------------------------------------------- |\n| onRowSelect  | callback when row is selected  | ",(0,jsx_runtime.jsx)(_components.code,{children:"(event: React.ChangeEvent<HTMLInputElement>, rowKey: string ) => void"})," |\n| onRowExpand  | callback when row is expanded  | ",(0,jsx_runtime.jsx)(_components.code,{children:"(isExpanded: boolean, rowKey: string) => void"}),"                         |\n| onSort       | callback when column is sorted | ",(0,jsx_runtime.jsx)(_components.code,{children:"(sortedColumn: SortedColumn) => void"}),"                                  |\n| sortedColumn | preset sorted column           | ",(0,jsx_runtime.jsx)(_components.code,{children:"SortedColumn"}),"                                                          |"]}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"tableheadercell",children:(0,jsx_runtime.jsx)(_components.code,{children:"TableHeaderCell"})}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["| Props         | Description                       | Type                |\n| :------------ | :-------------------------------- | :------------------ |\n| accessor      | key to access the table row data. | ",(0,jsx_runtime.jsx)(_components.code,{children:"keyof RowDataType"})," |\n| disableSort   | disable sorting.                  | ",(0,jsx_runtime.jsx)(_components.code,{children:"boolean"}),"           |\n| sortDirection | Ascending and descending value    | ",(0,jsx_runtime.jsx)(_components.code,{children:"SortDirection"}),"     |"]}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"tablerow",children:(0,jsx_runtime.jsx)(_components.code,{children:"TableRow"})}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["| Props               | Description                                                       | Type                              |\n| :------------------ | :---------------------------------------------------------------- | :-------------------------------- |\n| checked             | Selectable table checkbox checked value.                          | ",(0,jsx_runtime.jsx)(_components.code,{children:"boolean"}),"                         |\n| indeterminate       | Selectable table checkbox indeterminate value.                    | ",(0,jsx_runtime.jsx)(_components.code,{children:"boolean"}),"                         |\n| isHeaderRow         | Determines it has table header row                                | ",(0,jsx_runtime.jsx)(_components.code,{children:"boolean"}),"                         |\n| hideSelect          | Select can be hidden using this flag                              | ",(0,jsx_runtime.jsx)(_components.code,{children:"boolean"}),"                         |\n| uniqueKey           | uniqueKey to access during sorting, selecting, expanding in table | ",(0,jsx_runtime.jsx)(_components.code,{children:"string"}),"                          |\n| parentKey           | Used to parent identifier in expandle table                       | ",(0,jsx_runtime.jsx)(_components.code,{children:"string"}),"                          |\n| isExpanded          | value that unsure the subrow is shown                             | ",(0,jsx_runtime.jsx)(_components.code,{children:"boolean"}),"                         |\n| isSubRow            | value that identifies that table row is subrow                    | ",(0,jsx_runtime.jsx)(_components.code,{children:"boolean"}),"                         |\n| collapseButtonProps | expandable button props                                           | ",(0,jsx_runtime.jsx)(_components.code,{children:"JSX.IntrinsicElements['button']"})," |\n| checkboxProps       | Selectable table checkbox props                                   | ",(0,jsx_runtime.jsx)(_components.code,{children:"JSX.IntrinsicElements['input']"}),"  |"]})]})}const table=Template.bind({});table.storyName="Table",table.parameters={storySource:{source:'() => {\n  return <div className="my-5">\n      <Table>\n        <TableHeader>\n          <TableRow>\n            {columnData.map((column, i) => <TableHeaderCell key={i} {...column} />)}\n          </TableRow>\n        </TableHeader>\n        <TableBody>\n          {rowData.map((item, i) => <TableRow key={i}>\n              {columnData.map((column, columnIndex) => <TableCell key={columnIndex}>{item[column.accessor]}</TableCell>)}\n            </TableRow>)}\n        </TableBody>\n      </Table>\n    </div>;\n}'},componentIds:["component-table"]};const sortableTable=()=>(0,jsx_runtime.jsx)(SortableTable,{});sortableTable.storyName="Sortable table",sortableTable.parameters={storySource:{source:"<SortableTable />"},componentIds:["component-sortable"]};const selectableTable=()=>(0,jsx_runtime.jsx)(SelectableTable,{});selectableTable.storyName="Selectable table",selectableTable.parameters={storySource:{source:"<SelectableTable />"},componentIds:["component-selectable"]};const expandableTable=()=>(0,jsx_runtime.jsx)(ExpandableTable,{});expandableTable.storyName="Expandable table",expandableTable.parameters={storySource:{source:"<ExpandableTable />"},componentIds:["component-expandable"]};const componentMeta={title:"Components/Table",component:components.XI,tags:["stories-mdx"],includeStories:["table","sortableTable","selectableTable","expandableTable"]};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs={...componentMeta.parameters.docs||{},page:function MDXContent(props={}){const{wrapper:MDXLayout}=Object.assign({},(0,lib.RP)(),props.components);return MDXLayout?(0,jsx_runtime.jsx)(MDXLayout,{...props,children:(0,jsx_runtime.jsx)(_createMdxContent,{...props})}):_createMdxContent(props)}};const table_stories=componentMeta,__namedExportsOrder=["Template","table","sortableTable","selectableTable","expandableTable"]},"./node_modules/memoizerific sync recursive":module=>{function webpackEmptyContext(req){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}webpackEmptyContext.keys=()=>[],webpackEmptyContext.resolve=webpackEmptyContext,webpackEmptyContext.id="./node_modules/memoizerific sync recursive",module.exports=webpackEmptyContext}}]);